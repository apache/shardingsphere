dataSources:
  master_ds_0: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master_ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
  master_ds_0_slave_0: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master_ds_0_slave_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password:
  master_ds_0_slave_1: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master_ds_0_slave_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
  master_ds_1: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master_ds_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
  master_ds_1_slave_0: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master_ds_1_slave_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password:
  master_ds_1_slave_1: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:master_ds_1_slave_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
  default_ds: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    jdbcUrl: jdbc:h2:mem:default_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 

shardingRule:
  tables:
    t_user:
      actualDataNodes: ds_${0..1}.t_user_${0..15}
      databaseStrategy: 
        complex:
          shardingColumns: region_id, user_id
          algorithmClassName: TestDatabaseComplexAlgorithmClassName
      tableStrategy: 
        complex:
          shardingColumns: region_id, user_id
          algorithmClassName: TestTableComplexAlgorithmClassName
    t_stock:
      actualDataNodes: ds_${0..1}.t_stock{0..8}
      databaseStrategy: 
        hint:
          algorithmClassName: TestDatabaseHintAlgorithmClassName
      tableStrategy: 
        hint:
          algorithmClassName: TestTableHintAlgorithmClassName
    t_order: 
      actualDataNodes: ds_${0..1}.t_order_${0..1}
      tableStrategy: 
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_${order_id % 2}
      keyGeneratorColumnName: order_id
      keyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
      logicIndex: order_index
    t_order_item:
      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
      tableStrategy:
        standard:
          shardingColumn: order_id
          preciseAlgorithmClassName: TestPreciseAlgorithmClassName
          rangeAlgorithmClassName: TestRangeAlgorithmClassName
  bindingTables:
    - t_order, t_order_item
  broadcastTables:
    - t_config
  defaultDataSourceName: default_ds
  defaultDatabaseStrategy: 
    inline:
      shardingColumn: order_id
      algorithmExpression: ds_${order_id % 2}
  defaultTableStrategy: 
    none:
  defaultKeyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
  
  masterSlaveRules:
    ds_0:
      masterDataSourceName: master_ds_0
      slaveDataSourceNames:
        - master_ds_0_slave_0
        - master_ds_0_slave_1
      loadBalanceAlgorithmType: ROUND_ROBIN
    ds_1:
      masterDataSourceName: master_ds_1
      slaveDataSourceNames: 
        - master_ds_1_slave_0
        - master_ds_1_slave_1
      loadBalanceAlgorithmClassName: TestAlgorithmClass

configMap:
  sharding-key1: sharding-value1
  sharding-key2: sharding-value2
  master-slave-key0: master-slave-value0
  master-slave-key1: master-slave-value1

props:
  sql.show: true
