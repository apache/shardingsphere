#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: E2E - SQL

on:
  push:
    branches: [ master, dev ]
    paths:
      - '.github/workflows/e2e-sql.yml'
      - '**/pom.xml'
      - '**/src/main/**'
      - '!examples/**'
      - '!distribution/**'
      - 'distribution/proxy/**'
      - '!distribution/proxy/src/main/release-docs/**'
      - '!kernel/data-pipeline/**'
      - '!test/**'
      - 'test/pom.xml'
      - 'test/e2e/fixture/**'
      - 'test/e2e/env/**'
      - 'test/e2e/sql/**'
      - '!*.md'
  pull_request:
    branches: [ master ]
    paths:
      - '.github/workflows/e2e-sql.yml'
      - '**/pom.xml'
      - '**/src/main/**'
      - '!examples/**'
      - '!distribution/**'
      - 'distribution/proxy/**'
      - '!distribution/proxy/src/main/release-docs/**'
      - '!kernel/data-pipeline/**'
      - '!test/**'
      - 'test/pom.xml'
      - 'test/e2e/fixture/**'
      - 'test/e2e/env/**'
      - 'test/e2e/sql/**'
      - '!*.md'
  workflow_dispatch:

concurrency:
  group: e2e-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true -Dspotless.apply.skip=true
  REPOSITORY_NAME: shardingsphere
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

jobs:
  build-e2e-image:
    name: Build E2E image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ env.REPOSITORY_NAME }}-maven-third-party-e2e-cache-${{ github.sha }}
          restore-keys: |
            ${{ env.REPOSITORY_NAME }}-maven-third-party-e2e-cache-
            ${{ env.REPOSITORY_NAME }}-maven-third-party-
      - name: Build E2E image
        run: ./mvnw -B clean install -am -pl test/e2e/sql -Pit.env.docker -DskipTests -Dspotless.apply.skip=true
      - name: Verify CI
        run: ./mvnw -B install -pl test/e2e/sql -Dspotless.apply.skip=true
      - name: Save E2E image
        run: docker save -o /tmp/${{ env.REPOSITORY_NAME }}-proxy-test.tar apache/shardingsphere-proxy-test:latest
      - uses: actions/upload-artifact@v3
        with:
          name: e2e-image
          path: /tmp/${{ env.REPOSITORY_NAME }}-proxy-test.tar
          retention-days: 1

  e2e-empty-rule:
    name: empty rule
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-e2e-image
    strategy:
      matrix:
        adapter: [ proxy, jdbc ]
        database: [ MySQL, PostgreSQL, openGauss ]
        scenario: [ empty_rules, rdl_empty_rules, passthrough ]
        additional-options: [ '' ]
        include:
          - adapter: proxy
            database: MySQL
            scenario: passthrough
            additional-options: '-Dmysql-connector-java.version=8.0.30'
        exclude:
          - adapter: jdbc
            scenario: passthrough
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ env.REPOSITORY_NAME }}-maven-third-party-e2e-cache-${{ github.sha }}
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8
      - name: Download E2E image
        if: matrix.adapter == 'proxy'
        uses: actions/download-artifact@v3
        with:
          name: e2e-image
          path: /tmp/
      - name: Load E2E image
        if: matrix.adapter == 'proxy'
        run: docker load -i /tmp/${{ env.REPOSITORY_NAME }}-proxy-test.tar
      - name: Run E2E Test
        run: ./mvnw -nsu -B install -f test/e2e/sql/pom.xml -Dspotless.apply.skip=true -Dit.run.modes=Cluster -Dit.run.additional.cases=false -Dit.scenarios=${{ matrix.scenario }} -Dit.cluster.adapters=${{ matrix.adapter }} -Dit.cluster.databases=${{ matrix.database }} -Dit.cluster.env.type=DOCKER ${{ matrix.additional-options }}

  e2e-single-rule:
    name: single rule
    needs: e2e-empty-rule
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        adapter: [ proxy, jdbc ]
        mode: [ Standalone, Cluster ]
        database: [ MySQL, PostgreSQL, openGauss ]
        # Fix me #25051
        #scenario: [ db, tbl, encrypt, readwrite_splitting, shadow, mask ]
        scenario: [ tbl, encrypt, readwrite_splitting, shadow, mask ]
        exclude:
          - adapter: jdbc
            mode: Cluster
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ env.REPOSITORY_NAME }}-maven-third-party-e2e-cache-${{ github.sha }}
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8
      - name: Download E2E image
        if: matrix.adapter == 'proxy'
        uses: actions/download-artifact@v3
        with:
          name: e2e-image
          path: /tmp/
      - name: Load E2E image
        if: matrix.adapter == 'proxy'
        run: docker load -i /tmp/${{ env.REPOSITORY_NAME }}-proxy-test.tar
      - name: Run E2E Test
        run: ./mvnw -nsu -B install -f test/e2e/sql/pom.xml -Dspotless.apply.skip=true -Dit.cluster.env.type=DOCKER -Dit.cluster.adapters=${{ matrix.adapter }} -Dit.run.modes=${{ matrix.mode }} -Dit.run.additional.cases=false -Dit.cluster.databases=${{ matrix.database }} -Dit.scenarios=${{ matrix.scenario }}

  e2e-mixture-rule:
    name: mixture rule
    needs: e2e-single-rule
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        adapter: [ proxy, jdbc ]
        mode: [ Standalone, Cluster ]
        database: [ MySQL, PostgreSQL, openGauss ]
        # Fix me #25051
        #scenario: [ dbtbl_with_readwrite_splitting, dbtbl_with_readwrite_splitting_and_encrypt, sharding_and_encrypt, encrypt_and_readwrite_splitting, encrypt_shadow, readwrite_splitting_and_shadow, sharding_and_shadow, sharding_encrypt_shadow, mask_encrypt, mask_sharding, mask_encrypt_sharding ]
        scenario: [ dbtbl_with_readwrite_splitting_and_encrypt, sharding_and_encrypt, encrypt_and_readwrite_splitting, encrypt_shadow, readwrite_splitting_and_shadow, sharding_and_shadow, sharding_encrypt_shadow, mask_encrypt, mask_sharding, mask_encrypt_sharding ]
        exclude:
          - adapter: jdbc
            mode: Cluster
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ env.REPOSITORY_NAME }}-maven-third-party-e2e-cache-${{ github.sha }}
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8
      - name: Download E2E image
        if: matrix.adapter == 'proxy'
        uses: actions/download-artifact@v3
        with:
          name: e2e-image
          path: /tmp/
      - name: Load E2E image
        if: matrix.adapter == 'proxy'
        run: docker load -i /tmp/${{ env.REPOSITORY_NAME }}-proxy-test.tar
      - name: Run E2E Test
        run: ./mvnw -nsu -B install -f test/e2e/sql/pom.xml -Dspotless.apply.skip=true -Dit.cluster.env.type=DOCKER -Dit.cluster.adapters=${{ matrix.adapter }} -Dit.run.modes=${{ matrix.mode }} -Dit.run.additional.cases=false -Dit.cluster.databases=${{ matrix.database }} -Dit.scenarios=${{ matrix.scenario }}
