dataSources:
  db0_master: !!org.apache.commons.dbcp2.BasicDataSource
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:db0_master;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
    maxTotal: 100
  db1_master: !!org.apache.commons.dbcp2.BasicDataSource
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:db1_master;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
    maxTotal: 100
  db0_slave: !!org.apache.commons.dbcp2.BasicDataSource
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:db0_slave;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
    maxTotal: 100
  db1_slave: !!org.apache.commons.dbcp2.BasicDataSource
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:db1_slave;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
    username: sa
    password: 
    maxTotal: 100

shardingRule:
  tables:
    config:
      actualDataNodes: db_ms_${0..1}.t_config
    
    t_order: 
      actualDataNodes: db_ms_${0..1}.t_order_${0..1}
      databaseStrategy: 
        standard:
          shardingColumn: user_id
          preciseAlgorithmClassName: io.shardingsphere.shardingjdbc.orchestration.api.yaml.fixture.SingleAlgorithm
      tableStrategy: 
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_${order_id % 2}
      keyGeneratorColumnName: order_id
      keyGeneratorClassName: io.shardingsphere.shardingjdbc.orchestration.api.yaml.fixture.IncrementKeyGenerator
    
    t_order_item:
      actualDataNodes: db_ms_${0..1}.t_order_item_${0..1}
      databaseStrategy: 
        standard:
          shardingColumn: order_id
          preciseAlgorithmClassName: io.shardingsphere.shardingjdbc.orchestration.api.yaml.fixture.SingleAlgorithm
      tableStrategy: 
        inline:
          shardingColumn: id
          algorithmExpression: t_order_item_${id % 2}
  
  bindingTables:
    - t_order,t_order_item
  defaultDatabaseStrategy:
    none:
  defaultTableStrategy:
    complex:
      shardingColumns: id, order_id
      algorithmClassName: io.shardingsphere.shardingjdbc.orchestration.api.yaml.fixture.MultiAlgorithm
  
  masterSlaveRules:
    db_ms_0:
      masterDataSourceName: db0_master
      slaveDataSourceNames:
        - db0_slave
      loadBalanceAlgorithmType: RANDOM
    db_ms_1:
      masterDataSourceName: db1_master
      slaveDataSourceNames:
        - db1_slave
      loadBalanceAlgorithmType: ROUND_ROBIN

orchestration:
  name: demo_ds_ms
  overwrite: true
  registry:
    serverLists: localhost:3181
    namespace: orchestration-yaml-test
