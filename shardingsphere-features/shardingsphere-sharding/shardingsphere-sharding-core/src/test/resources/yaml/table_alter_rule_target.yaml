#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

parameter: |
  dataSources:
    ds_0:
      dataSourceClassName: org.apache.shardingsphere.test.mock.MockedDataSource
      jdbcUrl: jdbc:h2:mem:test_ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
    ds_1:
      dataSourceClassName: org.apache.shardingsphere.test.mock.MockedDataSource
      jdbcUrl: jdbc:h2:mem:test_ds_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
    ds_2:
      dataSourceClassName: org.apache.shardingsphere.test.mock.MockedDataSource
      jdbcUrl: jdbc:h2:mem:test_ds_2;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
    ds_3:
      dataSourceClassName: org.apache.shardingsphere.test.mock.MockedDataSource
      jdbcUrl: jdbc:h2:mem:test_ds_3;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
    ds_4:
      dataSourceClassName: org.apache.shardingsphere.test.mock.MockedDataSource
      jdbcUrl: jdbc:h2:mem:test_ds_4;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
  rules:
  - !SHARDING
    defaultDatabaseStrategy:
      standard:
        shardingAlgorithmName: database_inline
        shardingColumn: user_id
    defaultTableStrategy:
      none: ''
    keyGenerators:
      snowflake:
        type: SNOWFLAKE
      t_order_snowflake:
        type: snowflake
    scaling:
      default_scaling:
        completionDetector:
          props:
            incremental-task-idle-minute-threshold: 30
          type: IDLE
        dataConsistencyChecker:
          props:
            chunk-size: 1000
          type: DATA_MATCH
        input:
          batchSize: 1000
          workerThread: 40
        output:
          batchSize: 1000
          workerThread: 40
        streamChannel:
          props:
            block-queue-size: 10000
          type: MEMORY
    scalingName: default_scaling
    shardingAlgorithms:
      database_inline:
        props:
          algorithm-expression: ds_${user_id % 2}
        type: INLINE
      t_order_inline:
        props:
          algorithm-expression: t_order_${order_id % 2}
        type: INLINE
    tables:
      t_order:
        actualDataNodes: ds_${2..4}.t_order_${0..1}
        databaseStrategy:
          standard:
            shardingAlgorithmName: database_inline
            shardingColumn: user_id
        keyGenerateStrategy:
          column: order_id
          keyGeneratorName: t_order_snowflake
        logicTable: t_order
        tableStrategy:
          standard:
            shardingAlgorithmName: t_order_inline
            shardingColumn: order_id
  schemaName: sharding_db
type: ShardingSphereJDBC
