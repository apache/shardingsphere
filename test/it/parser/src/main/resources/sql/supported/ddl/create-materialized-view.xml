<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sql-cases>
    <sql-case id="create_materialized_view_with_if_not_exists" value="CREATE MATERIALIZED VIEW IF NOT EXISTS mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;" db-types="PostgreSQL" />
    <sql-case id="create_materialized_view" value="CREATE MATERIALIZED VIEW addr_nsp.genmatview AS SELECT * FROM addr_nsp.gentable;" db-types="PostgreSQL" />
    <sql-case id="create_materialized_view_with_using" value="CREATE MATERIALIZED VIEW mat_view_heap_psql USING heap_psql AS SELECT f1 from tbl_heap_psql;" db-types="PostgreSQL" />
    <sql-case id="create_materialized_view_with_no_data" value="CREATE MATERIALIZED VIEW matview_schema.mv_nodata1 (a) AS   SELECT generate_series(1, 10) WITH NO DATA;" db-types="PostgreSQL" />
    <sql-case id="create_materialized_view_with_data" value="CREATE MATERIALIZED VIEW matview_schema.mv_withdata1 (a) AS   SELECT generate_series(1, 10) WITH DATA;" db-types="PostgreSQL" />
    <sql-case id="create_materialized_view_with_refresh_fast" value="CREATE MATERIALIZED VIEW warranty_orders REFRESH FAST AS
    SELECT order_id, line_item_id, product_id FROM order_items WHERE EXISTS
    (SELECT * FROM inventories i WHERE o.product_id = i.product_id AND i.quantity_on_hand IS NOT NULL)
    UNION
    SELECT order_id, line_item_id, product_id FROM order_items WHERE quantity > 5;" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_refresh_fast_query_rewrite" value="CREATE MATERIALIZED VIEW SH.CUST_MV$SUB1
    REFRESH FAST WITH ROWID ON COMMIT ENABLE QUERY REWRITE
    AS SELECT SH.SALES.PROD_ID C1, SH.CUSTOMERS.CUST_ID C2,
    SUM(SH.SALES.AMOUNT_SOLD) M1, COUNT(SH.SALES.AMOUNT_SOLD) M2, COUNT(*) M3 FROM SH.SALES, SH.CUSTOMERS
    WHERE SH.CUSTOMERS.CUST_ID = SH.SALES.CUST_ID AND (SH.SALES.CUST_ID IN (1012, 1010, 1005))
    GROUP BY SH.SALES.PROD_ID, SH.CUSTOMERS.CUST_ID;" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_refresh_fast_disable_query_rewrite" value="CREATE MATERIALIZED VIEW SH.CUST_MV
    REFRESH FAST WITH ROWID
    DISABLE QUERY REWRITE AS
    SELECT SH.SALES.PROD_ID C1, SH.CUSTOMERS.CUST_ID C2,
    SUM(SH.SALES.AMOUNT_SOLD) M1,
    COUNT(SH.SALES.AMOUNT_SOLD) M2,
    COUNT(*) M3
    FROM SH.SALES, SH.CUSTOMERS
    WHERE SH.CUSTOMERS.CUST_ID = SH.SALES.CUST_ID
    GROUP BY SH.SALES.PROD_ID, SH.CUSTOMERS.CUST_ID;" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_tablespace_parallel_build_immediate" value="CREATE MATERIALIZED VIEW sales_by_month_by_state
     TABLESPACE example
     PARALLEL 4
     BUILD IMMEDIATE
     REFRESH COMPLETE
     ENABLE QUERY REWRITE
     AS SELECT t.calendar_month_desc, c.cust_state_province,
        SUM(s.amount_sold) AS sum_sales
        FROM times t, sales s, customers c
        WHERE s.time_id = t.time_id AND s.cust_id = c.cust_id
        GROUP BY t.calendar_month_desc, c.cust_state_province;" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_pctfree_storage_parallel" value="CREATE MATERIALIZED VIEW cust_sales_mv
    PCTFREE 0 TABLESPACE demo
    STORAGE (INITIAL 8M)
    PARALLEL
    BUILD IMMEDIATE
    REFRESH COMPLETE
    ENABLE QUERY REWRITE AS
    SELECT  c.cust_last_name, SUM(amount_sold) AS sum_amount_sold
    FROM customers c, sales s WHERE s.cust_id = c.cust_id
    GROUP BY c.cust_last_name;" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_refresh_fast_for_update" value="CREATE MATERIALIZED VIEW oe.categories_objmv OF oe.category_typ
    REFRESH FAST FOR UPDATE
    AS SELECT * FROM oe.categories_tab@orc1.example.com;" db-types="Oracle" />
    <sql-case id="create_materialized_view_for_update" value="CREATE MATERIALIZED VIEW foreign_customers FOR UPDATE
    AS SELECT * FROM sh.customers@remote cu
    WHERE EXISTS
      (SELECT * FROM sh.countries@remote co
       WHERE co.country_id = cu.country_id);" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_refresh_force" value="CREATE MATERIALIZED VIEW detail_sales_mv
    PARALLEL
    BUILD IMMEDIATE
    REFRESH FORCE AS
    SELECT s.rowid 'sales_rid', c.cust_id, c.cust_last_name, s.amount_sold,
       s.quantity_sold, s.time_id
    FROM sales s, times t, customers c
    WHERE s.cust_id = c.cust_id(+) AND s.time_id = t.time_id(+);" db-types="Oracle" />
    <sql-case id="create_materialized_view_with_refresh_fast_for_update_as_with_recursive" value="CREATE MATERIALIZED VIEW hr.employees REFRESH FAST FOR UPDATE AS
    SELECT * FROM hr.employees@orc1.example.com e
      WHERE EXISTS
        (SELECT * FROM hr.departments@orc1.example.com d
         WHERE e.department_id = d.department_id
         AND EXISTS
           (SELECT * FROM hr.locations@orc1.example.com l
            WHERE l.country_id = 'UK'
            AND d.location_id = l.location_id));" db-types="Oracle" />
</sql-cases>
