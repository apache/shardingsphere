<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sql-node-converter-test-cases>
    <test-cases sql-case-id="select_sum" expected-sql="SELECT SUM(`user_id`) AS `user_id_sum` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_sum" expected-sql="SELECT SUM(&quot;user_id&quot;) AS &quot;user_id_sum&quot; FROM &quot;t_order&quot;" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_sum_column" expected-sql="SELECT SUM(`t_order`.`user_id`) AS `user_id_sum` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_sum_column" expected-sql="SELECT SUM(&quot;t_order&quot;.&quot;user_id&quot;) AS &quot;user_id_sum&quot; FROM &quot;t_order&quot;" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_count" expected-sql="SELECT COUNT(*) AS `orders_count` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_count" expected-sql="SELECT COUNT(*) AS &quot;orders_count&quot; FROM &quot;t_order&quot;" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_count_with_sub" expected-sql="SELECT COUNT(*) AS `orders_count` FROM `t_order` WHERE `order_id` > 1 - 1" db-types="MySQL" />
    <test-cases sql-case-id="select_count_with_sub" expected-sql="SELECT COUNT(*) AS &quot;orders_count&quot; FROM &quot;t_order&quot; WHERE &quot;order_id&quot; > 1 - 1" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_count_with_sub_with_whitespace" expected-sql="SELECT COUNT(*) AS `orders_count` FROM `t_order` WHERE `order_id` > 1 - 1" db-types="MySQL" />
    <test-cases sql-case-id="select_count_with_sub_with_whitespace" expected-sql="SELECT COUNT(*) AS &quot;orders_count&quot; FROM &quot;t_order&quot; WHERE &quot;order_id&quot; > 1 - 1" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_max" expected-sql="SELECT MAX(`user_id`) AS `max_user_id` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_max" expected-sql="SELECT MAX(&quot;user_id&quot;) AS &quot;max_user_id&quot; FROM &quot;t_order&quot;" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_min" expected-sql="SELECT MIN(`user_id`) AS `min_user_id` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_min" expected-sql="SELECT MIN(&quot;user_id&quot;) AS &quot;min_user_id&quot; FROM &quot;t_order&quot;" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_avg" expected-sql="SELECT AVG(`user_id`) AS `user_id_avg` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_avg" expected-sql="SELECT AVG(&quot;user_id&quot;) AS &quot;user_id_avg&quot; FROM &quot;t_order&quot;" db-types="PostgreSQL,openGauss" />
    <test-cases sql-case-id="select_count_with_binding_tables_without_join" expected-sql="SELECT COUNT(*) AS `items_count` FROM `t_order` AS `o`, `t_order_item` AS `i` WHERE `o`.`user_id` = `i`.`user_id` AND `o`.`order_id` = `i`.`order_id` AND `o`.`user_id` IN (1, 2) AND `o`.`order_id` BETWEEN ASYMMETRIC 9 AND 10" db-types="MySQL" sql-case-types="LITERAL" />
    <test-cases sql-case-id="select_count_with_binding_tables_without_join" expected-sql="SELECT COUNT(*) AS `items_count` FROM `t_order` AS `o`, `t_order_item` AS `i` WHERE `o`.`user_id` = `i`.`user_id` AND `o`.`order_id` = `i`.`order_id` AND `o`.`user_id` IN (?, ?) AND `o`.`order_id` BETWEEN ASYMMETRIC ? AND ?" db-types="MySQL" sql-case-types="PLACEHOLDER" />
    <test-cases sql-case-id="select_count_with_binding_tables_without_join" expected-sql="SELECT COUNT(*) AS &quot;items_count&quot; FROM &quot;t_order&quot; AS &quot;o&quot;, &quot;t_order_item&quot; AS &quot;i&quot; WHERE &quot;o&quot;.&quot;user_id&quot; = &quot;i&quot;.&quot;user_id&quot; AND &quot;o&quot;.&quot;order_id&quot; = &quot;i&quot;.&quot;order_id&quot; AND &quot;o&quot;.&quot;user_id&quot; IN (1, 2) AND &quot;o&quot;.&quot;order_id&quot; BETWEEN ASYMMETRIC 9 AND 10" db-types="PostgreSQL,openGauss" sql-case-types="LITERAL" />
    <test-cases sql-case-id="select_count_with_binding_tables_without_join" expected-sql="SELECT COUNT(*) AS &quot;items_count&quot; FROM &quot;t_order&quot; AS &quot;o&quot;, &quot;t_order_item&quot; AS &quot;i&quot; WHERE &quot;o&quot;.&quot;user_id&quot; = &quot;i&quot;.&quot;user_id&quot; AND &quot;o&quot;.&quot;order_id&quot; = &quot;i&quot;.&quot;order_id&quot; AND &quot;o&quot;.&quot;user_id&quot; IN (?, ?) AND &quot;o&quot;.&quot;order_id&quot; BETWEEN ASYMMETRIC ? AND ?" db-types="PostgreSQL,openGauss" sql-case-types="PLACEHOLDER" />
    <test-cases sql-case-id="select_count_with_binding_tables_with_join" expected-sql="SELECT COUNT(*) AS `items_count` FROM `t_order` AS `o` INNER JOIN `t_order_item` AS `i` ON `o`.`user_id` = `i`.`user_id` AND `o`.`order_id` = `i`.`order_id` WHERE `o`.`user_id` IN (1, 2) AND `o`.`order_id` BETWEEN ASYMMETRIC 9 AND 10" db-types="MySQL" sql-case-types="LITERAL" />
    <test-cases sql-case-id="select_count_with_binding_tables_with_join" expected-sql="SELECT COUNT(*) AS `items_count` FROM `t_order` AS `o` INNER JOIN `t_order_item` AS `i` ON `o`.`user_id` = `i`.`user_id` AND `o`.`order_id` = `i`.`order_id` WHERE `o`.`user_id` IN (?, ?) AND `o`.`order_id` BETWEEN ASYMMETRIC ? AND ?" db-types="MySQL" sql-case-types="PLACEHOLDER" />
    <test-cases sql-case-id="select_count_with_binding_tables_with_join" expected-sql="SELECT COUNT(*) AS &quot;items_count&quot; FROM &quot;t_order&quot; AS &quot;o&quot; INNER JOIN &quot;t_order_item&quot; AS &quot;i&quot; ON &quot;o&quot;.&quot;user_id&quot; = &quot;i&quot;.&quot;user_id&quot; AND &quot;o&quot;.&quot;order_id&quot; = &quot;i&quot;.&quot;order_id&quot; WHERE &quot;o&quot;.&quot;user_id&quot; IN (1, 2) AND &quot;o&quot;.&quot;order_id&quot; BETWEEN ASYMMETRIC 9 AND 10" db-types="PostgreSQL,openGauss" sql-case-types="LITERAL" />
    <test-cases sql-case-id="select_count_with_binding_tables_with_join" expected-sql="SELECT COUNT(*) AS &quot;items_count&quot; FROM &quot;t_order&quot; AS &quot;o&quot; INNER JOIN &quot;t_order_item&quot; AS &quot;i&quot; ON &quot;o&quot;.&quot;user_id&quot; = &quot;i&quot;.&quot;user_id&quot; AND &quot;o&quot;.&quot;order_id&quot; = &quot;i&quot;.&quot;order_id&quot; WHERE &quot;o&quot;.&quot;user_id&quot; IN (?, ?) AND &quot;o&quot;.&quot;order_id&quot; BETWEEN ASYMMETRIC ? AND ?" db-types="PostgreSQL,openGauss" sql-case-types="PLACEHOLDER" />
    <test-cases sql-case-id="select_count_with_escape_character" expected-sql="SELECT COUNT(`order_id`) AS `orders_count` FROM `t_order`" db-types="MySQL" />
    <test-cases sql-case-id="select_count_with_in_clause" expected-sql="SELECT COUNT(*) FROM `t_order` WHERE `last_value` IN (1, 2)" db-types="MySQL" sql-case-types="LITERAL" />
    <test-cases sql-case-id="select_count_with_in_clause" expected-sql="SELECT COUNT(*) FROM `t_order` WHERE `last_value` IN (?, ?)" db-types="MySQL" sql-case-types="PLACEHOLDER" />
    <test-cases sql-case-id="select_count_with_not_in_clause" expected-sql="SELECT COUNT(*) FROM `t_order` WHERE `category` IN (1, 2) AND `last_value` NOT IN (7, 9)" db-types="MySQL" sql-case-types="LITERAL" />
    <test-cases sql-case-id="select_count_with_not_in_clause" expected-sql="SELECT COUNT(*) FROM `t_order` WHERE `category` IN (?, ?) AND `last_value` NOT IN (?, ?)" db-types="MySQL" sql-case-types="PLACEHOLDER" />
    <test-cases sql-case-id="select_bit_xor" expected-sql="SELECT BIT_XOR(`user_id`) FROM `t_order`" db-types="MySQL" />
</sql-node-converter-test-cases>
