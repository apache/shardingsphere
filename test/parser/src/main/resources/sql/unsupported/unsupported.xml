<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sql-cases>
    <sql-case id="assert_select_into_SQL" value="SELECT * INTO t_order_new FROM t_order" db-types="Oracle"/>
    <sql-case id="assert_select_with_json_extract_sign_with_parameter_marker" value="SELECT * FROM t_order WHERE order_id -&gt; ?" db-types="MySQL"/>
    <sql-case id="assert_select_with_json_unquote_extract_sign_with_parameter_marker" value="SELECT * FROM t_order WHERE order_id -&gt;&gt; ?" db-types="MySQL"/>
    <sql-case id="assert_insert_with_first" value="INSERT FIRST INTO TABLE_XXX (field1) VALUES (field1) SELECT field1 FROM TABLE_XXX2" db-types="Oracle"/>
    <sql-case id="assert_dist_SQL_show_rule_parse_conflict" value="SHOW REPLICA_QUERY RULE FROM schema_name"/>
    <sql-case id="select_with_comment1" value="select 2 as expected, /*!01000/**/*/ 2 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment2" value="select 1 as expected, /*!99998/**/*/ 1 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment5" value="select 7 as expected, /*!01000 1 + /* 8 + */ 2 + */ 4 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment6" value="select 7 as expected, /*!01000 1 + /*!99998 8 + */ 2 + */ 4 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment7" value="select 4 as expected, /*!99998 1 + /*!99998 8 + */ 2 + */ 4 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment8" value="select 4 as expected, /*!99998 1 + /*!01000 8 + */ 2 + */ 4 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment9" value="select 7 as expected, /*!01000 1 + /*!01000 8 + /*!01000 error */ 16 + */ 2 + */ 4 as result;" db-types="MySQL"/>
    <sql-case id="select_with_comment10" value="select 4 as expected, /* 1 + /*!01000 8 + */ 2 + */ 4;" db-types="MySQL"/>
    <sql-case id="with_select" value="WITH cte AS (SELECT 0 /*! ) */ SELECT * FROM cte a, cte b;" db-types="MySQL"/>
    <sql-case id="with_select_comment" value="WITH cte AS /*! ( */ SELECT 0) SELECT * FROM cte a, cte b;" db-types="MySQL"/>
    <sql-case id="select_cast" value="SELECT cast( NULL AT TIME ZONE 'UTC' AS DATETIME );" db-types="MySQL"/>
    <sql-case id="create_table_as_select" value="create table agg_data_2k as select g from generate_series(0, 1999) g;" db-types="PostgreSQL"/>
    <sql-case id="create_statistics" value="CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1" db-types="PostgreSQL"/>
    <sql-case id="create_as_select" value="create table attest1 as select * from atacc1" db-types="PostgreSQL"/>
    <sql-case id="create_temp_table" value="create temp table old_oids as select relname, oid as oldoid, relfilenode as oldfilenode from pg_class where relname like 'at_partitioned%'" db-types="PostgreSQL"/>
    <sql-case id="select_case_when" value="select relname,c.oid = oldoid as orig_oid,case relfilenode when 0 then 'none' when c.oid then 'own' when oldfilenode then 'orig' else 'OTHER' end as storage, obj_description(c.oid, 'pg_class') as desc from pg_class c left join old_oids using (relname) where relname like 'at_partitioned%' order by relname" db-types="PostgreSQL"/>
    <sql-case id="select_like" value="select conname, obj_description(oid, 'pg_constraint') as desc from pg_constraint where conname like 'at_partitioned%' order by conname" db-types="PostgreSQL"/>
    <sql-case id="select_keyword" value="select relname,c.oid = oldoid as orig_oid,case relfilenode when 0 then 'none' when c.oid then 'own' when oldfilenode then 'orig' else 'OTHER' end as storage, obj_description(c.oid, 'pg_class') as desc from pg_class c left join old_oids using (relname) where relname like 'at_partitioned%' order by relname" db-types="PostgreSQL"/>
    <sql-case id="create_by_mysql_source_test_case1" value="CREATE  VIEW v1 AS SELECT GROUPING(`߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789`.a), GROUPING(`߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789`.a), GROUPING(`߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789`.a) FROM t1 AS `߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789` GROUP BY a WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case4" value="CREATE DEFINER=CURRENT_USER() FUNCTION should_not_parse RETURNS STRING SONAME &quot;should_not_parse.so&quot;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case5" value="CREATE DEFINER=baz@localhost PROCEDURE my_db.baz_proc() BEGIN set ROLE all; INSERT into my_db.t1 values(4) on duplicate key UPDATE id = values(id) + 400; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case7" value="CREATE DEFINER=event_u2@192.1.1.140 EVENT e4 ON SCHEDULE AT '2037-01-01 00:00:00' DISABLE DO SET @a = 5" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case9" value="CREATE DEFINER=root@localhost PROCEDURE p1() BEGIN UPDATE t1, t2 SET a = 1 WHERE regexp_like(t1.subject, t2.pattern); END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case10" value="CREATE DEFINER=someone@somewhere FUNCTION should_not_parse RETURNS STRING SONAME &quot;should_not_parse.so&quot;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case12" value="CREATE DEFINER=trig_u2@xyz.com TRIGGER trig4 BEFORE INSERT ON t1 FOR EACH ROW SET @sum = 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case14" value="CREATE DEFINER=view_u2@my.oracle.com VIEW v4 AS SELECT * FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case16" value="CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case18" value="CREATE EVENT e2 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case20" value="CREATE FUNCTION BUG_12490() RETURNS INT HELP CONTENTS" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case21" value="CREATE FUNCTION MY_KILL(tid INT) RETURNS INT BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END; KILL tid; RETURN (SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE ID = tid); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case22" value="CREATE FUNCTION bug12953() RETURNS INT BEGIN OPTIMIZE TABLE t1; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case23" value="CREATE FUNCTION bug12995() RETURNS INT BEGIN HANDLER t1 CLOSE; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case24" value="CREATE FUNCTION bug12995() RETURNS INT BEGIN HANDLER t1 OPEN; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case25" value="CREATE FUNCTION bug12995() RETURNS INT BEGIN HANDLER t1 READ FIRST; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case26" value="CREATE FUNCTION bug13012() RETURNS INT BEGIN REPAIR TABLE t1; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case29" value="CREATE FUNCTION bug21975() returns int BEGIN grant select on t1 to 'mysqltest_1'; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case30" value="CREATE FUNCTION bug21975() returns int BEGIN revoke all privileges on *.* from 'mysqltest_1'; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case31" value="CREATE FUNCTION bug21975() returns int BEGIN revoke select on t1 from 'mysqltest_1'; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case33" value="CREATE FUNCTION bug_13627_f() returns int BEGIN DROP TRIGGER test1; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case34" value="CREATE FUNCTION bug_13627_f() returns int BEGIN LOCK TABLE t1 READ; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case35" value="CREATE FUNCTION bug_13627_f() returns int BEGIN alter view v1 as select 1; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case36" value="CREATE FUNCTION bug_13627_f() returns int BEGIN create database mysqltest; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case37" value="CREATE FUNCTION bug_13627_f() returns int BEGIN create function f2 () returns int return 1; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case38" value="CREATE FUNCTION bug_13627_f() returns int BEGIN create index t1_i on t1 (a); return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case39" value="CREATE FUNCTION bug_13627_f() returns int BEGIN create trigger tr2 before insert on t1 for each row do select 1; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case40" value="CREATE FUNCTION bug_13627_f() returns int BEGIN create user 'mysqltest_1'; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case42" value="CREATE FUNCTION bug_13627_f() returns int BEGIN drop database mysqltest; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case43" value="CREATE FUNCTION bug_13627_f() returns int BEGIN drop function bug_13627_f; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case44" value="CREATE FUNCTION bug_13627_f() returns int BEGIN drop index t1_i on t1; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case45" value="CREATE FUNCTION bug_13627_f() returns int BEGIN drop user 'mysqltest_1'; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case46" value="CREATE FUNCTION bug_13627_f() returns int BEGIN drop view v1; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case47" value="CREATE FUNCTION bug_13627_f() returns int BEGIN rename table t1 to t2; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case48" value="CREATE FUNCTION bug_13627_f() returns int BEGIN rename user 'mysqltest_2' to 'mysqltest_1'; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case49" value="CREATE FUNCTION bug_13627_f() returns int BEGIN unlock tables; return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case52" value="CREATE FUNCTION f(f1 VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_unicode_ci) RETURNS VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_danish_ci BEGIN DECLARE f2 VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_swedish_ci; DECLARE f3 VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_bin; SET f1= concat(collation(f1), ' ', collation(f2), ' ', collation(f3)); RETURN f1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case53" value="CREATE FUNCTION f(f1 VARCHAR(64) CHARACTER SET ucs2) RETURNS VARCHAR(64) CHARACTER SET ucs2 BEGIN DECLARE f2 VARCHAR(64) COLLATE ucs2_unicode_ci; RETURN 'str'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case54" value="CREATE FUNCTION f(f1 VARCHAR(64) CHARACTER SET ucs2) RETURNS VARCHAR(64) COLLATE ucs2_unicode_ci BEGIN RETURN 'str'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case55" value="CREATE FUNCTION f(f1 VARCHAR(64) COLLATE ucs2_unicode_ci) RETURNS VARCHAR(64) CHARACTER SET ucs2 BEGIN RETURN 'str'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case56" value="CREATE FUNCTION f1() RETURNS INT BEGIN CREATE TEMPORARY TABLE t2 (c1 INT); ALTER TEMPORARY TABLE tm1 UNION=(t1,t2); INSERT INTO t2 (c1) VALUES (2); RETURN (SELECT MAX(c1) FROM tm1); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case57" value="CREATE FUNCTION f1() RETURNS INT BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION               # handler 1 BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION             # handler 2 BEGIN INSERT INTO t1 VALUE('WRONG: Inside H2'); RETURN 2; END; INSERT INTO t1 VALUE('CORRECT: Inside H1'); RETURN 1; END; BEGIN DECLARE CONTINUE HANDLER FOR SQLWARNING               # handler 3 BEGIN INSERT INTO t1 VALUE('WRONG: Inside H3'); RETURN 3; END; INSERT INTO t1 VALUE('CORRECT: Calling f1()'); RETURN f1(); # -- exception here END; INSERT INTO t1 VALUE('WRONG: Returning 10'); RETURN 10; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case58" value="CREATE FUNCTION f1() RETURNS INT BEGIN SET PASSWORD FOR u1@h = '12345'; RETURN 0; END;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case59" value="CREATE FUNCTION f1() RETURNS INT BEGIN SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case60" value="CREATE FUNCTION f1() RETURNS INT BEGIN SET SESSION TRANSACTION READ ONLY; RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case61" value="CREATE FUNCTION f1() RETURNS INTEGER BEGIN CALL db1.p1(); RETURN 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case80" value="CREATE FUNCTION f4_show_warnings() RETURNS TEXT BEGIN SHOW WARNINGS; RETURN &quot;yeah, not so much&quot;; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case81" value="CREATE FUNCTION fn(a int) RETURNS int DETERMINISTIC BEGIN RETURN a; END |" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case92" value="CREATE FUNCTION service_release_locks   RETURNS INT SONAME &quot;$LOCKING_SERVICE&quot;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case98" value="CREATE FUNCTION test_func1 (s char(20) RETURNS CHAR(50) RETURN CONCAT('Hello', ,s,'!')" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case99" value="CREATE FUNCTION test_func1 (s char(20) RETURNS CHAR(50) RETURN CONCAT('Hello', ,s,'!')" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case105" value="CREATE IF NOT EXISTS PROCEDURE bug14702() BEGIN END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case106" value="CREATE PROCEDURE BUG_12490() HELP CONTENTS" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case107" value="CREATE PROCEDURE IF NOT EXISTS bug14702() BEGIN END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case114" value="CREATE PROCEDURE bug11758414() BEGIN SET @@GLOBAL.default_storage_engine=&quot;MyISAM&quot;; SET @@SESSION.default_storage_engine=&quot;MyISAM&quot;; SHOW GLOBAL VARIABLES LIKE 'default_storage_engine'; SHOW SESSION VARIABLES LIKE 'default_storage_engine'; CREATE TABLE t1 (id int); CREATE TABLE t2 (id int) ENGINE=InnoDB; SHOW CREATE TABLE t1; SHOW CREATE TABLE t2; END;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case115" value="CREATE PROCEDURE bug13012_1() REPAIR TABLE t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case116" value="CREATE PROCEDURE bug13095(tbl_name varchar(32)) BEGIN SET @str = CONCAT(&quot;CREATE TABLE &quot;, tbl_name, &quot;(stuff char(15))&quot;); SELECT @str; PREPARE stmt FROM @str; EXECUTE stmt; SET @str = CONCAT(&quot;INSERT INTO &quot;, tbl_name, &quot; VALUES('row1'),('row2'),('row3')&quot; ); SELECT @str; PREPARE stmt FROM @str; EXECUTE stmt; SET @str = CONCAT(&quot;CREATE VIEW bug13095_v1(c1) AS SELECT stuff FROM &quot;, tbl_name); SELECT @str; PREPARE stmt FROM @str; EXECUTE stmt; SELECT * FROM bug13095_v1; SET @str = &quot;DROP VIEW bug13095_v1&quot;; SELECT @str; PREPARE stmt FROM @str; EXECUTE stmt; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case120" value="CREATE PROCEDURE bug15231_4() BEGIN DECLARE x DECIMAL(2,1); SET x = 'zap'; SHOW WARNINGS; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case131" value="CREATE PROCEDURE bug22580_proc_1() BEGIN CALL bug22580_proc_2(); END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case132" value="CREATE PROCEDURE bug22580_proc_2() BEGIN DROP TABLE IF EXISTS bug22580_tmp; CREATE TEMPORARY TABLE bug22580_tmp (a INT); DROP TABLE bug22580_tmp; END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case133" value="CREATE PROCEDURE bug24117() BEGIN DECLARE t3c1 ENUM('abc'); DECLARE mycursor CURSOR FOR SELECT c1 FROM t3; OPEN mycursor; FLUSH TABLES; FETCH mycursor INTO t3c1; CLOSE mycursor; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case139" value="CREATE PROCEDURE cr(IN start BIGINT) BEGIN SET @idx =start; WHILE (@idx &gt; 0) DO CREATE TABLESPACE x; DROP TABLESPACE x; SET @idx = @idx - 1; END WHILE; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case144" value="CREATE PROCEDURE ddse_access() DROP TABLE mysql.innodb_index_stats(i INTEGER)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case147" value="CREATE PROCEDURE mysqltest1.p1() DROP DATABASE mysqltest2" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case149" value="CREATE PROCEDURE p() BEGIN DECLARE val INTEGER; SET val = 2; EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 &gt; val; SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 &gt; val; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case150" value="CREATE PROCEDURE p() BEGIN of: LOOP LEAVE of; END LOOP of; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case151" value="CREATE PROCEDURE p1 ( ) BEGIN DO (SELECT  @next := IFNULL(max(bug_table_seq),0) + 1 FROM v1); INSERT INTO t1 VALUES (1); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case155" value="CREATE PROCEDURE p1 () DROP TRIGGER tr1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case156" value="CREATE PROCEDURE p1 () DROP TRIGGER tr1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case158" value="CREATE PROCEDURE p1() BEGIN DECLARE CONTINUE HANDLER FOR 1051 BEGIN DROP DATABASE none;  # Error 1008 END; DROP TABLE none;  # Error 1051 END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case159" value="CREATE PROCEDURE p1() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H2' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should be handled by H2. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case160" value="CREATE PROCEDURE p1() BEGIN DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN GET CURRENT DIAGNOSTICS CONDITION 1 @msg1 = MESSAGE_TEXT, @errno1 = MYSQL_ERRNO; GET STACKED DIAGNOSTICS CONDITION 1 @msg2 = MESSAGE_TEXT, @errno2 = MYSQL_ERRNO; SELECT @msg1, @errno1; SELECT @msg2, @errno2; SELECT * FROM t1;   # Clear first diagnostics area GET CURRENT DIAGNOSTICS @cno = NUMBER; SELECT @cno; GET STACKED DIAGNOSTICS CONDITION 1 @msg4 = MESSAGE_TEXT, @errno4 = MYSQL_ERRNO; SELECT @msg4, @errno4; END; DROP TABLE non_existent; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case162" value="CREATE PROCEDURE p1() BEGIN DECLARE a DATETIME(6); CREATE TABLE t1 AS SELECT a; SHOW CREATE TABLE t1; DROP TABLE t1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case163" value="CREATE PROCEDURE p1() BEGIN DECLARE a TIME(6); CREATE TABLE t1 AS SELECT a; SHOW CREATE TABLE t1; DROP TABLE t1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case164" value="CREATE PROCEDURE p1() BEGIN DECLARE a TIMESTAMP(6); CREATE TABLE t1 AS SELECT a; SHOW CREATE TABLE t1; DROP TABLE t1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case165" value="CREATE PROCEDURE p1() BEGIN DECLARE c CURSOR FOR SELECT a FROM t1; OPEN c; BEGIN DECLARE v INT; DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN GET DIAGNOSTICS @n = NUMBER; GET DIAGNOSTICS CONDITION @n @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT; SELECT &quot;Warning found!&quot;; SELECT @err_no, @err_txt; END; DECLARE EXIT HANDLER FOR NOT FOUND BEGIN GET DIAGNOSTICS @n = NUMBER; GET DIAGNOSTICS CONDITION @n @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT; SELECT &quot;End of Result Set found!&quot;; SELECT @err_no, @err_txt; END; WHILE TRUE DO FETCH c INTO v; END WHILE; END; CLOSE c; SELECT a INTO @foo FROM t1 LIMIT 1; # Clear warning stack END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case166" value="CREATE PROCEDURE p1() BEGIN DECLARE c CURSOR FOR SELECT a FROM t1; OPEN c; BEGIN DECLARE v1 INT; DECLARE v2 INT; DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT &quot;Error caught (expected)&quot;; DECLARE EXIT HANDLER FOR NOT FOUND SELECT &quot;End of Result Set found!&quot;; WHILE TRUE DO FETCH c INTO v1, v2; END WHILE; END; CLOSE c; SELECT a INTO @foo FROM t1 LIMIT 1; # Clear warning stack END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case167" value="CREATE PROCEDURE p1() BEGIN DECLARE c INT DEFAULT 0; DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN SET c = c + 1; SELECT 'Warning caught!' AS Msg; END; CALL p2(); # 1 warning CALL p3(); # 1 warning CALL p4(); # No warnings CALL p5(); # 1 warning SELECT c; SELECT @@warning_count; SHOW WARNINGS; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case168" value="CREATE PROCEDURE p1() BEGIN DECLARE c char(100)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case178" value="CREATE PROCEDURE p1() BEGIN DECLARE get INT DEFAULT 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case182" value="CREATE PROCEDURE p1() BEGIN DECLARE sp_var INTEGER; SELECT col INTO sp_var FROM t1 LIMIT 1; SHOW WARNINGS; SET @user_var = sp_var; SELECT sp_var; SELECT @user_var; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case191" value="CREATE PROCEDURE p1() BEGIN DECLARE v1 BIT; DECLARE v2 BIT(1); DECLARE v3 BIT(3) DEFAULT b'101'; DECLARE v4 BIT(64) DEFAULT 0x5555555555555555; DECLARE v5 BIT(3); DECLARE v6 BIT(64); DECLARE v7 BIT(8) DEFAULT 128; DECLARE v8 BIT(8) DEFAULT '128'; DECLARE v9 BIT(8) DEFAULT ' 128'; DECLARE v10 BIT(8) DEFAULT 'x 128'; SET v1 = v4; SET v2 = 0; SET v5 = v4; # check overflow SHOW WARNINGS; SET v6 = v3; # check padding SELECT HEX(v1); SELECT HEX(v2); SELECT HEX(v3); SELECT HEX(v4); SELECT HEX(v5); SELECT HEX(v6); SELECT HEX(v7); SELECT HEX(v8); SELECT HEX(v9); SELECT HEX(v10); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case196" value="CREATE PROCEDURE p1() BEGIN DECLARE var CONDITION FOR SQLSTATE '12345'; GET DIAGNOSTICS CONDITION 1 var = NUMBER; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case199" value="CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS CONDITION 1 var = INVALID; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case200" value="CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS CONDITION 1 var; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case201" value="CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS var = INVALID; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case204" value="CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS var; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case208" value="CREATE PROCEDURE p1() BEGIN DROP VIEW v1; CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b, 3 AS c; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case209" value="CREATE PROCEDURE p1() BEGIN DROP VIEW v1; CREATE VIEW v1 AS SELECT 2 AS b, 3 AS c; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case210" value="CREATE PROCEDURE p1() BEGIN GET DIAGNOSTICS CONDITION 1 var; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case211" value="CREATE PROCEDURE p1() BEGIN GET DIAGNOSTICS var; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case212" value="CREATE PROCEDURE p1() BEGIN SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2'; START TRANSACTION; COMMIT; SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3'; START TRANSACTION; COMMIT; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case213" value="CREATE PROCEDURE p1() BEGIN SHOW CREATE PROCEDURE p1; SELECT get_lock(&quot;test&quot;, 100000); SHOW CREATE PROCEDURE p1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case214" value="CREATE PROCEDURE p1() BEGIN skip: LOOP LEAVE skip; END LOOP skip; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case215" value="CREATE PROCEDURE p1() CREATE INDEX idx ON t1 (c1)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case218" value="CREATE PROCEDURE p1() RENAME TABLE t2 TO t3" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case220" value="CREATE PROCEDURE p1() SET PASSWORD FOR u1@h = '12345'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case222" value="CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY, ISOLATION LEVEL SERIALIZABLE" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case223" value="CREATE PROCEDURE p1() SHOW ENGINE INNODB STATUS;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case224" value="CREATE PROCEDURE p1(IN a FLOAT UNSIGNED, OUT b DOUBLE UNSIGNED) BEGIN SELECT 1 INTO b; END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case225" value="CREATE PROCEDURE p1(IN a FLOAT(255,0), OUT b DOUBLE(12,3)) BEGIN SELECT 1 INTO b; END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case228" value="CREATE PROCEDURE p1(IN val BLOB) BEGIN SET @tval = val; SET @sql_cmd = CONCAT_WS(' ', 'insert into t1(f1) values(?)'); PREPARE stmt FROM @sql_cmd; EXECUTE stmt USING @tval; DEALLOCATE PREPARE stmt; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case232" value="CREATE PROCEDURE p1(n INT) DO NTILE(n) OVER()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case233" value="CREATE PROCEDURE p1(x DATETIME) BEGIN CREATE TABLE t1 SELECT x; SHOW CREATE TABLE t1; DROP TABLE t1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case234" value="CREATE PROCEDURE p10() BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H2' AS HandlerId; BEGIN BEGIN BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H1:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H1:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H2:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H2:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H3:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H3:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H4:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H4:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H5:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H5:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H6:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H6:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'H2' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should be handled by H1. END; SELECT 'S6' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S5' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S4' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S3' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S2' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S1' AS SignalId; SIGNAL SQLSTATE 'HY000'; # Should be handled by H2. END; END; END; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case235" value="CREATE PROCEDURE p10_ps_with_warning () BEGIN DECLARE CONTINUE HANDLER FOR 1050 SELECT &quot;a warn place&quot;; EXECUTE stmt1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case236" value="CREATE PROCEDURE p11() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H2' AS HandlerId; BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000', 1249 BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H3' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H4' AS HandlerId; BEGIN SELECT 'H5' AS HandlerId; SELECT 'S3' AS SignalId; SIGNAL SQLSTATE 'HY000'; # H3 SELECT 'S4' AS SignalId; SIGNAL SQLSTATE '22003'; # H3 SELECT 'S5' AS SignalId; SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1249; # H4 END; END; SELECT 'S6' AS SignalId; SIGNAL SQLSTATE 'HY000'; # H1 SELECT 'S7' AS SignalId; SIGNAL SQLSTATE '22003'; # H1 SELECT 'S8' AS SignalId; SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1249; # H5 END; SELECT 'S1' AS SignalId; SIGNAL SQLSTATE 'HY000'; # H1 SELECT 'S2' AS SignalId; SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1249; # H2 END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case238" value="CREATE PROCEDURE p2() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H2' AS HandlerId; BEGIN SELECT 'B1' AS BlockId; BEGIN SELECT 'B2' AS BlockId; BEGIN SELECT 'B3' AS BlockId; SIGNAL SQLSTATE '01000'; # Should be handled by H2. END; END; END; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case239" value="CREATE PROCEDURE p2() BEGIN DECLARE EXIT HANDLER FOR SQLSTATE '23000' # (ER_DUP_ENTRY) BEGIN SELECT 'Duplication handled!'; END; CALL p1(); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case245" value="CREATE PROCEDURE p2() BEGIN SELECT CAST('2x' as unsigned integer); END| # 1 warning is passed to the caller CREATE PROCEDURE p3() BEGIN SELECT CAST('3x' as unsigned integer); GET DIAGNOSTICS @n = NUMBER; # does not clear the warning END| # 1 warning is passed to the caller CREATE PROCEDURE p4() BEGIN SELECT CAST('4x' as unsigned integer); INSERT INTO t1 VALUES(1); # Clears the warning END| # No warnings to pass CREATE PROCEDURE p5() BEGIN SELECT CAST('5x' as unsigned integer); CALL p2(); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case246" value="CREATE PROCEDURE p2(arg ENUM('a', 'b')) BEGIN DECLARE var ENUM('c', 'd') DEFAULT arg; SHOW WARNINGS; SELECT arg, var; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case247" value="CREATE PROCEDURE p2(n INT) DO LEAD(1, n) OVER()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case249" value="CREATE PROCEDURE p3() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'SQLEXCEPTION caught' AS msg; CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b; END; SELECT * FROM v1; SELECT * FROM v1; DROP VIEW v1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case250" value="CREATE PROCEDURE p3() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'H3' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should be handled by H3. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case252" value="CREATE PROCEDURE p3(n INT) DO LAG(1, n) OVER()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case253" value="CREATE PROCEDURE p4() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'H2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H3' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should be handled by H2. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case255" value="CREATE PROCEDURE p5() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'H2' AS HandlerId; BEGIN DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H3' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should be handled by H3. END; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case256" value="CREATE PROCEDURE p5() BEGIN DECLARE EXIT HANDLER FOR 1292 BEGIN SELECT 'Handler for 1292' AS Msg; SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1234; SHOW WARNINGS; END; INSERT INTO t2 SELECT CAST(999999 AS SIGNED INTEGER), CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER), CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case259" value="CREATE PROCEDURE p6() BEGIN DECLARE CONTINUE HANDLER FOR 1292 BEGIN SHOW WARNINGS; SELECT 'Handler for 1292' Msg; END; INSERT INTO t2 SELECT CAST(CONCAT(CAST('1X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER), CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER), CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case260" value="CREATE PROCEDURE p6() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'H1' AS HandlerId; SIGNAL SQLSTATE 'HY000'; # Should *not* be handled by H1. END; SELECT 'S1' AS SignalId; SIGNAL SQLSTATE 'HY000'; # Should be handled by H1. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case261" value="CREATE PROCEDURE p6() BEGIN SELECT CAST('6x' as unsigned integer); SHOW WARNINGS; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case263" value="CREATE PROCEDURE p7() BEGIN DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN SELECT 'H1' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should *not* be handled by H1. END; SELECT 'S1' AS SignalId; SIGNAL SQLSTATE '01000'; # Should be handled by H1. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case265" value="CREATE PROCEDURE p7_show_warnings () BEGIN SHOW VARIABLES LIKE 'foo'; SHOW WARNINGS; SELECT &quot;(SHOW WARNINGS does not have to come last)&quot;; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case266" value="CREATE PROCEDURE p8() BEGIN DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'H1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'H2' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should *not* be handled by H1. END; SELECT 'S1' AS SignalId; SIGNAL SQLSTATE 'HY000'; # Should be handled by H2. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case267" value="CREATE PROCEDURE p8b_show_warnings () BEGIN SHOW WARNINGS; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case268" value="CREATE PROCEDURE p9() BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H1:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H1:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H2:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H2:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H3:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H3:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H4:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H4:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H5:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H5:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT 'Wrong:H6:1' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'Wrong:H6:2' AS HandlerId; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'H2' AS HandlerId; SIGNAL SQLSTATE '01000'; # Should *not* be handled by H1. END; SELECT 'S6' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S5' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S4' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S3' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S2' AS SignalId; SIGNAL SQLSTATE 'HY000'; END; SELECT 'S1' AS SignalId; SIGNAL SQLSTATE 'HY000'; # Should be handled by H2. END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case269" value="CREATE PROCEDURE p_install() BEGIN INSTALL PLUGIN no_such_plugin SONAME 'no_such_object'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case271" value="CREATE PROCEDURE peter1 () BEGIN DECLARE v INTEGER DEFAULT 1234; DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN SHOW WARNINGS; SELECT &quot;handler done: &quot;,v; END; CREATE TABLE gg (smallint_column SMALLINT); CALL peter2(v); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case274" value="CREATE PROCEDURE peter_p1 () BEGIN DECLARE x CONDITION FOR SQLSTATE '42000'; DECLARE EXIT HANDLER FOR x BEGIN SHOW WARNINGS; RESIGNAL x SET MYSQL_ERRNO = 9999; END; BEGIN DECLARE EXIT HANDLER FOR x BEGIN SHOW WARNINGS; RESIGNAL x SET SCHEMA_NAME = 'test', MYSQL_ERRNO= 1232; END; /* Raises ER_WRONG_VALUE_FOR_VAR : 1231, SQLSTATE 42000 */ SET @@sql_mode=NULL; END; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case275" value="CREATE PROCEDURE peter_p2 () BEGIN DECLARE x CONDITION for SQLSTATE '42000'; DECLARE EXIT HANDLER FOR x BEGIN SHOW WARNINGS; RESIGNAL x SET MESSAGE_TEXT = 'Hi, I am a useless error message', MYSQL_ERRNO = 9999; END; CALL peter_p1(); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case277" value="CREATE PROCEDURE proc1() BEGIN CREATE TABLE t1 (f1 INT) START TRANSACTION; ROLLBACK; CREATE TABLE t1 (f1 INT) START TRANSACTION; COMMIT; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case280" value="CREATE PROCEDURE proc6369() EXPLAIN FOR CONNECTION 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case281" value="CREATE PROCEDURE proc_12976_a() BEGIN declare localvar bit(1); SELECT val INTO localvar FROM table_12976_a; SELECT coalesce(localvar, 1)+1, coalesce(val, 1)+1 FROM table_12976_a; END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case282" value="CREATE PROCEDURE proc_12976_b( name varchar(15), out ep bit, out msg varchar(10)) BEGIN SELECT emailperm into ep FROM table_12976_b where (appname = name); IF ep is true THEN SET msg = 'True'; ELSE SET msg = 'False'; END IF; END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case305" value="CREATE PROCEDURE sp_insert_partition(p CHAR(16), a INT, b CHAR(16)) BEGIN SET @str = CONCAT(&quot;INSERT INTO test.t1 PARTITION(&quot;, p, &quot;) VALUES (?, ?)&quot;); SET @x = a, @y = b; PREPARE stmt FROM @str; EXECUTE stmt USING @x, @y; DEALLOCATE PREPARE stmt; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case306" value="CREATE PROCEDURE sp_select_partition(p CHAR(16)) BEGIN SET @str = CONCAT(&quot;SELECT * FROM test.t1 PARTITION(&quot;, p, &quot;)&quot;); PREPARE stmt FROM @str; EXECUTE stmt; DEALLOCATE PREPARE stmt; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case308" value="CREATE PROCEDURE sub1(id CHAR(10) CHARACTER SET utf8) BEGIN SELECT * FROM view1 WHERE table_name=id COLLATE utf8_tolower_ci; EXPLAIN SELECT * FROM view1 WHERE table_name=id COLLATE utf8_tolower_ci; SELECT * FROM view2 WHERE table_name=id; EXPLAIN SELECT * FROM view2 WHERE table_name=id; SELECT * FROM dd_table WHERE name COLLATE utf8_tolower_ci = id; EXPLAIN SELECT * FROM dd_table WHERE name COLLATE utf8_tolower_ci = id; SELECT * FROM view1 WHERE id COLLATE utf8_tolower_ci=table_name; EXPLAIN SELECT * FROM view1 WHERE id COLLATE utf8_tolower_ci=table_name; SELECT * FROM view2 WHERE id=table_name; EXPLAIN SELECT * FROM view2 WHERE id=table_name; SELECT * FROM dd_table WHERE id = name COLLATE utf8_tolower_ci; EXPLAIN SELECT * FROM dd_table WHERE id = name COLLATE utf8_tolower_ci; SELECT * FROM view1 WHERE table_name COLLATE utf8_tolower_ci = id; EXPLAIN SELECT * FROM view1 WHERE table_name COLLATE utf8_tolower_ci = id; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case309" value="CREATE PROCEDURE t_cache() BEGIN SET @A= 20; SELECT * FROM t1; SELECT * FROM t1; PREPARE x FROM 'SELECT 1'; SELECT * FROM t1; SELECT * FROM t1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case310" value="CREATE PROCEDURE t_cache() BEGIN SET @A= 20; SELECT * FROM t1; SELECT * FROM t1; PREPARE x FROM 'SELECT 1'; SELECT * FROM t1; SELECT * FROM t1; END ;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case312" value="CREATE PROCEDURE test_hint (hint_str VARCHAR(255), var_str VARCHAR(64)) BEGIN SET @orig_q= CONCAT(&quot;SELECT VARIABLE_VALUE FROM performance_schema.session_variables where VARIABLE_NAME = '&quot;,  var_str, &quot;'&quot;); SET @hint_q= CONCAT(&quot;SELECT /*+ &quot;, hint_str, &quot;*/ VARIABLE_VALUE&quot; , &quot; FROM performance_schema.session_variables where VARIABLE_NAME = '&quot;,  var_str, &quot;'&quot;); PREPARE orig_stmt FROM @orig_q; PREPARE hint_stmt FROM @hint_q; EXECUTE orig_stmt; EXECUTE hint_stmt; EXECUTE orig_stmt; DEALLOCATE PREPARE orig_stmt; DEALLOCATE PREPARE hint_stmt; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case313" value="CREATE PROCEDURE test_if_commit() BEGIN ROLLBACK; SELECT IF (COUNT(*) &gt; 0, &quot;YES&quot;, &quot;NO&quot;) AS &quot;IMPLICIT COMMIT&quot; FROM trans; DELETE FROM trans; COMMIT; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case314" value="CREATE PROCEDURE test_round(in arg bigint) BEGIN DECLARE i int; SET i = 0; WHILE (i &gt;= -20) DO BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '22003' SHOW ERRORS; SELECT arg, i, round(arg, i); END; SET i = i - 1; END WHILE; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case316" value="CREATE PROCEDURE test_round_unsigned(in arg bigint unsigned) BEGIN DECLARE i int; SET i = 0; WHILE (i &gt;= -20) DO BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE '22003' SHOW ERRORS; SELECT arg, i, round(arg, i); END; SET i = i - 1; END WHILE; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case322" value="CREATE ROLE r1 IDENTIFIED BY 'test'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case324" value="CREATE SPATIAL INDEX USING BTREE ON t2(col)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case325" value="CREATE TABLE C ( col_int int(11) DEFAULT NULL, col_varchar_10_utf8 varchar(10) CHARACTER SET utf8 DEFAULT NULL, pk int(11) NOT NULL AUTO_INCREMENT, col_varchar_10_latin1 varchar(10) DEFAULT NULL, col_varchar_255_utf8 varchar(255) CHARACTER SET utf8 DEFAULT NULL, col_varchar_255_latin1 varchar(255) DEFAULT NULL, col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL, col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8 GENERATED ALWAYS AS (concat(repeat(col_varchar_10_utf8,3),repeat(col_varchar_10_utf8,3))) VIRTUAL, col_varchar_255_latin1_key varchar(255) GENERATED ALWAYS AS (concat(repeat(col_varchar_10_latin1,3),repeat(col_varchar_10_latin1,3))) VIRTUAL, col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8 GENERATED ALWAYS AS (repeat(substr(col_varchar_10_utf8,-(1)),5)) VIRTUAL, col_varchar_10_latin1_key varchar(10) GENERATED ALWAYS AS (repeat(substr(col_varchar_10_latin1,-(1)),7)) VIRTUAL, PRIMARY KEY (pk DESC), UNIQUE KEY ucover_key1 (pk DESC, col_int_key DESC, col_varchar_255_utf8_key DESC, col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC, col_varchar_10_latin1_key DESC), UNIQUE KEY ucover_key2 (pk, col_int_key, col_varchar_255_utf8_key, col_varchar_255_latin1_key, col_varchar_10_utf8_key, col_varchar_10_latin1_key), KEY col_int_key (col_int_key DESC), KEY col_varchar_255_utf8_key (col_varchar_255_utf8_key DESC), KEY col_varchar_255_latin1_key (col_varchar_255_latin1_key DESC), KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key DESC), KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key), KEY multi_key1 (col_int_key DESC, col_varchar_10_latin1_key), KEY multi_key1a (col_int_key DESC, col_varchar_10_latin1_key DESC), KEY multi_key2 (col_int_key, col_int DESC), KEY multi_key3 (col_varchar_255_utf8_key DESC, col_varchar_255_utf8), KEY multi_key4 (col_varchar_255_latin1_key, col_varchar_255_latin1), KEY multi_key5 (pk DESC, col_int_key DESC, col_varchar_10_latin1_key), KEY cover_key1 (pk DESC, col_int_key DESC, col_varchar_255_utf8_key, col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC, col_varchar_10_latin1_key) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case326" value="CREATE TABLE E ( col_int int(11) DEFAULT NULL, col_varchar_10_utf8 varchar(10) CHARACTER SET utf8 DEFAULT NULL, pk int(11) NOT NULL AUTO_INCREMENT, col_varchar_10_latin1 varchar(10) DEFAULT NULL, col_varchar_255_utf8 varchar(255) CHARACTER SET utf8 DEFAULT NULL, col_varchar_255_latin1 varchar(255) DEFAULT NULL, col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL, col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8 GENERATED ALWAYS AS (concat(repeat(col_varchar_10_utf8,3),repeat(col_varchar_10_utf8,3))) VIRTUAL, col_varchar_255_latin1_key varchar(255) GENERATED ALWAYS AS (concat(repeat(col_varchar_10_latin1,3),repeat(col_varchar_10_latin1,3))) VIRTUAL, col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8 GENERATED ALWAYS AS (repeat(substr(col_varchar_10_utf8,-(1)),5)) VIRTUAL, col_varchar_10_latin1_key varchar(10) GENERATED ALWAYS AS (repeat(substr(col_varchar_10_latin1,-(1)),7)) VIRTUAL, PRIMARY KEY (pk DESC), UNIQUE KEY ucover_key1 (pk DESC, col_int_key DESC, col_varchar_255_utf8_key DESC, col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC, col_varchar_10_latin1_key DESC), UNIQUE KEY ucover_key2 (pk, col_int_key, col_varchar_255_utf8_key, col_varchar_255_latin1_key, col_varchar_10_utf8_key, col_varchar_10_latin1_key), KEY col_int_key (col_int_key DESC), KEY col_varchar_255_utf8_key (col_varchar_255_utf8_key DESC), KEY col_varchar_255_latin1_key (col_varchar_255_latin1_key DESC), KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key DESC), KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key), KEY multi_key1 (col_int_key DESC, col_varchar_10_latin1_key), KEY multi_key1a (col_int_key DESC, col_varchar_10_latin1_key DESC), KEY multi_key2 (col_int_key,col_int DESC), KEY multi_key3 (col_varchar_255_utf8_key DESC, col_varchar_255_utf8), KEY multi_key4 (col_varchar_255_latin1_key, col_varchar_255_latin1), KEY multi_key5 (pk DESC,col_int_key DESC, col_varchar_10_latin1_key), KEY cover_key1 (pk DESC,col_int_key DESC, col_varchar_255_utf8_key, col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC, col_varchar_10_latin1_key) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case327" value="CREATE TABLE IF NOT EXISTS t1 ( f1 bit(2) NOT NULL default b'' ) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case328" value="CREATE TABLE ```a` (i INT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case329" value="CREATE TABLE ```ab````cd``` (i INT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case330" value="CREATE TABLE ```ab``cd``` (i INT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case331" value="CREATE TABLE `t1` ( `a b` INT, `c&quot;d` INT, `e``f` INT, PRIMARY KEY (`a b`, `c&quot;d`, `e``f`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case332" value="CREATE TABLE `t1` ( `a b` INT, `c&quot;d` INT, `e``f` INT, PRIMARY KEY (`a b`, `c&quot;d`, `e``f`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case333" value="CREATE TABLE `t``\&quot;&quot;e` (a INT, PRIMARY KEY (a)) ENGINE=InnoDB PARTITION BY RANGE (a) SUBPARTITION BY HASH (a) (PARTITION `p0``\&quot;&quot;e` VALUES LESS THAN (100) (SUBPARTITION `sp0``\&quot;&quot;e`, SUBPARTITION `sp1``\&quot;&quot;e`), PARTITION `p1``\&quot;&quot;e` VALUES LESS THAN (MAXVALUE) (SUBPARTITION `sp2``\&quot;&quot;e`, SUBPARTITION `sp3``\&quot;&quot;e`))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case336" value="CREATE TABLE b15776 (a blob(2147483647), b blob(2147483648), c blob(4294967295), a1 text(2147483647), b1 text(2147483648), c1 text(4294967295) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case337" value="CREATE TABLE b15776 (a blob(4294967296))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case338" value="CREATE TABLE b15776 (a blob(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case339" value="CREATE TABLE b15776 (a char(2147483648))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case340" value="CREATE TABLE b15776 (a char(4294967295))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case341" value="CREATE TABLE b15776 (a char(4294967296))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case342" value="CREATE TABLE b15776 (a char(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case343" value="CREATE TABLE b15776 (a int(-1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case344" value="CREATE TABLE b15776 (a int(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case345" value="CREATE TABLE b15776 (a text(4294967296))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case346" value="CREATE TABLE b15776 (a text(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case347" value="CREATE TABLE b15776 (a year(-2))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case348" value="CREATE TABLE b15776 (a year(4294967295))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case349" value="CREATE TABLE b15776 (a year(4294967296))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case350" value="CREATE TABLE b15776 (a year(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case351" value="CREATE TABLE b15776 (data blob(-1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case352" value="CREATE TABLE bridges ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), position POINT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case353" value="CREATE TABLE buildings ( fid INTEGER NOT NULL PRIMARY KEY, address CHARACTER VARYING(64), position POINT, footprint POLYGON)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case354" value="CREATE TABLE divided_routes ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), num_lanes INTEGER, centerlines MULTILINESTRING)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case355" value="CREATE TABLE forests ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), boundary MULTIPOLYGON)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case356" value="CREATE TABLE innodb_table1 (m INT, n INT, FOREIGN KEY (n) REFERENCES t0(f1)) START TRANSACTION" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case357" value="CREATE TABLE lakes ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), shore POLYGON)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case359" value="CREATE TABLE named_places ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), boundary POLYGON)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case360" value="CREATE TABLE ponds ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), type CHARACTER VARYING(64), shores MULTIPOLYGON)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case361" value="CREATE TABLE road_segments ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), aliases CHARACTER VARYING(64), num_lanes INTEGER, centerline LINESTRING)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case362" value="CREATE TABLE streams ( fid INTEGER NOT NULL PRIMARY KEY, name CHARACTER VARYING(64), centerline LINESTRING)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case364" value="CREATE TABLE t(i BIGINT, b LONGBLOB  DEFAULT (repeat('b', i)))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case366" value="CREATE TABLE t(i INT, b BLOB DEFAULT (repeat('b', i)))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case368" value="CREATE TABLE t(i INT, b TINYBLOB  DEFAULT (repeat('b', i)))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case370" value="CREATE TABLE t0 ( skip INT, locked INT, nowait INT )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case371" value="CREATE TABLE t1 ( a int ) PARTITION BY RANGE (a) ( PARTITION p0 VALUES LESS THAN (1), PARTITION p1 VALU ES LESS THAN (2) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case374" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by key (a) subpartition by list (a+b) ( partition x1 ( subpartition x11 values in (0), subpartition x12 values in (1)), partition x2 ( subpartition x21 values in (0), subpartition x22 values in (1)) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case375" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by key (a) subpartition by list (a+b) ( partition x1 ( subpartition x11, subpartition x12), partition x2 ( subpartition x21, subpartition x22) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case376" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by list (a) subpartition by hash (a+b) ( partition x1 values in (1) ( subpartition x11 nodegroup 0, subpartition xextra, subpartition x12 nodegroup 1), partition x2 values in (2) ( subpartition x21 nodegroup 0, subpartition x22 nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case377" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by list (a) subpartition by hash (a+b) ( partition x1 values in (1,2,3) ( subpartition x11 nodegroup 0, subpartition x12 nodegroup 1), partition x2 values in (4,5,6) ( subpartition x21 nodegroup 0, subpartition x22 nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case378" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by list (a) subpartition by hash (a+b) subpartitions 3 ( partition x1 values in (1,2,4) ( subpartition x11 nodegroup 0, subpartition x12 nodegroup 1), partition x2 values in (3,5,6) ( subpartition x21 nodegroup 0, subpartition x22 nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case379" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1) ( subpartition x11 engine innodb nodegroup 0, subpartition x12 engine innodb nodegroup 1), partition x2 values less than (5) ( subpartition x21 engine innodb nodegroup 0, subpartition x22 engine innodb nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case380" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1) ( subpartition x11 engine innodb nodegroup 0, subpartition x12 engine innodb nodegroup 1), partition x2 values less than (5) ( subpartition x21 engine innodb nodegroup 0, subpartition x22 engine innodb nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case381" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1) ( subpartition x11 nodegroup 0, subpartition x12 nodegroup 1), partition x2 values less than (5) ( subpartition x21 nodegroup 0, subpartition x22 nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case382" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by key (a+b) (partition x1 values less than (1) (subpartition x11, subpartition x12), partition x2 values less than (2) (subpartition x21, subpartition x22))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case383" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by key (a) partitions 3 (partition tablespace ts1, partition x2 tablespace ts2, partition x3 tablespace ts3)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case384" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by key (a) partitions 3 (partition x1 nodegroup 0, partition x2 nodegroup 1, partition x3 nodegroup 2)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case385" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by key (a+2) partitions 3 (partition x1 tablespace ts1, partition x2 tablespace ts2, partition x3 tablespace ts3)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case386" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by list (a) partitions 2 (partition x1 values in 4, partition x2 values in (5))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case387" value="CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by list (a) partitions 2 (partition x1 values less than 4, partition x2 values less than (5))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case391" value="CREATE TABLE t1 ( col_int_key INTEGER, col_json JSON, KEY mv_idx ((CAST(col_json-&gt;'$[*]' AS CHAR(40) ARRAY))) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case392" value="CREATE TABLE t1 ( col_int_key INTEGER, col_json JSON, KEY mv_idx ((CAST(col_json-&gt;'$[*]' AS CHAR(40) ARRAY))) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case393" value="CREATE TABLE t1 ( f1 CHAR(20) COLLATE utf8mb4_0900_ai_ci  # A NO PAD collation. )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case394" value="CREATE TABLE t1 ( json_col JSON , KEY json_col ((CAST(json_col -&gt; '$' AS UNSIGNED ARRAY))) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case397" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case398" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case399" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case400" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case401" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case402" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case403" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case404" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case405" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case406" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case407" value="CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case408" value="CREATE TABLE t1 (a DATETIME(-1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case409" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case410" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case411" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case412" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case413" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case414" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case415" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case416" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case417" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case418" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case419" value="CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case421" value="CREATE TABLE t1 (a INT) /*!50100 PARTITION BY HASH (a) /* Test of multi-line comment */ PARTITIONS 5 */" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case422" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case423" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case424" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case425" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case426" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case427" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case428" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case429" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case430" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case431" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case432" value="CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case435" value="CREATE TABLE t1 (a INT, b TIMESTAMP DEFAULT (TIMESTAMPADD(MINUTE, 1,'2003-01-02')) ON UPDATE NOW())" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case436" value="CREATE TABLE t1 (a TIME(-1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case437" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case438" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case439" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case440" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case441" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case442" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case443" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case444" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case445" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case446" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case447" value="CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case448" value="CREATE TABLE t1 (a TIMESTAMP(-1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case449" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case450" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case451" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case452" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case453" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case454" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case455" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case456" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case457" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case458" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case459" value="CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case471" value="CREATE TABLE t1 (c1 YEAR(4294967295))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case472" value="CREATE TABLE t1 (c1 YEAR(4294967296))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case481" value="CREATE TABLE t1 (f1 INT) ENGINE=MyiSAM START TRANSACTION" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case483" value="CREATE TABLE t1 (f1 INT) START TRANSACTION" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case488" value="CREATE TABLE t1 (g GEOMCOLLECTION)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case496" value="CREATE TABLE t1 AS SELECT REPEAT (' ', 10) AS a LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case498" value="CREATE TABLE t1 AS SELECT REPEAT(' ', 10) AS a LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case500" value="CREATE TABLE t1 AS SELECT REPEAT(' ', 10) as c LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case502" value="CREATE TABLE t1 AS SELECT REPEAT('a',2) as s1 LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case504" value="CREATE TABLE t1 AS SELECT REPEAT('abcd', 128) AS a LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case505" value="CREATE TABLE t1 AS SELECT regexp_instr( 'a', 'a' ) AS a, regexp_like( 'a', 'a' ) AS b, regexp_replace( 'abc', 'b', 'x' ) AS c, regexp_substr( 'a', 'a' ) AS d, regexp_substr( repeat('a', 512), 'a' ) AS e, regexp_substr( repeat('a', 513), 'a' ) AS f" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case507" value="CREATE TABLE t1 AS SELECT repeat('a',2) as s1 LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case509" value="CREATE TABLE t1 ENGINE=INNODB AS SELECT repeat('a', 5) AS s1 LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case511" value="CREATE TABLE t1 ENGINE=MYISAM AS SELECT repeat('a', 5) AS s1 LIMIT 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case512" value="CREATE TABLE t1 SELECT /* 81 */ 100000000000000000000000000000000000000000000000000000000000000000000000000000001. AS c1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case513" value="CREATE TABLE t1 SELECT 5.0 + 96 DIV 1,                     # Dividend is integer 5.0 + 96.1234 DIV 1,                # Dividend is decimal 5.0 + '96' DIV 1,                   # Dividend is string 5.0 + CAST('96' AS SIGNED) DIV 1,   # Dividend is function 5.0 + CAST('96' AS UNSIGNED) DIV 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case514" value="CREATE TABLE t1 SELECT @decimal AS c1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case516" value="CREATE TABLE t1 charset utf8mb4 SELECT SUBSTRING('1', DAY(FROM_UNIXTIME(-1))) AS f1, LEFT('1', DAY(FROM_UNIXTIME(-1))) AS f2, RIGHT('1', DAY(FROM_UNIXTIME(-1))) AS f3, REPEAT('1', DAY(FROM_UNIXTIME(-1))) AS f4, RPAD('hi', DAY(FROM_UNIXTIME(-1)),'?') AS f5, LPAD('hi', DAY(FROM_UNIXTIME(-1)),'?') AS f6" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case517" value="CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE NOW(), b INT DEFAULT 1 )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case518" value="CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT NOW(), b INT )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case521" value="CREATE TABLE t1(a DATETIME NOT NULL DEFAULT NOW(), b INT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case522" value="CREATE TABLE t1(a DATETIME NOT NULL DEFAULT NOW(), b INT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case523" value="CREATE TABLE t1(a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case530" value="CREATE TABLE t1(col1 MULTIPOLYGON NOT NULL, SPATIAL INDEX USING BTREE (col1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case536" value="CREATE TABLE t1(f1 int CHECK(f1 &lt; 10), f2 int CHECK())" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case538" value="CREATE TABLE t1(f1 int CHECK(f1 &lt; 10), f2 int CHECK)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case540" value="CREATE TABLE t1(f1 int CHECK(f1 &lt; 10), f2 int CONSTRAINT t1_f2_ck CHECK(f2 &lt; 10) NOT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case542" value="CREATE TABLE t1(f1 int CHECK)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case544" value="CREATE TABLE t1(f1 int CONSTRAINT t1_ck CHECK( f1 &lt; 10) NOT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case546" value="CREATE TABLE t1(f1 int t1_ck CHECK())" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case548" value="CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK())" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case550" value="CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK(f1&lt;10), CONSTRAINT t2_ck CHECK(f2 &gt; 0) NOT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case552" value="CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case554" value="CREATE TABLE t1(i INT PRIMARY KEY) KEY_BLOCK_SIZE = -2147483648" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case561" value="CREATE TABLE t1(x INT, KEY `` ((x + 1)))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case566" value="CREATE TABLE t2 (a INT, b INT DEFAULT (select 1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case569" value="CREATE TABLE t2 (i INT, j DOUBLE DEFAULT (SQRT(i)), k DOUBLE DEFAULT (DEFAULT(j)))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case572" value="CREATE TABLE t2 AS SELECT INSERT(1133,3,0,22) FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case574" value="CREATE TABLE t2 AS SELECT INSERT(1133,3,0,22) FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case576" value="CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case578" value="CREATE TABLE t2 LIKE t1 PARTITION (p0, p2)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case580" value="CREATE TABLE t3 (a INT PRIMARY KEY, d INT DEFAULT (-a + 1), c INT DEFAULT (DEFAULT(d)) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case585" value="CREATE TABLE t4 (s1 CHAR(50) CHARACTER SET latin1, s2 CHAR(50) CHARACTER SET cp932, d DECIMAL(10,2))| CREATE PROCEDURE bug18293 (IN ins1 CHAR(50), IN ins2 CHAR(50) CHARACTER SET cp932, IN ind DECIMAL(10,2)) BEGIN INSERT INTO t4 VALUES (ins1, ins2, ind)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case589" value="CREATE TABLE t_illegal (col_1 INT CHECK something)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case591" value="CREATE TABLE v0(v1 DEC, v2 INT)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case672" value="CREATE TEMPORARY TABLE issue_functional_key_part ( sold_on DATETIME NOT NULL DEFAULT NOW(), INDEX sold_on_date ((DATE(sold_on))) ) SELECT NOW() `sold_on`" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case674" value="CREATE TEMPORARY TABLE t6(a INT) ENGINE = MERGE UNION = ()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case675" value="CREATE TRIGGER BUG_12490 BEFORE UPDATE ON t_bug_12490 FOR EACH ROW HELP CONTENTS" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case679" value="CREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN grant select on t1 to 'mysqltest_1'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case680" value="CREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN revoke all privileges on *.* from 'mysqltest_1'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case681" value="CREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN revoke select on t1 from 'mysqltest_1'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case682" value="CREATE TRIGGER f BEFORE INSERT ON t1 FOR EACH ROW BEGIN INSERT INTO t1 ( `int` ) VALUES (4 ),( 8 ),( 2 )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case683" value="CREATE TRIGGER f BEFORE INSERT ON t1 FOR EACH ROW BEGIN UPDATE A SET `pk`=1 WHERE `pk`=0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case685" value="CREATE TRIGGER t1_au AFTER UPDATE ON t1 FOR EACH ROW CREATE SERVER s FOREIGN DATA WRAPPER mysql OPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test')" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case686" value="CREATE TRIGGER t1_au AFTER UPDATE ON t1 FOR EACH ROW START SLAVE" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case687" value="CREATE TRIGGER t1_au AFTER UPDATE ON t1 FOR EACH ROW STOP SLAVE" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case691" value="CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW ALTER SERVER s OPTIONS (password '1')" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case693" value="CREATE TRIGGER t1bu BEFORE UPDATE ON bug22580_t1 FOR EACH ROW BEGIN CALL bug22580_proc_1(); END|" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case697" value="CREATE TRIGGER tr1 AFTER DELETE ON t1 FOR EACH ROW BEGIN INSERT INTO t1 SELECT * FROM t1 AS A" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case698" value="CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW ALTER DATABASE db1 CHARACTER SET latin1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case699" value="CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW ALTER USER 'u1'@'localhost' PASSWORD EXPIRE" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case700" value="CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW CHANGE REPLICATION SOURCE TO SOURCE_SSL = 0" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case701" value="CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW DROP SERVER IF EXISTS s" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case702" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN DROP TRIGGER test1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case703" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN LOCK TABLE t1 READ; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case704" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN alter view v1 as select 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case705" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create database mysqltest; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case706" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create function f2 () returns int return 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case707" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create index t1_i on t1 (a); END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case708" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create trigger tr2 before insert on t1 for each row do select 1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case709" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create user 'mysqltest_1'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case711" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop database mysqltest; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case712" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop function bug_13627_f; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case713" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop index t1_i on t1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case714" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop user 'mysqltest_1'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case715" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop view v1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case716" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN rename table t1 to t2; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case717" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN rename user 'mysqltest_2' to 'mysqltest_1'; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case718" value="CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN unlock tables; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case760" value="CREATE TRIGGER trig_t1_ins BEFORE INSERT ON t1 FOR EACH ROW BEGIN SET @aux = GET_LOCK(2,1)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case775" value="CREATE USER ACCOUNT UNLOCK user5@localhost" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case777" value="CREATE USER IF NOT EXISTS trig_u2@xyz.com" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case779" value="CREATE USER foo2@localhost IDENTIFIED BY 'foo' COMMENT 'xxx'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case780" value="CREATE USER foo3 PASSWORD EXPIRE DEFAULT COMMENT 'abc'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case781" value="CREATE USER foo4 ACCOUNT LOCK ATTRIBUTE '{&quot;stuff&quot;:&quot;ffuts&quot;}'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case782" value="CREATE USER foo@localhost FAILED_LOGIN_ATTEMPTS -1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case783" value="CREATE USER foo@localhost PASSWORD_LOCK_TIME -1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case784" value="CREATE USER plug IDENTIFIED AS ''" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case786" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case787" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS '' AS 'plug_dest'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case788" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS '' IDENTIFIED WITH test_plugin_server   AS 'plug_dest'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case789" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest' IDENTIFIED by 'plug_dest_pwd'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case790" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest' USER plug_dest IDENTIFIED by 'plug_dest_pwd'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case791" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest' plug_dest IDENTIFIED by 'plug_dest_pwd'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case792" value="CREATE USER plug IDENTIFIED WITH 'test_plugin_server' IDENTIFIED WITH 'test_plugin_server'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case793" value="CREATE USER plug IDENTIFIED WITH @auth_name AS 'plug_dest'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case794" value="CREATE USER plug IDENTIFIED WITH AS plug_dest" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case795" value="CREATE USER plug IDENTIFIED WITH hh''s_test_plugin_server AS 'plug_dest'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case796" value="CREATE USER plug IDENTIFIED WITH test_plugin_server AS @auth_string" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case797" value="CREATE USER plug IDENTIFIED WITH test_plugin_server AS plug_dest" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case798" value="CREATE USER plug_dest IDENTIFIED BY 'plug_dest_passwd' IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case804" value="CREATE USER u1 COMMENT 'Hello &quot;Smith&quot;'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case805" value="CREATE USER u1 COMMENT 'Hello &quot;Smith&quot;'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case807" value="CREATE USER u1@120.0.0.1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case809" value="CREATE USER u1@localhost ATTRIBUTE &quot;this is a string&quot;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case810" value="CREATE USER u1@localhost IDENTIFIED BY 'foo' COMMENT 'Not permitted to change this'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case811" value="CREATE USER u1@localhost IDENTIFIED BY 'foo',u2@localhost IDENTIFIED BY 'foo' COMMENT &quot;Works with partial restrictions&quot;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case813" value="CREATE USER u3@120.0.0.1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case815" value="CREATE USER user1@" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case817" value="CREATE USER user3@%" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case819" value="CREATE USER user5@localhost IDENTIFIED  AS 'auth_string'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case830" value="CREATE VIEW v AS SELECT * FROM (VALUES ROW(1)) AS t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case831" value="CREATE VIEW v AS SELECT * FROM (VALUES ROW(1)) AS t1(x)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case832" value="CREATE VIEW v AS SELECT INSERT('a', 1, 1, YEAR(UNHEX('w'))) AS c" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case834" value="CREATE VIEW v AS SELECT i, j, JSON_ARRAYAGG(j) OVER (ORDER BY i DESC ROWS UNBOUNDED PRECEDING) jarray_j FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case835" value="CREATE VIEW v AS SELECT i, j, JSON_OBJECTAGG(i,j) OVER (ORDER BY i DESC ROWS UNBOUNDED PRECEDING) jobject_j FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case836" value="CREATE VIEW v AS VALUES" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case837" value="CREATE VIEW v AS VALUES ROW(1)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case838" value="CREATE VIEW v(x) AS SELECT * FROM (VALUES ROW(1)) AS t1(z)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case839" value="CREATE VIEW v(x) AS VALUES ROW(1)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case840" value="CREATE VIEW v(x, y) AS VALUES ROW(1,2), ROW(2,4), ROW(3,6)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case841" value="CREATE VIEW v1 (a) AS SELECT f1 IN (SELECT f1 FROM t1) FROM t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case843" value="CREATE VIEW v1 AS SELECT 1 FROM t1 GROUP BY SUBSTRING(1 FROM (SELECT 3 FROM t1 WHERE a &gt;= ANY(SELECT 1)))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case844" value="CREATE VIEW v1 AS SELECT 1 IN (1 LIKE 2,0) AS f" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case845" value="CREATE VIEW v1 AS SELECT GROUPING(a2345678901234567890123456789012345678901234.a), GROUPING(a2345678901234567890123456789012345678901234.a), GROUPING(a2345678901234567890123456789012345678901234.a) FROM t1 AS a2345678901234567890123456789012345678901234 GROUP BY a WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case847" value="CREATE VIEW v1 AS SELECT STDDEV_SAMP(a) OVER ( ORDER BY a ROWS CURRENT ROW) AS std_dev_samp FROM t" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case851" value="CREATE VIEW v1 AS SELECT id, 'a' AS name, a AS val FROM t1 UNION SELECT id, 'mn', HEX(LIKE_RANGE_MIN(a, 16)) AS min FROM t1 UNION SELECT id, 'mx', HEX(LIKE_RANGE_MAX(a, 16)) AS max FROM t1 UNION SELECT id, 'sp', REPEAT('-', 32) AS sep FROM t1 ORDER BY id, name" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case852" value="CREATE VIEW v1 AS SELECT test.bug12812()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case853" value="CREATE VIEW v2 AS SELECT * FROM t1 USE KEY () ORDER BY a" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case854" value="CREATE VIEW v2 AS SELECT GROUPING(a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx.a), GROUPING(a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx.a), GROUPING(a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx.a) FROM t1 AS a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx GROUP BY a WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case855" value="CREATE VIEW v_mysqluser1_f1 AS SELECT mysqltest1.f1() AS a" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case856" value="create aggregate function bug16896() returns int return 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case858" value="create definer=some_user@`` sql security invoker view v1 as select 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case865" value="create function `f``1` () returns int return 5" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case869" value="create function bug10015_7() returns int begin commit; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case870" value="create function bug10015_7() returns int begin start transaction; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case872" value="create function bug13825_0() returns int begin rollback to savepoint x; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case873" value="create function bug13825_1() returns int begin release savepoint x; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case874" value="create function bug13825_2() returns int begin insert into t1 values (2); savepoint x; insert into t1 values (3); rollback to savepoint x; insert into t1 values (4); return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case875" value="create function bug13825_3(rb int) returns int begin insert into t1 values(1); savepoint x; insert into t1 values(2); if rb then rollback to savepoint x; end if; insert into t1 values(3); return rb; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case876" value="create function bug13825_4() returns int begin savepoint x; insert into t1 values(2); rollback to savepoint x; return 0; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case877" value="create function bug13825_5(p int) returns int begin savepoint x; insert into t2 values(p); rollback to savepoint x; insert into t2 values(p+1); return p; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case879" value="create function bug14270() returns int begin cache index t1 key (`primary`) in keycache1; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case880" value="create function bug14270() returns int begin load index into cache t1; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case882" value="create function bug23333() RETURNS int(11) DETERMINISTIC begin insert into t1 values (null)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case886" value="create function bug7047() returns int begin alter function bug7047; return 0; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case889" value="create function bug8408() returns int begin show warnings; return 0; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case891" value="create function bug8409() returns int begin flush hosts; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case892" value="create function bug8409() returns int begin flush logs; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case893" value="create function bug8409() returns int begin flush privileges; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case894" value="create function bug8409() returns int begin flush status; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case895" value="create function bug8409() returns int begin flush tables with read lock; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case896" value="create function bug8409() returns int begin flush tables; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case897" value="create function bug8409() returns int begin flush tables; return 5; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case898" value="create function bug8409() returns int begin flush user_resources; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case899" value="create function bug8409() returns int begin reset master; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case900" value="create function bug8409() returns int begin reset slave; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case906" value="create function f1() returns int begin alter event e1 rename to e2; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case907" value="create function f1() returns int begin deallocate prepare stmt; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case912" value="create function f1() returns int begin declare res int" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case915" value="create function f1() returns int begin drop event e2; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case916" value="create function f1() returns int begin show create event e1; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case948" value="create function func_25345() returns int(11) begin call proc_25345(); return 1; end |" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case949" value="create function func_25345_b() returns int(11) begin declare c1 cursor for select a from table_25345_a; declare c2 cursor for select b from table_25345_b; return 1; end |" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case956" value="create function p(x int, x char(10)) begin end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case961" value="create or replace view v1 (c,d,e,f) as select a,b, a in (select a+2 from t1), a = all (select a from t1) from t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case962" value="create procedure ``() select 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case963" value="create procedure ``.bug15658() select 1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case964" value="create procedure b(x int) repeat insert into test.t1 values (repeat(&quot;b&quot;,3), x); set x = x-1; until x = 0 end repeat" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case965" value="create procedure b2(x int) repeat select 1 into outfile 'b2'; insert into test.t1 values (repeat(&quot;b2&quot;,3), x); set x = x-1; until x = 0 end repeat" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case967" value="create procedure bug10015_8() commit" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case968" value="create procedure bug10015_8() start transaction" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case969" value="create procedure bug10100pc(level int, lim int) begin declare lv int; declare c cursor for select a from t3; open c; if level &lt; lim then select level; fetch c into lv; select lv; update t3 set a=level+lv; FLUSH TABLES; call bug10100pc(level+1, lim); else select * from t3; end if; close c; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case970" value="create procedure bug10100pd(level int, lim int) begin if level &lt; lim then select level; prepare stmt1 from &quot;update t3 set a=a+2&quot;; execute stmt1; FLUSH TABLES; execute stmt1; FLUSH TABLES; execute stmt1; FLUSH TABLES; deallocate prepare stmt1; execute stmt2; select * from t3; call bug10100pd(level+1, lim); else execute stmt2; end if; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case971" value="create procedure bug10100pt(level int, lim int) begin if level &lt; lim then update t3 set a=level; FLUSH TABLES; call bug10100pt(level+1, lim); else select * from t3; end if; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case972" value="create procedure bug10100pv(level int, lim int) begin if level &lt; lim then update v1 set a=level; FLUSH TABLES; call bug10100pv(level+1, lim); else select * from v1; end if; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case975" value="create procedure bug10537() load data local infile '/tmp/somefile' into table t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case976" value="create procedure bug10656_create_index() begin create index bug10656_my_index on t3 (ID); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case978" value="create procedure bug10969() begin declare s1 int default 0; select default(s1) from t30; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case979" value="create procedure bug10969() begin declare s1 int default 0; select default(t30.s1) from t30; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case983" value="create procedure bug12589_1() begin declare spv1 decimal(3,3); set spv1= 123.456; set spv1 = 'test'; create temporary table tm1 as select spv1; show create table tm1; drop temporary table tm1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case984" value="create procedure bug12589_2() begin declare spv1 decimal(6,3); set spv1= 123.456; create temporary table tm1 as select spv1; show create table tm1; drop temporary table tm1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case985" value="create procedure bug12589_3() begin declare spv1 decimal(6,3); set spv1= -123.456; create temporary table tm1 as select spv1; show create table tm1; drop temporary table tm1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case989" value="create procedure bug13012() BEGIN REPAIR TABLE t1,t2,t3,v1; OPTIMIZE TABLE t1,t2,t3,v1; ANALYZE TABLE t1,t2,t3,v1; END" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case996" value="create procedure bug13825_0() begin rollback to savepoint x; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case997" value="create procedure bug13825_1() begin release savepoint x; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case998" value="create procedure bug13825_2() begin savepoint x; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1000" value="create procedure bug14210_fill_table() begin declare table_size, max_table_size int default 0; select @@session.max_heap_table_size into max_table_size; delete from t3; insert into t3 (a) values (repeat('a', 255)); repeat insert into t3 select a from t3; select count(*)*255 from t3 into table_size; until table_size &gt; max_table_size*2 end repeat; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1004" value="create procedure bug14533_1() sql security definer desc db_bug14533.t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1006" value="create procedure bug14840_1() begin declare err int default 0; declare continue handler for sqlexception set err = err + 1; start transaction; update t3 set x = 1, y = 42 where x = 2; insert into t3 values (3, 4711); if err &gt; 0 then rollback; else commit; end if; select * from t3; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1014" value="create procedure bug15231_4() begin declare x decimal(2,1); set x = 'zap'; select 'Missed it (correct)' as 'Result'; show warnings; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1021" value="create procedure bug1862() begin insert into t3 values(2); flush tables; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1024" value="create procedure bug21416() show create procedure bug21416" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1028" value="create procedure bug2267_1() begin show procedure status where db='test'; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1029" value="create procedure bug2267_2() begin show function status where db='test'; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1030" value="create procedure bug2267_3() begin show create procedure bug2267_1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1031" value="create procedure bug2267_4() begin show create function bug2267_4; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1037" value="create procedure bug3843() analyze table t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1038" value="create procedure bug4318() handler t3 read next" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1039" value="create procedure bug4344() drop function bug4344" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1040" value="create procedure bug4344() drop procedure bug4344" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1043" value="create procedure bug4902() begin show charset like 'foo'; show collation like 'foo'; show create table t1; show create database test; show databases like 'foo'; show errors; show columns from t1; show keys from t1; show open tables like 'foo'; show status like 'foo'; show tables like 'foo'; show variables like 'foo'; show warnings; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1046" value="create procedure bug5251() checksum table t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1051" value="create procedure bug6600() check table t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1052" value="create procedure bug6600() lock table t1 read" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1053" value="create procedure bug6600() unlock table t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1055" value="create procedure bug7047() alter procedure bug7047" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1058" value="create procedure bug7743 ( searchstring char(28) ) begin declare var mediumint(8) unsigned; select a into var from t4 where b = 2 and c = binary searchstring limit 1; show warnings; select var; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1066" value="create procedure bug8850() begin truncate table t1; insert t1 values (1); rollback; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1069" value="create procedure bug9367() begin declare v int; declare c cursor for select s1 from t1; open c; show warnings; fetch c into v; select v; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1081" value="create procedure foo() create function bar() returns double return 2.3" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1082" value="create procedure foo() create procedure bar() set @x=3" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1083" value="create procedure h_ee() deterministic begin declare continue handler for 1062 -- ER_DUP_ENTRY select 'Outer (bad)' as 'h_ee'; begin declare continue handler for 1062 -- ER_DUP_ENTRY select 'Inner (good)' as 'h_ee'; insert into t3 values (1); end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1084" value="create procedure h_en() deterministic begin declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA select 'Outer (bad)' as 'h_en'; begin declare x int; declare continue handler for sqlstate '02000' -- no data select 'Inner (good)' as 'h_en'; select a into x from t3 where a = 42; end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1085" value="create procedure h_es() deterministic begin declare continue handler for 1062 -- ER_DUP_ENTRY select 'Outer (bad)' as 'h_es'; begin declare continue handler for sqlstate '23000' select 'Inner (good)' as 'h_es'; insert into t3 values (1); end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1086" value="create procedure h_ew() deterministic begin declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE select 'Outer (bad)' as 'h_ew'; begin declare continue handler for sqlwarning select 'Inner (good)' as 'h_ew'; insert into t3 values (123456789012); end; delete from t3; insert into t3 values (1); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1087" value="create procedure h_ex() deterministic begin declare continue handler for 1062 -- ER_DUP_ENTRY select 'Outer (bad)' as 'h_ex'; begin declare continue handler for sqlexception select 'Inner (good)' as 'h_ex'; insert into t3 values (1); end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1088" value="create procedure h_ne() deterministic begin declare continue handler for not found select 'Outer (bad)' as 'h_ne'; begin declare x int; declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA select 'Inner (good)' as 'h_ne'; select a into x from t3 where a = 42; end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1090" value="create procedure h_ns() deterministic begin declare continue handler for not found select 'Outer (bad)' as 'h_ns'; begin declare x int; declare continue handler for sqlstate '02000' -- no data select 'Inner (good)' as 'h_ns'; select a into x from t3 where a = 42; end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1091" value="create procedure h_se() deterministic begin declare continue handler for sqlstate '23000' select 'Outer (bad)' as 'h_se'; begin declare continue handler for 1062 -- ER_DUP_ENTRY select 'Inner (good)' as 'h_se'; insert into t3 values (1); end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1092" value="create procedure h_sn() deterministic begin declare continue handler for sqlstate '02000' -- no data select 'Outer (bad)' as 'h_sn'; begin declare x int; declare continue handler for not found select 'Inner (good)' as 'h_sn'; select a into x from t3 where a = 42; end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1093" value="create procedure h_we() deterministic begin declare continue handler for sqlwarning select 'Outer (bad)' as 'h_we'; begin declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE select 'Inner (good)' as 'h_we'; insert into t3 values (123456789012); end; delete from t3; insert into t3 values (1); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1094" value="create procedure h_xe() deterministic begin declare continue handler for sqlexception select 'Outer (bad)' as 'h_xe'; begin declare continue handler for 1062 -- ER_DUP_ENTRY select 'Inner (good)' as 'h_xe'; insert into t3 values (1); end; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1095" value="create procedure hndlr1(val int) begin declare x int default 0; declare foo condition for 1136; declare bar condition for sqlstate '42S98';        # Just for testing syntax declare zip condition for sqlstate value '42S99';  # Just for testing syntax declare continue handler for foo set x = 1; insert into test.t1 values (&quot;hndlr1&quot;, val, 2);  # Too many values if (x) then insert into test.t1 values (&quot;hndlr1&quot;, val);   # This instead then end if; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1096" value="create procedure hndlr2(val int) begin declare x int default 0; begin declare exit handler for sqlstate '21S01' set x = 1; insert into test.t1 values (&quot;hndlr2&quot;, val, 2); # Too many values end; insert into test.t1 values (&quot;hndlr2&quot;, x); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1097" value="create procedure hndlr3(val int) begin declare x int default 0; declare continue handler for sqlexception        # Any error begin declare z int; set z = 2 * val; set x = 1; end; if val &lt; 10 then begin declare y int; set y = val + 10; insert into test.t1 values (&quot;hndlr3&quot;, y, 2);  # Too many values if x then insert into test.t1 values (&quot;hndlr3&quot;, y); end if; end; end if; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1098" value="create procedure hndlr4() begin declare x int default 0; declare val int;                            # No default declare continue handler for sqlstate '02000' set x=1; select data into val from test.t3 where id='z' limit 1;  # No hits insert into test.t3 values ('z', val); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1099" value="create procedure ifac(n int unsigned) begin declare i int unsigned default 1; if n &gt; 20 then set n = 20;  # bigint overflow otherwise end if; while i &lt;= n do begin insert into test.t3 values (i, fac(i)); set i = i + 1; end; end while; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1108" value="create procedure mysqltest.p1() begin drop schema mysqltest; create schema mysqltest; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1109" value="create procedure mysqltest1.p1 (out prequestid varchar(100)) begin call mysqltest2.p2('call mysqltest3.p3(1, 2)'); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1110" value="create procedure mysqltest1.p1() begin alter database character set koi8r; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1111" value="create procedure mysqltest2.p2(in psql text) begin declare lsql text; set @lsql= psql; prepare lstatement from @lsql; execute lstatement; deallocate prepare lstatement; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1112" value="create procedure mysqltest_1 () begin begin declare continue handler for sqlexception begin end; update ignore t1 set a = 1 where a = 0; end; prepare stmt1 from 'alter table t1'; execute stmt1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1115" value="create procedure p() begin declare c cursor for insert into test.t1 values (&quot;foo&quot;, 42); open c; close c; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1118" value="create procedure p() begin declare utf8_var VARCHAR(128) CHARACTER SET UTF8; set utf8_var = concat(repeat('A', 128), 'X'); select length(utf8_var), utf8_var; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1119" value="create procedure p() begin declare utf8_var VARCHAR(128) CHARACTER SET UTF8; set utf8_var = concat(repeat('A', 128), 'X'); show warnings; select length(utf8_var), utf8_var; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1130" value="create procedure p1 (a int) language sql deterministic begin declare rsql varchar(100); drop table if exists t1, t2; set @rsql= &quot;create table t1 (a int)&quot;; select @rsql; prepare pst from @rsql; execute pst; set @rsql= null; set @rsql= &quot;create table t2 (a int)&quot;; select @rsql; prepare pst from @rsql; execute pst; drop table if exists t1, t2; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1131" value="create procedure p1() begin alter event e1 rename to e2; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1132" value="create procedure p1() begin create view v1 as select 1; drop view v1; select f1() into @var; set @exec_count=@exec_count+1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1133" value="create procedure p1() begin declare a char(10); set a=&quot;sp-variable&quot;; set @a=&quot;mysql-variable&quot;; prepare stmt from &quot;select 'dynamic sql:', @a, a&quot;; execute stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1136" value="create procedure p1() begin declare counter integer default 0; declare continue handler for sqlexception begin set counter = counter + 10;end; repeat if rand()&gt;0.5 then start transaction; end if; if rand()&gt;0.5 then select var_samp(1), exists(select 1 from t1 lock in share mode) from t1 into @a,@b; end if; if rand()&gt;0.5 then select var_samp(1), exists(select 1 from t1 for update) from t1 into @a,@b; end if; if rand()&gt;0.5 then insert ignore into t1 values (); end if; if rand()&gt;0.5 then insert ignore into t2 values (); end if; if rand()&gt;0.5 then delete from t1; end if; if rand()&gt;0.5 then delete from t2; end if; if rand()&gt;0.5 then commit; end if; set counter = counter + 1; until counter &gt;= 100 end repeat; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1137" value="create procedure p1() begin declare counter integer default 0; declare continue handler for sqlexception begin set counter = counter + 1;end; repeat if rand()&gt;0.5 then start transaction; end if; if rand()&gt;0.5 then select count(*) from t1 for update; end if; update t1 set a = 1 where a &gt;= 0; set counter = counter + 1; until counter &gt;= 50 end repeat; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1141" value="create procedure p1() begin declare v_stmt_text varchar(255); declare v_id integer; declare done int default 0; declare c cursor for select id, stmt_text from t1; declare continue handler for 1295 -- ER_UNSUPPORTED_PS set @status='not supported'; declare continue handler for 1064 -- ER_SYNTAX_ERROR set @status='syntax error'; declare continue handler for sqlstate '02000' set done = 1; prepare update_stmt from &quot;update t1 set status=? where id=?&quot;; open c; repeat if not done then fetch c into v_id, v_stmt_text; set @id=v_id, @stmt_text=v_stmt_text; set @status=&quot;supported&quot;; prepare stmt from @stmt_text; execute update_stmt using @status, @id; end if; until done end repeat; deallocate prepare update_stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1142" value="create procedure p1() begin drop event e1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1143" value="create procedure p1() begin drop table if exists t1; create table t1 (id integer not null primary key, name varchar(20) not null); insert into t1 (id, name) values (1, 'aaa'), (2, 'bbb'), (3, 'ccc'); prepare stmt from &quot;select name from t1&quot;; execute stmt; select name from t1; execute stmt; prepare stmt from &quot;select name from t1 where name=(select name from t1 where id=2)&quot;; execute stmt; select name from t1 where name=(select name from t1 where id=2); execute stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1144" value="create procedure p1() begin execute stmt; deallocate prepare stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1145" value="create procedure p1() begin execute stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1146" value="create procedure p1() begin prepare stmt from &quot;create procedure p2() begin select 1; end&quot;; execute stmt; deallocate prepare stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1147" value="create procedure p1() begin prepare stmt from &quot;drop procedure p2&quot;; execute stmt; deallocate prepare stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1148" value="create procedure p1() begin prepare stmt from &quot;select 1&quot;; execute stmt; execute stmt; execute stmt; deallocate prepare stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1149" value="create procedure p1() begin prepare stmt from 'select 1 A'; execute stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1150" value="create procedure p1() begin prepare stmt from 'select ? as a'; execute stmt using @a; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1151" value="create procedure p1() begin prepare stmt_drop from &quot;drop table if exists t1&quot;; execute stmt_drop; prepare stmt from &quot;create table t1 (a int)&quot;; execute stmt; deallocate prepare stmt; deallocate prepare stmt_drop; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1152" value="create procedure p1() begin prepare stmt_drop from &quot;drop table if exists t1&quot;; execute stmt_drop; prepare stmt from &quot;create table t1 (a int)&quot;; execute stmt; insert into t1 (a) values (1); select * from t1; prepare stmt_alter from &quot;alter table t1 add (b int)&quot;; execute stmt_alter; insert into t1 (a,b) values (2,1); deallocate prepare stmt_alter; deallocate prepare stmt; deallocate prepare stmt_drop; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1153" value="create procedure p1() begin select f1() into @var; execute stmt; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1154" value="create procedure p1() begin set @tab_name=concat(&quot;tab_&quot;, replace(curdate(), '-', '_')); set @drop_sql=concat(&quot;drop table if exists &quot;, @tab_name); set @create_sql=concat(&quot;create table &quot;, @tab_name, &quot; (a int)&quot;); set @insert_sql=concat(&quot;insert into &quot;, @tab_name, &quot; values (1), (2), (3)&quot;); set @select_sql=concat(&quot;select * from &quot;, @tab_name); select @tab_name; select @drop_sql; select @create_sql; select @insert_sql; select @select_sql; prepare stmt_drop from @drop_sql; execute stmt_drop; prepare stmt from @create_sql; execute stmt; prepare stmt from @insert_sql; execute stmt; prepare stmt from @select_sql; execute stmt; execute stmt_drop; deallocate prepare stmt; deallocate prepare stmt_drop; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1156" value="create procedure p1() execute stmt" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1157" value="create procedure p1() flush hosts" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1158" value="create procedure p1() flush logs" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1159" value="create procedure p1() flush privileges" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1160" value="create procedure p1() flush status" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1161" value="create procedure p1() flush tables" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1162" value="create procedure p1() flush tables" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1163" value="create procedure p1() flush tables with read lock" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1164" value="create procedure p1() flush user_resources" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1165" value="create procedure p1() reset master" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1166" value="create procedure p1() reset slave" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1167" value="create procedure p1(a int) begin declare continue handler for 1436 -- ER_STACK_OVERRUN_NEED_MORE select 'exception'; call p1(a+1); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1172" value="create procedure p1(tbl char(10), v int) begin set @s = concat('insert into ', tbl, ' values (?)'); set @v = v; prepare stmt1 from @s; execute stmt1 using @v; deallocate prepare stmt1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1173" value="create procedure p2() begin declare msg VARCHAR(129) CHARACTER SET UTF8; set msg = concat(repeat('A', 128), 'X'); select length(msg), msg; signal sqlstate '55555' set message_text = msg; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1174" value="create procedure p2() begin declare msg VARCHAR(129) CHARACTER SET UTF8; set msg = concat(repeat('A', 128), 'X'); select length(msg), msg; signal sqlstate '55555' set message_text = msg; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1178" value="create procedure p3 () reads sql data begin set profiling = ON; select 'This p3 should show up in profiling'; show profile; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1179" value="create procedure p3() begin declare name VARCHAR(65) CHARACTER SET UTF8; set name = concat(repeat('A', 64), 'X'); select length(name), name; signal sqlstate '55555' set message_text = 'Message', table_name = name; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1180" value="create procedure p3() begin declare name VARCHAR(65) CHARACTER SET UTF8; set name = concat(repeat('A', 64), 'X'); select length(name), name; signal sqlstate '55555' set message_text = 'Message', table_name = name; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1184" value="create procedure p_create() begin declare i int default 1; set @lock_table_stmt=&quot;lock table &quot;; set @drop_table_stmt=&quot;drop table &quot;; while i &lt; @@global.table_definition_cache + 1 do set @table_name=concat(&quot;t_&quot;, i); set @opt_comma=if(i=1, &quot;&quot;, &quot;, &quot;); set @lock_table_stmt=concat(@lock_table_stmt, @opt_comma, @table_name, &quot; read&quot;); set @drop_table_stmt=concat(@drop_table_stmt, @opt_comma, @table_name); set @create_table_stmt=concat(&quot;create table if not exists &quot;, @table_name, &quot; (a int)&quot;); prepare stmt from @create_table_stmt; execute stmt; deallocate prepare stmt; set i= i+1; end while; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1188" value="create procedure proc_1() install plugin my_plug soname '\\root\\some_plugin.dll'" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1193" value="create procedure proc_25345() begin declare c1 cursor for select a from table_25345_a; declare c2 cursor for select b from table_25345_b; select 1 as result; end |" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1202" value="create procedure proc_bug19733() begin declare v int default 0; while v &lt; 100 do create index i on t3 (s1); drop index i on t3; set v = v + 1; end while; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1208" value="create procedure solver(initial_leftm varchar(200), initial_rightm varchar(200)) begin declare initial_leftm_j  json; declare initial_rightm_j json; set initial_leftm_j  = cast(initial_leftm as json), initial_rightm_j = cast(initial_rightm as json); with recursive number_of_lines (value) as (select json_length(initial_rightm_j)), number_of_columns (value) as (select json_length(json_extract(initial_leftm_j,&quot;$[0]&quot;))), line_numbers (n) as ( select 0 union all select n+1 from line_numbers, number_of_lines where n&lt;(value-1) ), column_numbers (n) as ( select 0 union all select n+1 from line_numbers, number_of_columns where n&lt;(value-1) ), equations (null_if_done, leftm, rightm, pivot_lines, pivot_columns) as ( select 0, initial_leftm_j, initial_rightm_j, cast(&quot;&quot; as char(200)), cast(&quot;&quot; as char(200)) union all select cur_pivot.cur_pivot_line , ( select &quot;[&quot; || group_concat( ( select &quot;[&quot; || group_concat( json_extract(json_extract(eq.leftm, &quot;$[&quot; || ln.n || &quot;]&quot;), &quot;$[&quot; || cn.n || &quot;]&quot;) - (case when find_in_set(ln.n,eq.pivot_lines)=0 and ln.n&lt;&gt;cur_pivot.cur_pivot_line then json_extract(json_extract(eq.leftm, &quot;$[&quot; || ln.n || &quot;]&quot;), &quot;$[&quot; || cur_pivot.cur_pivot_column || &quot;]&quot;) * json_extract(json_extract(eq.leftm, &quot;$[&quot; || cur_pivot.cur_pivot_line || &quot;]&quot;), &quot;$[&quot; || cn.n || &quot;]&quot;) / cur_pivot.cur_pivot_value else 0 end) order by cn.n separator ',') || &quot;]&quot; from column_numbers cn ) order by ln.n separator ',') || &quot;]&quot; from line_numbers ln ), ( select &quot;[&quot; || group_concat( json_extract(eq.rightm, &quot;$[&quot; || ln.n || &quot;]&quot;) - (case when find_in_set(ln.n,eq.pivot_lines)=0 and ln.n&lt;&gt;cur_pivot.cur_pivot_line then json_extract(json_extract(eq.leftm, &quot;$[&quot; || ln.n || &quot;]&quot;), &quot;$[&quot; || cur_pivot.cur_pivot_column || &quot;]&quot;) * json_extract(eq.rightm, &quot;$[&quot; || cur_pivot.cur_pivot_line || &quot;]&quot;) / cur_pivot.cur_pivot_value else 0 end) order by ln.n separator ',') || &quot;]&quot; from line_numbers ln ), coalesce(cur_pivot.cur_pivot_line, &quot;&quot;) || &quot;,&quot; || eq.pivot_lines, coalesce(cur_pivot.cur_pivot_column, &quot;&quot;) || &quot;,&quot; || eq.pivot_columns from equations eq left join lateral ( select ln.n as cur_pivot_line, cn.n as cur_pivot_column, ( json_extract(json_extract(eq.leftm, &quot;$[&quot; || ln.n || &quot;]&quot;), &quot;$[&quot; || cn.n || &quot;]&quot;) ) as cur_pivot_value from line_numbers ln join column_numbers cn where find_in_set(ln.n,eq.pivot_lines)=0 and json_extract(json_extract(eq.leftm, &quot;$[&quot; || ln.n || &quot;]&quot;), &quot;$[&quot; || cn.n || &quot;]&quot;) &lt;&gt; 0 order by cur_pivot_line,cur_pivot_column limit 1 ) as cur_pivot on 1 where eq.null_if_done is not null ), final_equations as ( select * from equations where null_if_done is null ) select json_extract(eq.leftm, &quot;$[&quot; || ln.n || &quot;]&quot;)  as left_member, json_extract(eq.rightm, &quot;$[&quot; || ln.n || &quot;]&quot;) as right_member, free.value as list_of_free_unknowns from final_equations eq, line_numbers ln, ( select group_concat(cn.n+1) as value from final_equations eq, column_numbers cn where find_in_set(cn.n,eq.pivot_columns)=0 ) as free order by find_in_set(ln.n,eq.pivot_lines), ln.n; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1213" value="create procedure syntaxerror(t int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1214" value="create procedure syntaxerror(t int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1215" value="create procedure syntaxerror(t int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1216" value="create procedure t_sysdate() begin select sysdate() into @a; do sleep(2); select sysdate() into @b; select @a != @b; end;" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1217" value="create procedure test_invalid() begin SIGNAL; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1220" value="create procedure test_signal() begin DECLARE 'céèçà' CONDITION FOR SQLSTATE '12345'; SIGNAL 'céèçà' SET MYSQL_ERRNO = 1000; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1221" value="create procedure test_signal() begin DECLARE aaa VARCHAR(64); DECLARE bbb VARCHAR(64); DECLARE ccc VARCHAR(64); DECLARE ddd VARCHAR(64); DECLARE eee VARCHAR(64); DECLARE fff VARCHAR(64); DECLARE ggg VARCHAR(64); DECLARE hhh VARCHAR(64); DECLARE iii VARCHAR(64); DECLARE jjj VARCHAR(64); DECLARE kkk VARCHAR(64); DECLARE warn CONDITION FOR SQLSTATE &quot;01234&quot;; set aaa= repeat(&quot;A&quot;, 64); set bbb= repeat(&quot;B&quot;, 64); set ccc= repeat(&quot;C&quot;, 64); set ddd= repeat(&quot;D&quot;, 64); set eee= repeat(&quot;E&quot;, 64); set fff= repeat(&quot;F&quot;, 64); set ggg= repeat(&quot;G&quot;, 64); set hhh= repeat(&quot;H&quot;, 64); set iii= repeat(&quot;I&quot;, 64); set jjj= repeat(&quot;J&quot;, 64); set kkk= repeat(&quot;K&quot;, 64); SIGNAL warn SET CLASS_ORIGIN = aaa, SUBCLASS_ORIGIN = bbb, CONSTRAINT_CATALOG = ccc, CONSTRAINT_SCHEMA = ddd, CONSTRAINT_NAME = eee, CATALOG_NAME = fff, SCHEMA_NAME = ggg, TABLE_NAME = hhh, COLUMN_NAME = iii, CURSOR_NAME = jjj, MESSAGE_TEXT = kkk, MYSQL_ERRNO = 65535; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1222" value="create procedure test_signal() begin DECLARE céèçà foo CONDITION FOR SQLSTATE '12345'; SIGNAL céèçà SET MYSQL_ERRNO = 1000; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1224" value="create procedure u() use sptmp" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1235" value="create table `` (a int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1238" value="create table `t1a``b` (col1 char(2))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1240" value="create table `t``1`(a int) engine=myisam" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1241" value="create table b15776 (data blob(-1))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1242" value="create table b15776 (data blob(2147483648))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1243" value="create table b15776 (data blob(4294967294))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1244" value="create table b15776 (data blob(4294967295))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1245" value="create table b15776 (data blob(4294967296))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1246" value="create table t (i)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1247" value="create table t1 ( a int not null references t2, b int not null references t2 (c), primary key (a,b), foreign key (a) references t3 match full, foreign key (a) references t3 match partial, foreign key (a,b) references t3 (c,d) on delete no action on update no action, foreign key (a,b) references t3 (c,d) on update cascade, foreign key (a,b) references t3 (c,d) on delete set default, foreign key (a,b) references t3 (c,d) on update set null) engine=myisam" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1248" value="create table t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1) ( subpartition x11 nodegroup 0, subpartition x12 nodegroup 1), partition x2 values less than (5) ( subpartition x21 nodegroup 0, subpartition x22 nodegroup 1), partition x3 values less than (10) ( subpartition x31 max_rows=50, subpartition x32 nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1251" value="create table t1 ( min_num   dec(6,6)     default .000001)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1252" value="create table t1 ( min_num   dec(6,6)     default .000001)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1253" value="create table t1 ( min_num   dec(6,6)     default 0.000001)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1255" value="create table t1 (`` int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1258" value="create table t1 (a int not null, key key_block_size=1024 (a))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1265" value="create table t1 (a int) partition by key(a) partitions -1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1266" value="create table t1 (a int) partition by key(a) partitions 0.2+e1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1280" value="create table t1 (a int,)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1282" value="create table t1 (a timestamp default now())" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1286" value="create table t1 (c national character varying(10))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1287" value="create table t1 (i int, index `` (i))" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1298" value="create table t1 (t1 timestamp not null default '2003-01-01 00:00:00' on update now(), t2 datetime)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1299" value="create table t1 (t1 timestamp not null default now() on update now(), t2 datetime)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1300" value="create table t1 (t1 timestamp not null default now(), t2 datetime, t3 timestamp NOT NULL DEFAULT '0000-00-00 00:00:00')" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1303" value="create table t1 charset latin1 select bin(130), oct(130), conv(130,16,10), hex(130), char(130), format(130,10), left(_latin2'a',1), right(_latin2'a',1), lcase(_latin2'a'), ucase(_latin2'a'), substring(_latin2'a',1,1), concat(_latin2'a',_latin2'b'), lpad(_latin2'a',4,_latin2'b'), rpad(_latin2'a',4,_latin2'b'), concat_ws(_latin2'a',_latin2'b'), make_set(255,_latin2'a',_latin2'b',_latin2'c'), export_set(255,_latin2'y',_latin2'n',_latin2' '), trim(_latin2' a '), ltrim(_latin2' a '), rtrim(_latin2' a '), trim(LEADING _latin2' ' FROM _latin2' a '), trim(TRAILING _latin2' ' FROM _latin2' a '), trim(BOTH _latin2' ' FROM _latin2' a '), repeat(_latin2'a',10), reverse(_latin2'ab'), quote(_latin2'ab'), soundex(_latin2'ab'), substring(_latin2'ab',1), insert(_latin2'abcd',2,3,_latin2'ef'), replace(_latin2'abcd',_latin2'b',_latin2'B')" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1305" value="create table t1 select null as c00, if(1, null, 'string') as c01, if(0, null, 'string') as c02, ifnull(null, 'string') as c03, ifnull('string', null) as c04, case when 0 then null else 'string' end as c05, case when 1 then null else 'string' end as c06, coalesce(null, 'string') as c07, coalesce('string', null) as c08, least('string',null) as c09, least(null, 'string') as c10, greatest('string',null) as c11, greatest(null, 'string') as c12, nullif('string', null) as c13, nullif(null, 'string') as c14, trim('string' from null) as c15, trim(null from 'string') as c16, substring_index('string', null, 1) as c17, substring_index(null, 'string', 1) as c18, elt(1, null, 'string') as c19, elt(1, 'string', null) as c20, concat('string', null) as c21, concat(null, 'string') as c22, concat_ws('sep', 'string', null) as c23, concat_ws('sep', null, 'string') as c24, concat_ws(null, 'string', 'string') as c25, make_set(3, 'string', null) as c26, make_set(3, null, 'string') as c27, export_set(3, null, 'off', 'sep') as c29, export_set(3, 'on', null, 'sep') as c30, export_set(3, 'on', 'off', null) as c31, replace(null, 'from', 'to') as c32, replace('str', null, 'to') as c33, replace('str', 'from', null) as c34, insert('str', 1, 2, null) as c35, insert(null, 1, 2, 'str') as c36, lpad('str', 10, null) as c37, rpad(null, 10, 'str') as c38" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1306" value="create table t1( bool_col bool, boolean_col boolean, bit_col bit(5), tiny tinyint, tiny_uns tinyint unsigned, small smallint, small_uns smallint unsigned, medium mediumint, medium_uns mediumint unsigned, int_col int, int_col_uns int unsigned, big bigint, big_uns bigint unsigned, decimal_col decimal(10,5), numeric_col numeric(10), fixed_col fixed(10), dec_col dec(10), decimal_col_uns decimal(10,5) unsigned, fcol float, fcol_uns float unsigned, dcol double, double_precision_col double precision, dcol_uns double unsigned, date_col date, time_col time, timestamp_col timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, year_col year, datetime_col datetime, char_col char(5), varchar_col varchar(10), binary_col binary(10), varbinary_col varbinary(10), tinyblob_col tinyblob, blob_col blob, mediumblob_col mediumblob, longblob_col longblob, text_col text, mediumtext_col mediumtext, longtext_col longtext, enum_col enum(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;), set_col set(&quot;F&quot;,&quot;E&quot;,&quot;D&quot;) )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1310" value="create table t1(t1.name int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1312" value="create table t1(xyz.t1.name int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1314" value="create table t2 (b timestamp default now())" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1315" value="create table t2 (primary key (auto)) select auto+1 as auto,1 as t1, 'a' as t2, repeat('a',256) as t3, binary repeat('b',256) as t4, repeat('a',4096) as t5, binary repeat('b',4096) as t6, '' as t7, binary '' as t8 from t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1317" value="create table t2(test.t2.name int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1319" value="create table t3 select t1.* as 'with_alias' from t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1321" value="create table t3 select t2.* as 'with_alias', d as 'x', d as 'z' from t2" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1323" value="create table t9 (a date not null) partition by RANGE(TO_DAYS(a)) ( partition p0 values less than (732299), -- 2004-12-19 partition p1 values less than (732468), -- 2005-06-06 partition p2 values less than (732664)  -- 2005-12-19 )" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1324" value="create table t_34455 ( a int not null, foreign key (a) references t3 (a) match full match partial)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1325" value="create table t_34455 ( a int not null, foreign key (a) references t3 (a) on delete set default match full)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1326" value="create table t_34455 ( a int not null, foreign key (a) references t3 (a) on delete set default on delete set default)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1327" value="create table t_34455 ( a int not null, foreign key (a) references t3 (a) on update set default match full)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1328" value="create table t_34455 ( a int not null, foreign key (a) references t3 (a) on update set default on update set default)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1330" value="create table t_illegal (a int, b int, constraint abc check a&gt;b)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1332" value="create table test_reserved (condition int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1333" value="create table test_reserved (resignal int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1334" value="create table test_reserved (signal int)" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1345" value="create temporary table tg (i int not null) engine=merge union=()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1357" value="create trigger t1_ai after insert on t1 for each row flush hosts" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1358" value="create trigger t1_ai after insert on t1 for each row flush logs" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1359" value="create trigger t1_ai after insert on t1 for each row flush privileges" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1360" value="create trigger t1_ai after insert on t1 for each row flush status" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1361" value="create trigger t1_ai after insert on t1 for each row flush tables" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1362" value="create trigger t1_ai after insert on t1 for each row flush tables with read lock" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1363" value="create trigger t1_ai after insert on t1 for each row flush user_resources" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1364" value="create trigger t1_ai after insert on t1 for each row reset master" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1365" value="create trigger t1_ai after insert on t1 for each row reset slave" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1375" value="create trigger t1_bi before insert on t1 for each row begin insert into t2 values (new.id, new.v); update t2 set v=v+1 where id= new.id; replace t3 values (new.id, 0); update t2, t3 set t2.v=new.v, t3.v=new.v where t2.id=t3.id; create temporary table t5 select * from t1; delete from t5; insert into t5 select * from t1; insert into t4 values (0); set @check= (select count(*) from t5); update t4 set c= @check; drop temporary table t5; set @a:=1/0; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1391" value="create trigger t2_bd before delete on t2 for each row begin insert into t1 values (2); savepoint x; insert into t1 values (3); rollback to savepoint x; insert into t1 values (4); end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1392" value="create trigger t2_bi before insert on t2 for each row rollback to savepoint x" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1396" value="create trigger t2_bu before update on t2 for each row release savepoint x" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1416" value="create trigger trg before insert on t1 for each row begin select event_name from information_schema.events; end|                                                                                                                                                    --error ER_EVENT_RECURSION_FORBIDDEN create function f1() returns int begin create event e2 on schedule every 10 hour do select 1; return 1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1417" value="create trigger trg before insert on t1 for each row begin show create event e1; end" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1461" value="create view bug12602983_v1 as select mysqltest_db.f1()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1462" value="create view bug12602983_v1 as select mysqltest_db.f_does_not_exist()" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1464" value="create view v1 (c,d,e,f) as select a,b, a in (select a+2 from t1), a = all (select a from t1) from t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1465" value="create view v1 (c,d,e,f) as select a,b, a in (select a+2 from t1), a = all (select a from t1) from t1" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1466" value="create view v1 as select t1.a as f1, dt.a as f2 from t1, lateral (select t1.a+t2.a as a from t2) dt" db-types="MySQL"/>
    <sql-case id="create_by_mysql_source_test_case1467" value="create view v1 as select test.`f``1` ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case2" value="SELECT  MAX(a) FROM t1 WHERE (b) IN (SELECT MIN(t2.b) FROM (SELECT b from t1) AS t2 GROUP BY t2.b WITH ROLLUP HAVING GROUPING (t2.b)=0)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case3" value="SELECT  MAX(a) FROM t1 WHERE (b) IN (SELECT MIN(t2.b) FROM t1 AS t2 GROUP BY t2.b WITH ROLLUP HAVING GROUPING (t2.b)=0)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case5" value="SELECT '1' IN ('1', INET_NTOA(0))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case7" value="SELECT '1' RLIKE RPAD('1', 10000, '(')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case9" value="SELECT 'a' = AES_DECRYPT(AES_ENCRYPT('a', 'a'), 'a', REPEAT('a',16))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case10" value="SELECT 'c373e9f5ad0791a0dab5444553544200' IN(SELECT t1.FOLDERID FROM t1 WHERE t1.PARENTID='2f6161e879db43c1a5b82c21ddc49089' AND t1.FOLDERNAME = 'Level1')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case12" value="SELECT ( 0 BETWEEN 9223372036854775808 AND 1 )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case14" value="SELECT ( 9223372036854775807 BETWEEN 9223372036854775808 AND 1 )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case16" value="SELECT (((@e:=`b`)) NOT BETWEEN 0x0b5f09 AND (CHAR(md5(@pub1), (CONNECTION_ID()+LEAD(5225.750000,110) RESPECT NULLS OVER(ORDER BY b, a))))) FROM t GROUP BY b,a WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case17" value="SELECT ((+0) IN ((0b111111111111111111111111111111111111111111111111111),(rpad(1.0,2048,1)), (32767.1)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case19" value="SELECT ((table1.col_int) * (table1.col_int)) AS field2 FROM (t1 AS table1) WHERE (table1.col_int != 1 OR table1.pk) GROUP BY field2 WITH ROLLUP HAVING (field2 &lt;&gt; 239 ) ORDER BY GROUPING(field2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case20" value="SELECT (1 + CAST(JSON_OBJECTAGG(1,2) OVER () AS DECIMAL))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case22" value="SELECT (SELECT MAX(b) FROM t1) FROM t1 GROUP BY (SELECT MAX(b) FROM t1) WITH ROLLUP HAVING GROUPING((SELECT 1 FROM DUAL))=0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case23" value="SELECT (SELECT MAX(b) FROM t1) FROM t1 GROUP BY (SELECT MAX(b) FROM t1) WITH ROLLUP HAVING GROUPING((SELECT MAX(b) FROM t1))=0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case24" value="SELECT (VALUES ROW(1) ORDER BY t) AS a FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case25" value="SELECT (VALUES ROW(1) ORDER BY w) AS a FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case26" value="SELECT (_binary x'31' | NULL) + 0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case27" value="SELECT (_binary x'31' | x'31')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case28" value="SELECT (_binary x'31' | x'31') + 0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case29" value="SELECT (a+1) IS NULL, GROUPING(a+1) FROM t1 GROUP BY a+1 WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case30" value="SELECT (derived_1.`COUNT(*) + outer_t.a` + IFNULL(derived_0.`MAX(b)`,0)) + 1 + 5 AS mx FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`, outer_t.a AS d_1 FROM t1 outer_t GROUP BY outer_t.a) derived_0 LEFT JOIN LATERAL (SELECT (COUNT(0) + derived_0.d_1) AS `COUNT(*) + outer_t.a` FROM t1) derived_1 ON(true) WHERE true" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case32" value="SELECT (~(REPEAT(0xb822, 0x5C9C380)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case33" value="SELECT * FROM ( SELECT a, JSON_ARRAYAGG(a) OVER () AS b FROM t1 ) AS d1 WHERE (a,b) IN ( SELECT a, JSON_ARRAYAGG(a) OVER () AS b FROM t1 )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case34" value="SELECT * FROM (SELECT 1, 10 UNION VALUES ROW(2, 20), ROW(3, &quot;30&quot;)) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case35" value="SELECT * FROM (SELECT i, j, SUM(k) FROM t1 GROUP BY i, j WITH ROLLUP ORDER BY GROUPING(i),i, GROUPING(j),j) as tmp" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case37" value="SELECT * FROM (VALUES ROW(1), ROW(2)) AS dt0 NATURAL JOIN (VALUES ROW(1, 10), ROW(1, 20)) AS dt1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case38" value="SELECT * FROM (VALUES ROW(1), ROW(2)) AS dt0 NATURAL JOIN (VALUES ROW(1, 10), ROW(2, 20)) AS dt1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case39" value="SELECT * FROM (VALUES ROW(1),ROW(1)) AS dt(a) WHERE EXISTS( WITH RECURSIVE qn AS (SELECT a*0 AS b UNION ALL SELECT b+1 FROM qn WHERE b=0) SELECT * FROM qn WHERE b=a )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case40" value="SELECT * FROM (VALUES ROW(1),ROW(1)) AS dt(a) WHERE NOT EXISTS( WITH RECURSIVE qn AS (SELECT a*0 AS b UNION ALL SELECT b+1 FROM qn WHERE b=0) SELECT * FROM qn WHERE b=a )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case41" value="SELECT * FROM (VALUES ROW(1, 10)) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case42" value="SELECT * FROM (VALUES ROW(1, 10), ROW(2, &quot;20&quot;) UNION SELECT 3, 30) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case43" value="SELECT * FROM (VALUES ROW(1, 10), ROW(2, 20)) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case44" value="SELECT * FROM (VALUES ROW(DEFAULT)) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case45" value="SELECT * FROM json_table('[]', '$[*]' COLUMNS (p CHAR(1) CHARACTER SET &quot;utf8&quot; PATH '$.a')) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case46" value="SELECT * FROM json_table('[]', '$[*]' COLUMNS (p CHAR(1) CHARACTER SET 'utf8' PATH '$.a')) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case47" value="SELECT * FROM json_table('[]', '$[*]' COLUMNS (p CHAR(1) CHARACTER SET `utf8` PATH '$.a')) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case48" value="SELECT * FROM json_table('[]', '$[*]' COLUMNS (p CHAR(1) CHARACTER SET utf8 PATH '$.a')) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case49" value="SELECT * FROM json_table('[]', '$[*]' COLUMNS (p NATIONAL CHAR(1) PATH '$.a')) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case51" value="SELECT * FROM json_table('[]', '$[*]' COLUMNS (p NCHAR(1) PATH '$.a')) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case53" value="SELECT * FROM nowhere else" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case54" value="SELECT * FROM t AS upper JOIN LATERAL (SELECT DISTINCT ROW_NUMBER() OVER () AS rn FROM t WHERE (t.a &gt; upper.a)) der" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case55" value="SELECT * FROM t0 JOIN (VALUES ROW(2, 20)) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case56" value="SELECT * FROM t0 JOIN (VALUES ROW(2, 20), ROW(3, 30)) AS dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case57" value="SELECT * FROM t0 LEFT JOIN (VALUES ROW(1, 20), ROW(1, 30)) AS dt ON t0.a = dt.column_0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case58" value="SELECT * FROM t0 LEFT JOIN (VALUES ROW(2, 20), ROW(3, 30)) AS dt ON t0.a = dt.column_0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case59" value="SELECT * FROM t0 RIGHT JOIN (VALUES ROW(1, 20), ROW(1, 30)) AS dt ON t0.a = dt.column_0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case60" value="SELECT * FROM t0 RIGHT JOIN (VALUES ROW(2, 20), ROW(3, 30)) AS dt ON t0.a = dt.column_0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case61" value="SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case62" value="SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10), ROW(2, 20))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case63" value="SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, NULL))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case64" value="SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case65" value="SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10), ROW(2, 20))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case66" value="SELECT * FROM t0 WHERE a &lt;ANY (VALUES ROW(1))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case67" value="SELECT * FROM t0 WHERE a &lt;ANY (VALUES ROW(1), ROW(2))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case68" value="SELECT * FROM t0 WHERE a &gt;ALL (VALUES ROW(1))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case69" value="SELECT * FROM t0 WHERE a &gt;ALL (VALUES ROW(1), ROW(2))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case70" value="SELECT * FROM t0 WHERE a IN (VALUES ROW(1))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case71" value="SELECT * FROM t0 WHERE a IN (VALUES ROW(1), ROW(2))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case72" value="SELECT * FROM t0 WHERE a NOT IN (VALUES ROW(1))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case73" value="SELECT * FROM t0 WHERE a NOT IN (VALUES ROW(1), ROW(2))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case74" value="SELECT * FROM t0 WHERE b IN (VALUES ROW(a*10))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case75" value="SELECT * FROM t1 AS tbl1 LEFT JOIN t1 AS tbl3 ON FALSE WHERE tbl1.id NOT IN (SELECT id FROM t1 AS tbl2 JOIN LATERAL (SELECT 1 FROM t2 WHERE id = tbl2.id LIMIT 10) AS d1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case76" value="SELECT * FROM t1 JOIN LATERAL ( SELECT GROUP_CONCAT(t.id) AS c FROM t2 t WHERE (t.id = t1.id) ) d0 ON (1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case78" value="SELECT * FROM t1 LEFT JOIN ( t1 AS t2 LEFT JOIN t1 AS t3 ON TRUE ) ON TRUE, LATERAL ( SELECT SUM(t1.a), t2.a FROM t1 ) AS d1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case79" value="SELECT * FROM t1 LEFT JOIN ( t3, LATERAL ( SELECT * FROM t2 WHERE table_id = t3.id ) l1 ) ON TRUE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case84" value="SELECT * FROM t1 WHERE c1 &lt;=  REPEAT( SUBSTR( UPPER('Rdlpikti') , 1 , 2 ), 8)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case86" value="SELECT * FROM t1, t2, LATERAL ( SELECT pk, blobfield GROUP BY pk, blobfield WITH ROLLUP ) AS d1 ORDER BY t1.f1, t2.pk" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case87" value="SELECT * FROM t11 LEFT JOIN t12 force index (idx) ON t12.t12b = t11.t11b JOIN LATERAL (SELECT t12a) dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case91" value="SELECT /*+ JOIN_PREFIX(tbl1, tbl2) */ * FROM t1 AS tbl1 LEFT JOIN t1 AS tbl3 ON FALSE WHERE tbl1.id NOT IN (SELECT id FROM t1 AS tbl2 JOIN LATERAL (SELECT 1 FROM t2 WHERE id = tbl2.id LIMIT 10) AS d1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case92" value="SELECT /*+ SET_VAR(optimizer_switch = 'materialization=off,semijoin=off') */ * FROM t1 AS ta, lateral (select 1 WHERE ta.a IN (SELECT b FROM t2 AS tb                WHERE tb.b &gt;= SOME(SELECT SUM(tc.a) as sg FROM t1 as tc                                   GROUP BY tc.b                                   HAVING ta.a=tc.b))) dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case95" value="SELECT /*+ no_merge() */  outr.pk AS x FROM ( SELECT * FROM  t1  ) AS  outr WHERE outr.col_int_key  IN ( SELECT /*+ no_merge() no_semijoin() */ id FROM JSON_TABLE( IF(outr.col_date_key&lt;&gt;NOW(), '[{&quot;a&quot;:&quot;3&quot;},{&quot;a&quot;:2},{&quot;b&quot;:1},{&quot;a&quot;:0}]', '') , '$[*]' columns (id for ordinality, jpath varchar(100) path '$.a', jexst int exists path '$.b')   ) AS qn ) ORDER BY outr.col_datetime" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case96" value="SELECT 0 &amp; (JSON_ARRAYAGG(1) OVER w) FROM (select 1) as dt  WINDOW w as ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case98" value="SELECT 1 FROM (TABLE t1) AS table1 JOIN t2 AS table2 ON table1.x = table2.y WHERE table1.x IN (VALUES ROW('B'))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case99" value="SELECT 1 FROM (TABLE t1) AS table1 JOIN t2 AS table2 ON table1.x = table2.y WHERE table1.x IN (VALUES ROW(NULL))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case100" value="SELECT 1 FROM (TABLE t1) AS table1 JOIN t2 AS table2 ON table1.x = table2.y WHERE table1.x IN (VALUES ROW(NULL), ROW('B'))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case102" value="SELECT 1 FROM t WHERE insert(a &amp; NULL,'','','')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case105" value="SELECT 1 FROM t1 GROUP BY insert(a,'1','11','1')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case106" value="SELECT 1 FROM v1 AS table1 RIGHT OUTER JOIN LATERAL (SELECT 1 FROM v1 AS table2 RIGHT OUTER JOIN LATERAL ( SELECT 1 FROM v1 AS table3 ) AS table4 ON table1.c1 = 1) AS table5 ON 1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case109" value="SELECT 1 NOT IN (SELECT 1 FROM t1 as t1 GROUP BY 1 LIKE (SELECT 1 FROM t1 as t2)) AS col" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case110" value="SELECT 1 NOT IN (SELECT 1 FROM t1 as t1 ORDER BY 1 LIKE (SELECT 1 FROM t1 as t2)) AS col" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case111" value="SELECT 1 WHERE 1 = ANY (SELECT GROUPING(a) FROM t1 GROUP BY a WITH ROLLUP)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case112" value="SELECT 1 WHERE 2 &gt; ALL (SELECT GROUPING(a) FROM t1 GROUP BY a WITH ROLLUP)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case113" value="SELECT 1.0 * (_binary x'312E35' | x'312E35')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case114" value="SELECT 10,10.0,10.,.1e+2,100.0e-1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case115" value="SELECT 1e1,1.e1,1.0e1,1e+1,1.e+1,1.0e+1,1e-1,1.e-1,1.0e-1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case117" value="SELECT 3 /*! /* */ */" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case118" value="SELECT 3 IN (SELECT MAX(a) FROM t1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case119" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case120" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case121" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case122" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case123" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case124" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case125" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case126" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case127" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case128" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case129" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.MIXED_CASE_COUNT" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case130" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.MIXED_CASE_COUNT" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case131" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.NUMBER_COUNT" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case132" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.NUMBER_COUNT" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case133" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.SPECIAL_CHAR_COUNT" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case134" value="SELECT @@GLOBAL.VALIDATE_PASSWORD.SPECIAL_CHAR_COUNT" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case135" value="SELECT @@GLOBAL.example_signed_long_var IN (-2147483648, -9223372036854775808)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case136" value="SELECT @@GLOBAL.example_signed_long_var IN (2147483647, 9223372036854775807)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case137" value="SELECT @@GLOBAL.example_signed_long_var IN (2147483647, 9223372036854775807)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case138" value="SELECT @@GLOBAL.example_signed_long_var IN (2147483647, 9223372036854775807)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case139" value="SELECT @@SESSION.example_signed_long_thdvar IN (-2147483648, -9223372036854775808)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case140" value="SELECT @@SESSION.example_signed_long_thdvar IN (2147483647, 9223372036854775807)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case141" value="SELECT @@SESSION.example_signed_long_thdvar IN (2147483647, 9223372036854775807)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case142" value="SELECT @@SESSION.example_signed_long_thdvar IN (2147483647, 9223372036854775807)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case144" value="SELECT @@global.`default`.`key_buffer_size`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case146" value="SELECT @@global.default.key_buffer_size" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case148" value="SELECT @@global.dragnet.log_error_filter_rules" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case150" value="SELECT @@global.dragnet.log_error_filter_rules" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case152" value="SELECT @@global.syseventlog.facility" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case154" value="SELECT @@global.syseventlog.facility" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case156" value="SELECT @@global.syseventlog.facility, @start_value" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case158" value="SELECT @@global.syseventlog.include_pid" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case160" value="SELECT @@global.syseventlog.include_pid" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case162" value="SELECT @@global.syseventlog.include_pid" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case164" value="SELECT @@global.syseventlog.tag" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case166" value="SELECT @@global.syseventlog.tag" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case168" value="SELECT @@global.syseventlog.tag" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case170" value="SELECT @@global.syseventlog.tag" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case172" value="SELECT @@global.syseventlog.tag" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case174" value="SELECT @@global.validate_password.check_user_name" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case175" value="SELECT @@global.validate_password.length" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case176" value="SELECT @@global.validate_password.policy" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case177" value="SELECT @@global.validate_password.policy, @@global.validate_password.length" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case179" value="SELECT @before=@after" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case181" value="SELECT ADDDATE('8112-06-20', REPEAT('1', 32))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case184" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case186" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case188" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case190" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case192" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case194" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case196" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case198" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case200" value="SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case202" value="SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case204" value="SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case206" value="SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case208" value="SELECT AES_ENCRYPT('a', 'a') = AES_ENCRYPT('a', 'a', REPEAT('b', 16))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case210" value="SELECT AES_ENCRYPT('a', 'a') = AES_ENCRYPT(REPEAT('a',1000), 'a')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case212" value="SELECT BIN(RIGHT(REPEAT('b',64),30))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case214" value="SELECT BIT_COUNT(_binary 0x221040808040100200200100)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case216" value="SELECT CAST(0 AS UNSIGNED) NOT BETWEEN 0 AND -1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case218" value="SELECT CAST(100 AS UNSIGNED) NOT BETWEEN 1 AND -1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case219" value="SELECT CHARSET(mysqltest2.bug16211_f3())" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case220" value="SELECT CHARSET(mysqltest2.bug16211_f3())" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case221" value="SELECT CHARSET(mysqltest2.bug16211_f4())" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case222" value="SELECT CHARSET(mysqltest2.bug16211_f4())" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case223" value="SELECT CHAR_LENGTH(EXPORT_SET(1,1,1,REPEAT(1,100000000)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case225" value="SELECT CONCAT('&quot;',CONCAT('&quot;;&quot;',repeat('a',60), repeat('b',60), repeat('c',60), repeat ('d',100)),'&quot;')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case226" value="SELECT CONCAT('&quot;',CONCAT('&quot;;&quot;',repeat('a',60), repeat('b',60), repeat('c',60), repeat ('d',100)),'&quot;')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case227" value="SELECT CONCAT('&quot;',CONCAT_WS('&quot;;&quot;',repeat('a',60), repeat('b',60), repeat('c',60), repeat ('d',100)),'&quot;')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case228" value="SELECT CONCAT('&quot;',CONCAT_WS('&quot;;&quot;',repeat('a',60), repeat('b',60), repeat('c',60), repeat ('d',100)),'&quot;')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case230" value="SELECT CONCAT(i,':',j) as ij, CONCAT(j,':',i) as ji FROM t1 GROUP BY ij, ji WITH ROLLUP ORDER BY GROUPING(ij),ij,GROUPING(ji),ji" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case231" value="SELECT CONCAT_WS('&quot;',CONCAT_WS('&quot;;&quot;',repeat('a',60), repeat('b',60), repeat('c',60), repeat ('d',100)),'&quot;')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case232" value="SELECT CONCAT_WS('&quot;',CONCAT_WS('&quot;;&quot;',repeat('a',60), repeat('b',60), repeat('c',60), repeat ('d',100)),'&quot;')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case233" value="SELECT COUNT(*) = 1 FROM information_schema.processlist WHERE state = 'Waiting for locking service lock' AND id =" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case234" value="SELECT COUNT(*) AS a, a IN (SELECT a FROM t2 WHERE a=FLOOR(COUNT(t1.a)/2)) AS s FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case235" value="SELECT COUNT(*) FROM t1 GROUP BY t1.a  HAVING t1.a IN (SELECT t3.a FROM t1 AS t3 WHERE t3.b IN (SELECT b FROM t2, lateral (select t1.a) dt))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case236" value="SELECT COUNT(*) FROM t1 LEFT JOIN json_table( '{}','$[0][1]' COLUMNS(a FOR ORDINALITY) ) AS t2 ON TRUE GROUP BY e*from_unixtime(0)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case240" value="SELECT CRC32(INSERT('foodyear', 1, 4, 'good'))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case241" value="SELECT CURRENT_TIME(6) RLIKE '^[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{6}$'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case242" value="SELECT CURRENT_TIMESTAMP(6) RLIKE '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{6}$'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case246" value="SELECT DEFAULT(d) from t3" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case247" value="SELECT DISTINCT GROUPING(i), GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case248" value="SELECT DISTINCT GROUPING(i), GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP ORDER BY GROUPING(i), GROUPING(j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case249" value="SELECT DISTINCT SQL_BIG_RESULT col_json, col_char FROM ( VALUES ROW( 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', NULL, NULL ), ROW( NULL, NULL, '&quot;yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;' ) ) AS t1 ( col_char, col_time, col_json ) GROUP BY col_time ORDER BY col_json" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case250" value="SELECT DISTINCT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) + 20 &lt; 35 ORDER BY i" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case251" value="SELECT DISTINCT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) &gt; 10 ORDER BY i" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case252" value="SELECT DISTINCT i, i+j, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING i is NOT NULL ORDER BY i+j" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case253" value="SELECT DISTINCT j, GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case254" value="SELECT EXTRACT(DAY FROM (-0.1111111111)), EXTRACT(YEAR FROM (-0.1111111)), EXTRACT(YEAR_MONTH FROM (-0.1111111111)), EXTRACT(DAY FROM (-0.1111111)), EXTRACT(QUARTER FROM (-0.1111111111)), EXTRACT(MONTH FROM (-0.1111111)), EXTRACT(WEEK FROM (-0.1111111)), DATE(-0.1111111), QUARTER(-0.1111111111), TIMESTAMP(-0.1111111111), LAST_DAY(-0.1111111111), DAY(-0.1111111111), MONTH(-0.1111111111), YEAR(-0.1111111), DAYOFMONTH(-0.1111111111), TIMESTAMP((-0.1111111111),'{$x'), DATE_FORMAT(-0.1111111111,'+'), CONVERT(-0.1111111,DATE), CAST(-0.1111111111 AS DATE)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case255" value="SELECT EXTRACT(HOUR_SECOND FROM CURRENT_DATE) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case256" value="SELECT EXTRACT(MINUTE_MICROSECOND FROM '0000-00-00 00:00:00.000000')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case257" value="SELECT EXTRACT(MINUTE_MICROSECOND FROM a) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case258" value="SELECT FROM_UNIXTIME(FIRST_VALUE(@b)RESPECT NULLS OVER(), REPEAT('1',32))IS NOT FALSE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case259" value="SELECT GET_LOCK(REPEAT('a', 64), 0) = 1 AS expect_1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case260" value="SELECT GET_LOCK(REPEAT('a', 65), 0)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case261" value="SELECT GROUPING((SELECT MAX(b) FROM t1)) FROM t1 GROUP BY (SELECT MAX(b) FROM t1) WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case262" value="SELECT GROUPING(1) FROM t1 GROUP BY 1 WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case263" value="SELECT GROUPING(alias2.pk) AS field2 FROM t2 AS alias1 LEFT JOIN t1 AS alias2 ON 0 GROUP BY alias2.pk WITH ROLLUP ORDER BY GROUPING(alias2.pk)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case264" value="SELECT GROUPING(table2.col_time) AS field1 FROM t1 AS table1,t1 as table2 WHERE table2.pk = 1 GROUP BY table2.col_time WITH ROLLUP ORDER BY GROUPING(table2.col_time)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case271" value="SELECT HEX(_binary 0x0003 &lt;&lt; (_binary 0x38 | NULL))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case273" value="SELECT IF(GROUPING(a)=1,'All Departments', a) as Department, IF(GROUPING(b)=1, 'All Employees', b) as Employees, SUM(c) as SUM FROM t1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case275" value="SELECT INSERT('abc', 3, 3, '1234')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case277" value="SELECT INSERT('abc', 5, 3, '1234')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case279" value="SELECT INSERT('&#119558;テÀa', 2, 2, 'テb')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case281" value="SELECT INSERT(1, 1, 2, _utf8mb4 x'E4B8ADE69687')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case283" value="SELECT INSERT(`字段一`, 1, 1, '㐊') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case285" value="SELECT INSERT(`字段一`, 1, 2, '  ') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case287" value="SELECT INSERT(`字段一`, 1, 2, '岝岝') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case289" value="SELECT INSERT(`字段一`, 1, 3, '㐊') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case291" value="SELECT INSERT(`字段一`, 1, 4, '    ') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case293" value="SELECT INSERT(`字段一`, 1, 4, '岝岝岝岝') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case295" value="SELECT INSERT(`字段一`, 1, 5, '㐊') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case297" value="SELECT INSERT(`字段一`, 4, 1, ' ') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case299" value="SELECT INSERT(`字段一`, 4, 1, '&#134880;') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case301" value="SELECT INSERT(`字段一`, 4, 2, '&#131074;&#131074;') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case303" value="SELECT INSERT(`字段一`, 5, 1, ' ') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case305" value="SELECT INSERT(`字段一`, 5, 1, '&#134880;') FROM `表一`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case307" value="SELECT INSERT(a, 1, 2, b) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case309" value="SELECT IS_FREE_LOCK(REPEAT('a', 64)) = 0 AS expect_1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case310" value="SELECT IS_FREE_LOCK(REPEAT('a', 65))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case311" value="SELECT IS_USED_LOCK(REPEAT('a', 64)) = CONNECTION_ID() AS expect_1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case312" value="SELECT IS_USED_LOCK(REPEAT('a', 65))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case313" value="SELECT JSON_ARRAY(JSON_ARRAYAGG(CAST('' AS JSON)) OVER (), '')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case314" value="SELECT JSON_OBJECTAGG(`key`, i) OVER w AS agg FROM t WINDOW w AS (ORDER BY `key` ROWS CURRENT ROW)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case315" value="SELECT JSON_OBJECTAGG(`key`, i) OVER w AS agg FROM t WINDOW w AS (ORDER BY i ROWS CURRENT ROW)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case317" value="SELECT MAKETIME(((1)&lt;=&gt; (2*JSON_OBJECTAGG('1',1)OVER())),'1',1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case318" value="SELECT MAKETIME(((1)&lt;=&gt; (JSON_OBJECTAGG('1',1)OVER())),'1',1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case319" value="SELECT MAX( t2.i2 ) FROM t3 RIGHT JOIN t2 ON ( t2.i3 = 2 ) WHERE t2.i3 &lt;&gt; t1.i1 ) AS field1 FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case321" value="SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case323" value="SELECT POLYGON((SELECT 1 FROM (SELECT 1 IN (GROUP_CONCAT(t1.f1)) FROM t1, t1 t GROUP BY t.f1 ) d))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case325" value="SELECT POSITION(x'64' IN _utf8mb4'abcdef')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case327" value="SELECT REGEXP_INSTR(e, 'pattern') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case328" value="SELECT REGEXP_LIKE(e, 'pattern') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case329" value="SELECT REGEXP_REPLACE(e, 'pattern', 'xyz') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case330" value="SELECT REGEXP_SUBSTR(e, 'pattern') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case331" value="SELECT RELEASE_LOCK(REPEAT('a', 64)) = 1 AS expect_1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case332" value="SELECT RELEASE_LOCK(REPEAT('a', 65))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case333" value="SELECT REPEAT( '#', tire ) AS A, REPEAT( '#', tire % 999 ) AS B, tire FROM `t1`" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case335" value="SELECT REPEAT('0', 2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case337" value="SELECT REPEAT('1', DAY(FROM_UNIXTIME(-1)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case338" value="SELECT REPEAT('T', 16777211)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case340" value="SELECT ROW(1,ROW(2,3)) IN ((SELECT 1,1),ROW(1,ROW(2,3)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case341" value="SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),(SELECT 1,1))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case342" value="SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),(SELECT 1,1),ROW(1,ROW(2,4)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case343" value="SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,1))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case344" value="SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,1),ROW(1,ROW(2,3)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case345" value="SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,ROW(2,2,2)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case346" value="SELECT ROW(1,ROW(2,3,4)) IN (ROW(1,ROW(2,3,4)),ROW(1,ROW(2,2)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case347" value="SELECT ROW(2,1) IN (ROW(21,2),ROW(ROW(1,1,3),0))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case348" value="SELECT ROW(2,1) IN (ROW(ROW(1,1,3),0),ROW(21,2))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case349" value="SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case350" value="SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case352" value="SELECT SPECIFIC_NAME, ROUTINE_CATALOG, ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE, DTD_IDENTIFIER, ROUTINE_BODY, ROUTINE_DEFINITION, EXTERNAL_NAME, drop table if exists t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case354" value="SELECT STDDEV_SAMP(a) OVER ( ORDER BY a ROWS CURRENT ROW ) AS std_dev_samp FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case355" value="SELECT ST_AsText(ST_GeometryFromText(CONCAT( 'MULTIPOLYGON(((', REPEAT ('-0.00000000001234567890123456789012 -0.123456789012345678,', 1000), '-0.00000000001234567890123456789012 -0.123456789012345678', ')))' ))) AS a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case357" value="SELECT ST_AsWKB(ST_GeomFromText('POINT(0 0)')) IN (SELECT b FROM t) AS result" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case359" value="SELECT ST_AsWKB(ST_GeomFromText('POINT(0 0)')) IN (SELECT b FROM t1) AS result" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case361" value="SELECT ST_GeomFromText('POINT(0 0)') IN (SELECT b FROM t) AS result" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case363" value="SELECT ST_GeomFromText('POINT(0 0)') IN (SELECT b FROM t1) AS result" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case368" value="SELECT SUM(1) OVER w FROM (SELECT * FROM t1,t2 WHERE t1.id=t2.user_id) t SELECT  SUM(id) OVER (PARTITION BY sex ORDER BY id ROWS UNBOUNDED PRECEDING) summ, sex FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case369" value="SELECT SUM(b) OVER (ORDER by a GROUPS 2 PRECEDING) FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case370" value="SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE CURRENT ROW) FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case371" value="SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE GROUP) FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case372" value="SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE NO OTHERS) FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case373" value="SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE TIES) FROM t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case377" value="SELECT TRACE NOT RLIKE '&quot;final_filtering_effect&quot;: 1' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case378" value="SELECT TRACE RLIKE 'disjuntive_predicate_present' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case379" value="SELECT TRACE RLIKE 'disjuntive_predicate_present' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case380" value="SELECT TRACE RLIKE 'have_both_agg_distinct_and_min_max' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case381" value="SELECT TRACE RLIKE 'have_both_agg_distinct_and_min_max' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case382" value="SELECT TRACE RLIKE 'have_both_agg_distinct_and_min_max' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case383" value="SELECT TRACE RLIKE 'have_both_agg_distinct_and_min_max' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case384" value="SELECT TRACE RLIKE 'have_both_agg_distinct_and_min_max' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case385" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case386" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case387" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case388" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case389" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case390" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case391" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case392" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case393" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case394" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case395" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case396" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case397" value="SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case408" value="SELECT VALIDATE_PASSWORD_STRENGTH(REPEAT(&quot;aA1#&quot;, 26))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case409" value="SELECT VARIANCE(b) over w `var`, AVG(b) OVER w `avg`, SUM(b) OVER w `sum`, b, COUNT(b) OVER w count FROM t1 WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case410" value="SELECT VARIANCE(b) over w `var`, AVG(b) OVER w `avg`, SUM(b) OVER w `sum`, b, count(b) OVER w count FROM t1 WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case411" value="SELECT VARIANCE(b) over w `var`, AVG(b) OVER w `avg`, SUM(b) OVER w `sum`, b, count(b) OVER w count, LAST_VALUE(b) OVER w lastval FROM t1 WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case412" value="SELECT VARIANCE(b) over w `var`, FIRST_VALUE(b) over w fv, AVG(b) OVER w `avg`, SUM(b) OVER w `sum`, b, count(b) OVER w count FROM t1 WINDOW w as (ORDER BY b ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case624" value="SELECT `B30896461`.`testFn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case625" value="SELECT `B30896461`.`testFn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case626" value="SELECT `B30896461`.`testfn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case627" value="SELECT `B30896461`.`testfn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case628" value="SELECT `b30896461`.`testfn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case629" value="SELECT `b30896461`.`testfn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case630" value="SELECT `b30896461`.`testfn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case631" value="SELECT `b30896461`.`testfn`()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case632" value="SELECT a AS f1, 'w' AS f2 FROM t GROUP BY f1, f2 WITH ROLLUP HAVING GROUPING(f1)=0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case633" value="SELECT a AS f1, 'w' AS f2 FROM t GROUP BY f1, f2 WITH ROLLUP HAVING GROUPING(f2)=0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case634" value="SELECT a AS f1, 'w' AS f2 FROM t GROUP BY f1, f2 WITH ROLLUP HAVING GROUPING(f2)=1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case636" value="SELECT a IN (SELECT a FROM t1) FROM t1 LIMIT 1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case637" value="SELECT a IN (SELECT a FROM t2 WHERE a=FLOOR(COUNT(t1.a)/2)) AS s FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case638" value="SELECT a as Department, b as Employees, SUM(c), GROUPING(a) as GP_A, GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case639" value="SELECT a as Department, b as Employees, SUM(c), GROUPING(a) as GP_A, GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP HAVING (GP_A =1 AND GP_B=1) OR (GP_B=1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case640" value="SELECT a as Department,b as Employees, SUM(c), GROUPING(a) as GP_A, GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case641" value="SELECT a as Department,b as Employees, SUM(c), GROUPING(a) as GP_A, GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP HAVING GP_A=1 OR GP_B=1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case642" value="SELECT a, COUNT(*) AS c, a IN (SELECT a FROM t2 WHERE a=COUNT(t1.a)) AS s FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case643" value="SELECT a, GROUPING(1) FROM t1 GROUP BY 1 WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case644" value="SELECT a, GROUPING(SUM(a)) FROM t1 GROUP BY (a) WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case646" value="SELECT a, SUM(a), SUM(a)+1, CONCAT(SUM(a),'x'), SUM(a)+SUM(a), SUM(a) FROM (SELECT 1 a, 2 b UNION SELECT 2,3 UNION SELECT 5,6 ) d GROUP BY a WITH ROLLUP ORDER BY GROUPING(a),a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case647" value="SELECT a, b FROM t1 GROUP BY GROUPING(a),GROUPING(b) WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case648" value="SELECT a, b FROM t1 GROUP BY a,b WITH ROLLUP HAVING GROUPING(b) = 1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case649" value="SELECT a, b FROM t1 WHERE GROUPING(a)=1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case650" value="SELECT a, b, GROUPING(a) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case651" value="SELECT a, b, GROUPING(a) FROM t1 GROUP BY a,b" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case652" value="SELECT a, b, GROUPING(c + c) FROM t1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case653" value="SELECT a, b, GROUPING(c + c) FROM t1 GROUP BY a,b,(c + c) WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case654" value="SELECT a, b, GROUPING(c) FROM t1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case655" value="SELECT a, b, a IN (SELECT 1 FROM t2 WHERE a=6) AS s FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case656" value="SELECT a, b, a IN (SELECT COUNT(*) FROM t2) AS c FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case657" value="SELECT a, b, c, GROUPING(1) FROM t1 GROUP BY a,b,c WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case658" value="SELECT a, b, c, GROUPING(a) FROM t1 GROUP BY a,b,c WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case659" value="SELECT a, b, c, GROUPING(a, b) FROM t1 GROUP BY a,b,c WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case660" value="SELECT a, b, c, GROUPING(a, b, c) FROM t1 GROUP BY a,b WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case661" value="SELECT a, b, c, GROUPING(a, b, c) FROM t1 GROUP BY a,b,c WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case662" value="SELECT a, fn(MIN(b) xx) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case663" value="SELECT alias1.col_decimal_10_8 AS field1 , ( SELECT SUM(table1.col_smallint ) AS SQ1_field1 FROM ( t1 as table1 RIGHT JOIN t1 as table2 ON 1 ) ) AS field2 , GROUPING( LOG(alias1.col_int) ) AS field3 FROM ( t1 AS alias1 JOIN t1 AS alias2 ON 1  ) WHERE alias2.pk IN ( SELECT col_char_255 FROM t1 ) GROUP BY field1, field2, LOG(alias1.col_int) WITH ROLLUP ORDER BY alias1.col_datetime, field1, field2, LOG(alias1.col_int)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case664" value="SELECT alias2 . `col_int_nokey` AS field1 FROM ( CC AS alias1 INNER JOIN ( ( BB AS alias2 INNER JOIN (  SELECT   SQ1_alias1 . * FROM C AS SQ1_alias1  ) AS alias3 ON (alias3 . `col_int_key` = alias2 . `col_int_nokey`  ) ) ) ON (alias3 . `col_varchar_nokey` = alias2 . `col_varchar_key`  ) ) WHERE (  ( alias2 . `pk` , alias3 . `col_int_nokey` ) IN ( SELECT 4 , 7  UNION  SELECT 137, 6 ) ) AND alias1 . `pk` &gt; 149 AND alias1 . `pk` &lt; ( 149 + 7 ) OR alias3 . `col_varchar_key` &lt; 'o'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case665" value="SELECT attrs.* FROM t_json, JSON_TABLE(json_col, '$[*]' COLUMNS (nickname JSON PATH '$.nickname')) as attrs" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case667" value="SELECT b, b in ('121314'), b in ('121314', 0) FROM t3" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case671" value="SELECT bug18589_f1(REPEAT(&quot;a&quot;, 767))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case676" value="SELECT cast( '2019-10-10 10:11' AT TIME ZONE 'UTC' AS DATETIME )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case678" value="SELECT cast( 123 AT TIME ZONE 'UTC' AS DATETIME )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case680" value="SELECT cast( a AT TIME ZONE '+00:00' AS DATETIME ) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case682" value="SELECT cast( b AT TIME ZONE '+00:00' AS DATETIME ) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case684" value="SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE '+00:00' AS DATETIME)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case686" value="SELECT cast(TIMESTAMP'2019-10-10 10:11:12+00:00' AT TIME ZONE '+00:00' AS DATETIME)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case690" value="SELECT col_time_5_key AS c1, col_time_key AS c2, col_timestamp AS c3 FROM t1 WHERE col_time_not_null NOT BETWEEN EXTRACT(YEAR_MONTH FROM '0000-00-00 00:00:00') AND COALESCE (col_time_6_not_null_key, col_datetime_key) ORDER BY 1, 2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case694" value="SELECT current_date IN ( MAX(NULL), 1 )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case695" value="SELECT current_time IN ( MAX(NULL), 1 )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case696" value="SELECT db1.f1()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case697" value="SELECT db1.f1()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case698" value="SELECT db1.f1()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case699" value="SELECT db1.f1(1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case700" value="SELECT db1.f2()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case701" value="SELECT db_name.very_long_fn_name_111111111111111111111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999999999999999999()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case702" value="SELECT derived0.cnct AS subq FROM t1 LEFT JOIN LATERAL (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION SELECT (dt.a + 1) FROM dt WHERE dt.a &lt; 10) SELECT t1.a * CONCAT(COUNT(0), '.', FLOOR(AVG(dt.a))) AS cnct FROM dt) derived0 ON TRUE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case703" value="SELECT g.calc_var, g.if_var, g.case_var FROM ( SELECT unq_id, IF ( var_fld  &gt; 5000, (     1 / var_fld ) , 5000 ) calc_var, IF ( var_fld  &gt; 5000, ( 00001 / var_fld ) , 5000 ) if_var, CASE  var_fld  &gt; 5000 WHEN TRUE THEN ( 1 / var_fld ) ELSE 5000 END case_var FROM test_grids_1 ) g JOIN test_grid_dtl_1 d USING (unq_id) ORDER BY 1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case722" value="SELECT i FROM t1 WHERE EXISTS (SELECT i, j, SUM(k) FROM t1 AS t2 WHERE t1.i=t2.i GROUP BY i,j WITH ROLLUP HAVING SUM(k) &gt; 40 ORDER BY GROUPING(i),i, GROUPING(j),j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case723" value="SELECT i, 'sum' FROM (SELECT i, SUM(j) AS 'sum' FROM t1 GROUP BY i WITH ROLLUP ORDER BY GROUPING(i),i) AS tmp WHERE i is NULL" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case724" value="SELECT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) + 20 &lt; 35 ORDER BY i" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case725" value="SELECT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) &gt; 10 ORDER BY i" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case726" value="SELECT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING i is NOT NULL ORDER BY i+j" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case727" value="SELECT i, JSON_ARRAYAGG(i) OVER() FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case728" value="SELECT i, JSON_OBJECTAGG(i,f) OVER w jobject_f FROM t1 GROUP BY i,f WITH ROLLUP HAVING GROUPING(f)=1  WINDOW w AS (ORDER BY f)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case729" value="SELECT i, JSON_OBJECTAGG(i,j) OVER() FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case730" value="SELECT i, JSON_OBJECTAGG(i,j) OVER(PARTITION BY i) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case731" value="SELECT i, PERCENT_RANK() OVER (ORDER BY f) p_rank, JSON_ARRAYAGG(j) OVER (ORDER BY i,j ROWS UNBOUNDED PRECEDING) jarray_j FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case732" value="SELECT i, f, JSON_ARRAYAGG(i) OVER w jarray_i, JSON_ARRAYAGG(f) OVER w jarray_f FROM t1 GROUP BY i,f WITH ROLLUP HAVING GROUPING(f)=1 WINDOW w AS (ORDER BY f)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case733" value="SELECT i, f, MAX(i) OVER w max, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ROWS UNBOUNDED PRECEDING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case734" value="SELECT i, f, MIN(i) OVER w min, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY f)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case735" value="SELECT i, f, PERCENT_RANK() OVER (ORDER BY f) p_rank, JSON_OBJECTAGG(i,j) OVER (ORDER BY i,j ROWS UNBOUNDED PRECEDING) jobject_j FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case736" value="SELECT i, f, PERCENT_RANK() OVER w p_rank, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE BETWEEN 2.1 FOLLOWING AND 4.5 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case737" value="SELECT i, f, RANK() OVER w rank1, NTH_VALUE(i,3) OVER w nth, LEAD(f, 2) OVER w lead1, LAG(f,2) OVER w lag1, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1 WINDOW w AS (ORDER BY f)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case738" value="SELECT i, f, j, CUME_DIST() OVER w c_dist, JSON_ARRAYAGG(j) OVER w jarray_j FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE BETWEEN 1 PRECEDING AND 10 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case739" value="SELECT i, j, AVG(k) FROM t1 GROUP BY i,j WITH ROLLUP ORDER BY GROUPING(i),i,GROUPING(j),j" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case740" value="SELECT i, j, AVG(k) FROM t1 GROUP BY i,j WITH ROLLUP ORDER BY GROUPING(i),i,GROUPING(j),j LIMIT 5" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case741" value="SELECT i, j, AVG(k) FROM t1 GROUP BY i,j+GROUPING(i) WITH ROLLUP" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case742" value="SELECT i, j, JSON_OBJECTAGG(j,f) OVER w jobject_i, JSON_OBJECTAGG(j,s) OVER w jobject_f FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case743" value="SELECT i, j, SUM(k) FROM t1 GROUP BY i,j WITH ROLLUP HAVING i &gt; 10 and j &lt; 1000 ORDER BY GROUPING(i),i,GROUPING(j),j" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case744" value="SELECT i, j, f, CUME_DIST() OVER w c_dist, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case745" value="SELECT i, j, f, JSON_OBJECTAGG(f,j) OVER w jobject_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE BETWEEN 2.1 FOLLOWING AND 4.5 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case746" value="SELECT i, j, f, JSON_OBJECTAGG(i,f) OVER w jobject_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE BETWEEN 2.1 FOLLOWING AND 4.5 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case747" value="SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS BETWEEN 1 FOLLOWING AND 5 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case748" value="SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, MAX(i) OVER w max FROM t1 WINDOW w AS (PARTITION BY f ROWS UNBOUNDED PRECEDING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case749" value="SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, MIN(i) OVER w min FROM t1 WINDOW w AS (PARTITION BY i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case750" value="SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, RANK() OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case751" value="SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, RANK() OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case752" value="SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, RANK() OVER w rank1, NTH_VALUE(i,2) OVER w nth, LEAD(f, 1) OVER w lead1, LAG(f,1) OVER w lag1 FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case753" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_f, RANK() OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY i ORDER BY i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case754" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j FROM t1 WINDOW w AS (PARTITION BY i ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case755" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j FROM t1 WINDOW w AS (PARTITION BY i ROWS BETWEEN 2 PRECEDING AND 4 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case756" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, CUME_DIST() OVER w c_dist FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case757" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, CUME_DIST() OVER w c_dist FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j,f ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case758" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, MAX(i) OVER w max FROM t1 WINDOW w AS (PARTITION BY f ROWS UNBOUNDED PRECEDING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case759" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, RANK() OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case760" value="SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, RANK() OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case761" value="SELECT i, j, f, RANK() OVER w rank1, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case762" value="SELECT i, j, i AS k, COUNT(*) AS count FROM t1 GROUP BY i, j, k WITH ROLLUP ORDER BY GROUPING(i),i, GROUPING(j),j, GROUPING(k),k" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case763" value="SELECT i, j, i+j, AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP HAVING i+j is NULL ORDER BY GROUPING(i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case764" value="SELECT i, j, i+j, AVG(j), AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP HAVING GROUPING(j)+AVG(j) &gt; 11 ORDER BY GROUPING(i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case765" value="SELECT i, j, i+j, FIRST_VALUE(i) over () from t1 GROUP BY i,j WITH ROLLUP HAVING 1 + 2 - GROUPING(i) = 2 ORDER BY GROUPING(i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case766" value="SELECT i, j, i+j, FIRST_VALUE(i) over () from t1 GROUP BY i,j WITH ROLLUP HAVING GROUPING(i) = 1 ORDER BY GROUPING(i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case767" value="SELECT i, j, i+j, FIRST_VALUE(i) over () from t1 GROUP BY i,j WITH ROLLUP HAVING i+j is NULL ORDER BY GROUPING(i)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case768" value="SELECT i,j, SUM(k), GROUPING(i), GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP HAVING GROUPING(i) = 1 OR GROUPING (j) = 1 ORDER BY GROUPING(i),i,GROUPING(j),j" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case769" value="SELECT id, CHAR_LENGTH(GROUP_CONCAT(body)) AS l FROM (SELECT 'a' AS id, REPEAT('foo bar', 100) AS body UNION ALL SELECT 'a' AS id, REPEAT('bla bla', 100) AS body) t1 GROUP BY id ORDER BY l DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case770" value="SELECT id, CHAR_LENGTH(GROUP_CONCAT(body)) AS l FROM (SELECT 'a' AS id, REPEAT('foo bar', 100) AS body UNION ALL SELECT 'a' AS id, REPEAT('bla bla', 100) AS body) t1 GROUP BY id ORDER BY l DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case772" value="SELECT insert(a,1,1,1) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case773" value="SELECT j, i, JSON_OBJECTAGG(j,i) OVER w jobject_i, JSON_OBJECTAGG(j,f) OVER w jobject_f FROM t1 WINDOW w AS (ORDER BY j DESC)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case774" value="SELECT j, i, f, JSON_ARRAYAGG(i) OVER w jarray_i, JSON_ARRAYAGG(f) OVER w jarray_f FROM t1 WINDOW w AS (ORDER BY j DESC)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case775" value="SELECT j, i, f, JSON_ARRAYAGG(i) OVER w jarray_i, JSON_ARRAYAGG(f) OVER w jarray_f FROM t1 WINDOW w AS (ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case776" value="SELECT j, s, JSON_ARRAYAGG(s) OVER w jarray_s, JSON_ARRAYAGG(j) OVER w jarray_j FROM t1 WINDOW w AS (ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case777" value="SELECT j, s, JSON_OBJECTAGG(j, s) OVER w jobject_s FROM t1 GROUP BY j,s WINDOW w AS (ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case778" value="SELECT j, s, JSON_OBJECTAGG(j,s) OVER w jobject_s, JSON_OBJECTAGG(f,j) OVER w jobject_j FROM t1 WINDOW w AS (ORDER BY j) ORDER BY j DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case779" value="SELECT j, s, f, JSON_OBJECTAGG(j,f) OVER w jobject_f, JSON_OBJECTAGG(j,s) OVER w jobject_s FROM t1 WINDOW w AS (ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case780" value="SELECT j, s, f, JSON_OBJECTAGG(j,s) OVER w jobject_s, JSON_OBJECTAGG(f,j) OVER w jobject_j FROM t1 WINDOW w AS (PARTITION BY i ORDER BY s)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case781" value="SELECT length(data) AS len FROM ( SELECT repeat(_utf8mb4 0xE29883, 21844) AS data ) AS sub" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case782" value="SELECT length(data) AS len FROM ( SELECT repeat(_utf8mb4 0xE29883, 21846) AS data ) AS sub" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case783" value="SELECT length(regexp_replace( repeat('a', @buf_sz_utf16 + 1), 'a', 'b' ))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case784" value="SELECT length(regexp_replace( repeat('a', @buf_sz_utf16), 'a', 'b' ))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case785" value="SELECT length(regexp_replace( repeat('a', @buf_sz_utf16), 'a', 'bb' ))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case787" value="SELECT length(repeat(_utf8mb4 0xE29883, 21846)) AS data" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case788" value="SELECT myfunc_int(MIN(b) xx) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case789" value="SELECT myfunc_int(a AS attr_name) FROM t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case790" value="SELECT myfunc_int(fn(MIN(b) xx)) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case791" value="SELECT myfunc_int(fn(MIN(b)) xx) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case792" value="SELECT myfunc_int(test.fn(MIN(b)) xx) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case793" value="SELECT myfunc_int(test.fn(MIN(b))) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case795" value="SELECT mysqltest.f1()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case797" value="SELECT mysqltest.f1()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case799" value="SELECT product, country_id , SUM(profit) FROM t1 GROUP BY product, country_id WITH ROLLUP ORDER BY product DESC, GROUPING (country_id), country_id" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case800" value="SELECT product, country_id , year, SUM(profit) FROM t1 EXPLAIN SELECT product, country_id , year, SUM(profit) FROM t1 SELECT product, country_id , year, SUM(profit) FROM t1 GROUP BY product, country_id, year WITH CUBE UNION ALL SELECT product, country_id , year, SUM(profit) FROM t1 drop table t1,t2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case801" value="SELECT regexp_like( repeat(@v1, 'abc'), 'abc' )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case802" value="SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a ASC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case803" value="SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a ASC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case804" value="SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case805" value="SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case807" value="SELECT s, j, JSON_ARRAYAGG(s) OVER w jarray_s, JSON_ARRAYAGG(j) OVER w jarray_j FROM t1 GROUP BY s,j WINDOW w AS (ORDER BY j)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case808" value="SELECT s, j, JSON_ARRAYAGG(s) OVER w jarray_s, JSON_ARRAYAGG(j) OVER w jarray_j FROM t1 WINDOW w AS (ORDER BY j) ORDER BY j DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case809" value="SELECT s.Id FROM s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case810" value="SELECT s.Id FROM s WHERE Id=1 AND u IS NULL)ORDER BY Id DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case811" value="SELECT s.Id FROM s2 s WHERE Id=1 AND u IS NULL) ORDER BY Id DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case812" value="SELECT s.Id FROM s3 s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case813" value="SELECT s1.Id FROM s1 WHERE Id=1 AND u != 1) ORDER BY Id DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case814" value="SELECT s1.Id FROM s1 WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case815" value="SELECT sex, AVG(id) FROM t1 GROUP BY sex WITH ROLLUP HAVING (sex='M' OR sex IS NULL) AND AVG(id)=3.0 ORDER BY GROUPING(sex), sex" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case817" value="SELECT t.*, MIN(t.rank) OVER (ROWS UNBOUNDED PRECEDING) min, MAX(t.rank) OVER (ROWS UNBOUNDED PRECEDING) max FROM (SELECT sex, id, date, ROW_NUMBER() OVER w AS row_no, RANK() OVER w AS `rank` FROM t1,t2 WHERE t1.id=t2.user_id WINDOW w AS (PARTITION BY date ORDER BY id) ) AS t" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case818" value="SELECT t1.a FROM t1, LATERAL ( SELECT t1.a FROM t1 AS inner_t1 LIMIT 1 ) AS d1 WHERE 1 IN ( SELECT a FROM t1 ) ORDER BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case819" value="SELECT t1.col FROM (TABLE t) AS t1, (SELECT * FROM (VALUES ROW('Y')) AS sq_t1, t) AS t2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case820" value="SELECT t2.f2 FROM t1 JOIN ( t1 AS t2 LEFT JOIN t1 AS t3 USING (f2) ) ON t3.f2 = t2.f2 WHERE t2.f1 &gt; table1.f2 ) FROM t1 AS table1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case821" value="SELECT t2.pk FROM t4 RIGHT JOIN t3 ON t4.col_int_key = t3.pk RIGHT JOIN t2 ON t3.col_int_key &lt;&gt; t2.pk )" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case822" value="SELECT test.bug12812()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case823" value="SELECT test.fn(MIN(b)) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case824" value="SELECT very_long_db_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999.simple_func()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case825" value="SELECT world.func_plusone(1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case826" value="SELECT world.func_plustwo(1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case828" value="select 'b' between 'a' and 'c', 'B' between 'a' and 'c'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case829" value="select (1,2,(3,4)) IN ((3,2,(3,4)), (1,2,(3,4)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case830" value="select (1,2,3) IN ((3,2,3), (1,2,3), (1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case831" value="select (NOT FALSE) AND FALSE, NOT (FALSE AND FALSE), NOT FALSE AND FALSE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case832" value="select (NOT FALSE) OR TRUE, NOT (FALSE OR TRUE), NOT FALSE OR TRUE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case833" value="select (NOT FALSE) XOR FALSE, NOT (FALSE XOR FALSE), NOT FALSE XOR FALSE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case834" value="select (NOT NULL) IS FALSE, NOT (NULL IS FALSE), NOT NULL IS FALSE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case835" value="select (NOT NULL) IS NOT FALSE, NOT (NULL IS NOT FALSE), NOT NULL IS NOT FALSE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case836" value="select (NOT NULL) IS NOT TRUE, NOT (NULL IS NOT TRUE), NOT NULL IS NOT TRUE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case837" value="select (NOT NULL) IS TRUE, NOT (NULL IS TRUE), NOT NULL IS TRUE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case838" value="select (NOT TRUE) IS NOT NULL, NOT (TRUE IS NOT NULL), NOT TRUE IS NOT NULL" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case839" value="select (NOT TRUE) IS NOT UNKNOWN, NOT (TRUE IS NOT UNKNOWN), NOT TRUE IS NOT UNKNOWN" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case840" value="select (NOT TRUE) IS NULL, NOT (TRUE IS NULL), NOT TRUE IS NULL" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case841" value="select (NOT TRUE) IS UNKNOWN, NOT (TRUE IS UNKNOWN), NOT TRUE IS UNKNOWN" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case842" value="select (ST_aswkb(cast(st_union(multipoint( point(8,6), point(1,-17679), point(-9,-9)), linestring(point(91,12), point(-77,49), point(53,-81)))as char(18)))) in  ('1','2')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case844" value="select (case 1/0 when &quot;a&quot; then &quot;true&quot; END) | 0" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case846" value="select * from information_schema.views where TABLE_SCHEMA != 'sys' and TABLE_NAME rlike &quot;v[0-4]{1}$&quot; order by table_name" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case847" value="select * from t1 as t0, lateral (select dt3.* from t1, lateral (select * from (select * from (select t0.a from t2) as dt limit 1) dt2) dt3) dt4" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case851" value="select * from t1 where str &lt;&gt; default(str)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case853" value="select * from t1, lateral (select * from (select 42) t1, (select t1.a) dt2) dt3" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case855" value="select * from t1, lateral (select t1.a) as dt, t2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case856" value="select * from t1, lateral (select t3.b from t3 where t3.a=t1.a) dt where dt.b=t1.a+9" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case857" value="select * from t1, lateral (with qn as (select t1.a) select (select max(a) from qn)) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case860" value="select * from t2, t1, lateral (select t1.a) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case861" value="select * from t2, t1, lateral (select t1.a) as dt, lateral (select t1.a+1) as dt2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case862" value="select * from t2, t1, lateral (select t1.a) as dt, lateral (select t2.a) as dt2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case864" value="select * from t3, lateral (select t3.a+1) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case866" value="select *, mysqltest1.bug17199() from t3" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case867" value="select /*+ no_merge() */ * from t1 as t0, lateral (select dt3.* from t1, lateral (select * from (select * from (select t0.a from t2) as dt limit 1) dt2) dt3) dt4" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case868" value="select 0.1 in (1.0, 1.2, 1.1, a, 1.4, 0.5) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case869" value="select 0.5 IN (1.0, 1.2, NULL, 1.4, 0.5)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case870" value="select 1 IN (1.11, 1.2, 1.1, 1.4, 1, 0.5)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case871" value="select 1 IN (1.11, 1.2, 1.1, 1.4, NULL, 0.5)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case873" value="select 1.1 IN (1.0, 1.2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case874" value="select 1.1 IN (1.0, 1.2, 1.1, 1.4, 0.5)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case875" value="select 1.1 IN (1.0, 1.2, NULL, 1.4, 0.5)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case877" value="select 2 between 1 and 3, &quot;monty&quot; between &quot;max&quot; and &quot;my&quot;,2=2 and &quot;monty&quot; between &quot;max&quot; and &quot;my&quot; and 3=3" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case878" value="select 2 between null and 1,2 between 3 AND NULL,NULL between 1 and 2,2 between NULL and 3, 2 between 1 AND null" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case880" value="select 5 between 0 and 10 between 0 and 1,(5 between 0 and 10) between 0 and 1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case881" value="select 5'abcd" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case882" value="select @1, @2" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case883" value="select @``" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case884" value="select @check, @t4_bi_called, @t4_bu_called" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case885" value="select @g1 between @g1 and ST_GeomFromText('POLYGON((30 30,40 40,50 50,30 50,30 40,30 30))')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case886" value="select @rownum := @rownum + 1 as `row`, @rank := IF(@prev_score!=a, @rownum, @rank) as `rank`, @prev_score := a as score from t1 order by score desc" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case887" value="select @test_int,@test_double,@test_string,@test_string2,@select" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case889" value="select HEX(0x19c9bbcce9e0a88f5212572b0c5b9e6d0 | _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2), HEX(0x19c9bbcce9e0a88f5212572b0c5b9e6d0 ^ _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2), HEX(0x19c9bbcce9e0a88f5212572b0c5b9e6d0 &amp; _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2), HEX(~ _binary 0x19c9bbcce9e0a88f5212572b0c5b9e6d0), HEX(~ _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case894" value="select NOT NOT TRUE, NOT NOT NOT FALSE" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case896" value="select POSITION(_latin1'B' COLLATE latin1_general_ci IN _latin1'abcd' COLLATE latin1_bin)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case898" value="select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case899" value="select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case900" value="select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case901" value="select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case903" value="select UpdateXML('&lt;a&gt;a&lt;/a&gt;',repeat('a b ',1000),'')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case905" value="select _latin1'B' COLLATE latin1_general_ci in (_latin1'a',_latin1'b' COLLATE latin1_bin)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case907" value="select _latin1'B' between _latin1'a' and _latin1'c' collate latin1_bin" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case909" value="select _latin1'B' between _latin1'a' collate latin1_bin and _latin1'c'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case911" value="select _latin1'B' collate latin1_bin between _latin1'a' and _latin1'c'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case913" value="select _latin1'B' collate latin1_general_ci between _latin1'a' collate latin1_bin and _latin1'b'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case915" value="select _latin1'B' in (_latin1'a',_latin1'b' collate latin1_bin)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case917" value="select _latin1'B' in (_latin1'a',_latin2'b')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case919" value="select _latin2'B' between _latin1'a' and _latin1'b'" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case923" value="select a, not(not(a)) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case925" value="select abs(3 &quot;three&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case926" value="select abs(3 AS &quot;three&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case927" value="select abs(3 AS three)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case928" value="select abs(3 three)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case929" value="select abs(myfunc_double(3 AS three))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case930" value="select abs(myfunc_double(3) AS wrong)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case931" value="select atan(10 &quot;p1&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case932" value="select atan(10 &quot;p1&quot;, 20)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case933" value="select atan(10 AS &quot;p1&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case934" value="select atan(10 AS &quot;p1&quot;, 20)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case935" value="select atan(10 AS p1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case936" value="select atan(10 AS p1, 20 AS p2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case937" value="select atan(10 AS p1, 20)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case938" value="select atan(10 p1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case939" value="select atan(10 p1, 20)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case940" value="select atan(10, 20 &quot;p2&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case941" value="select atan(10, 20 AS &quot;p2&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case942" value="select atan(10, 20 AS p2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case943" value="select atan(10, 20 p2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case945" value="select c cb20 from t1 where c=repeat('b',20)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case946" value="select c, v2.table_name from v1 right join information_schema.TABLES v2 on (v1.c=v2.table_name) where v1.c rlike &quot;t[1-5]{1}$&quot; order by c" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case947" value="select c,table_name from v1 inner join information_schema.TABLES v2 on (v1.c=v2.table_name) where v1.c rlike &quot;t[1-5]{1}$&quot; order by c" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case948" value="select c,table_name from v1 left join information_schema.TABLES v2 on (v1.c=v2.table_name) where v1.c rlike &quot;t[1-5]{1}$&quot; order by c" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case949" value="select case 'str' when 'STR' then 'str' when null then 'null' end as c01, case 'str' when null then 'null' when 'STR' then 'str' end as c02, field(null, 'str1', 'str2') as c03, field('str1','STR1', null) as c04, field('str1', null, 'STR1') as c05, 'string' in ('STRING', null) as c08, 'string' in (null, 'STRING') as c09" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case951" value="select case 1/0 when &quot;a&quot; then &quot;true&quot; else &quot;false&quot; END" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case953" value="select collation(repeat(_latin2'a',10)), coercibility(repeat(_latin2'a',10))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case957" value="select concat(&quot;a&quot;,NULL),replace(NULL,&quot;a&quot;,&quot;b&quot;),replace(&quot;string&quot;,&quot;i&quot;,NULL),replace(&quot;string&quot;,NULL,&quot;i&quot;),insert(&quot;abc&quot;,1,1,NULL),left(NULL,1)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case959" value="select conv(255 &quot;p1&quot;, 10, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case960" value="select conv(255 AS &quot;p1&quot;, 10, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case961" value="select conv(255 AS p1, 10 AS p2, 16 AS p3)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case962" value="select conv(255 AS p1, 10, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case963" value="select conv(255 p1, 10, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case964" value="select conv(255, 10 &quot;p2&quot;, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case965" value="select conv(255, 10 AS &quot;p2&quot;, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case966" value="select conv(255, 10 AS p2, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case967" value="select conv(255, 10 p2, 16)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case968" value="select conv(255, 10, 16 &quot;p3&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case969" value="select conv(255, 10, 16 AS &quot;p3&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case970" value="select conv(255, 10, 16 AS p3)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case971" value="select conv(255, 10, 16 p3)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case973" value="select db1_secret.db()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case974" value="select db1_secret.db()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case975" value="select db1_secret.db()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case976" value="select db1_secret.db()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case978" value="select distinct concat(c1, repeat('xx', 250)) as cc from t2 order by 1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case982" value="select extract(DAY_MICROSECOND FROM &quot;1999-01-02 10:11:12.000123&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case984" value="select extract(DAY_SECOND FROM &quot;225 10:11:12&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case986" value="select extract(HOUR_MINUTE FROM &quot;10:11:12&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case988" value="select extract(MINUTE_MICROSECOND FROM &quot;1999-01-02 10:11:12.000123&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case990" value="select extract(SECOND_MICROSECOND FROM &quot;1999-01-02 10:11:12.000123&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case992" value="select format(pi(), @dec)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case993" value="select group_concat('3') over ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case995" value="select i from t1 where a=repeat(_utf8 'a',200)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case997" value="select i from t1 where b=repeat(_utf8 'b',310)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case998" value="select id, not (a=1 is false) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case999" value="select id, not (a=1 is true) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1000" value="select id, not (a=1 is unknown) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1002" value="select insert('hello', -1, -1, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1004" value="select insert('hello', -18446744073709551615, -18446744073709551615, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1006" value="select insert('hello', -18446744073709551616, -18446744073709551616, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1008" value="select insert('hello', -18446744073709551617, -18446744073709551617, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1010" value="select insert('hello', -4294967295, -4294967295, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1012" value="select insert('hello', -4294967296, -4294967296, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1014" value="select insert('hello', -4294967297, -4294967297, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1016" value="select insert('hello', 1, -1, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1018" value="select insert('hello', 1, -18446744073709551616, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1020" value="select insert('hello', 1, -4294967295, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1022" value="select insert('hello', 1, -4294967297, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1024" value="select insert('hello', 1, 18446744073709551616, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1026" value="select insert('hello', 1, 4294967295, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1028" value="select insert('hello', 1, 4294967297, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1030" value="select insert('hello', 18446744073709551615, 18446744073709551615, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1032" value="select insert('hello', 18446744073709551616, 18446744073709551616, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1034" value="select insert('hello', 18446744073709551617, 18446744073709551617, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1036" value="select insert('hello', 4294967295, 4294967295, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1038" value="select insert('hello', 4294967296, 4294967296, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1040" value="select insert('hello', 4294967297, 4294967297, 'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1042" value="select insert('txs',2,null,'hi'),insert('txs',2,1,null)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1044" value="select insert(_utf16 0x006100620063,1,2,_utf16 0x006400650066)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1046" value="select insert(_utf32 0x000000610000006200000063,1,2,_utf32 0x000000640000006500000066)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1048" value="select insert(null,2,1,'hi'),insert('txs',null,1,'hi')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1049" value="select instr(&quot;foobar&quot; &quot;p1&quot;, &quot;bar&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1050" value="select instr(&quot;foobar&quot; AS &quot;p1&quot;, &quot;bar&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1051" value="select instr(&quot;foobar&quot; AS p1, &quot;bar&quot; AS p2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1052" value="select instr(&quot;foobar&quot; AS p1, &quot;bar&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1053" value="select instr(&quot;foobar&quot; p1, &quot;bar&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1054" value="select instr(&quot;foobar&quot;, &quot;bar&quot; &quot;p2&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1055" value="select instr(&quot;foobar&quot;, &quot;bar&quot; AS &quot;p2&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1056" value="select instr(&quot;foobar&quot;, &quot;bar&quot; AS p2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1057" value="select instr(&quot;foobar&quot;, &quot;bar&quot; p2)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1058" value="select instr(&quot;foobar&quot;, @bar &quot;p2&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1059" value="select instr(@foobar &quot;p1&quot;, &quot;bar&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1061" value="select length(repeat(&quot;&quot;,1024*1024*1024)) as a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1063" value="select length(repeat(&quot;1&quot;,1024*1024*1024)) as a" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1065" value="select length(repeat(&quot;a&quot;,100000000)),length(repeat(&quot;a&quot;,1000*64))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1067" value="select length(repeat('a',2000))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1069" value="select mail_id,  if(folder.f_description!='', folder.f_description, folder.f_name) as folder_name,  date, address_id, phrase, address,  subject from folder, (select  mail.mail_id as mail_id,  date_format(mail.h_date, '%b %e, %Y %h:%i') as date,  mail.folder_id,  sender.address_id as address_id,  sender.phrase as phrase, sender.address as address,    mail.h_subject as subject from    mail left join mxa as mxa_sender on mail.mail_id=mxa_sender.mail_id and mxa_sender.type='from' left join address as sender on mxa_sender.address_id=sender.address_id  mxa as mxa_recipient,   address as recipient, where 1     and mail.mail_id=mxa_recipient.mail_id   and mxa_recipient.address_id=recipient.address_id   and mxa_recipient.type='to'  and  match(sender.phrase, sender.address, sender.comment) against ('jeremy' in boolean mode)   and  match(recipient.phrase, recipient.address, recipient.comment) against ('monty' in boolean mode) order by mail.h_date desc limit 0, 25 ) as query where query.folder_id=folder.folder_id" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1070" value="select myfunc_double(3 AS three)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1071" value="select myfunc_double(abs(3 AS wrong))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1072" value="select myfunc_double(abs(3) AS named_param)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1074" value="select mysqltest1.bug18444(i) from t3" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1075" value="select mysqltest_db.f1()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1076" value="select mysqltest_db.f_does_not_exist()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1078" value="select position((&quot;1&quot; in (1,2,3)) in &quot;01&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1080" value="select repeat(&quot;a&quot;,0),repeat(&quot;ab&quot;,5+5),repeat(&quot;ab&quot;,-1),reverse(NULL)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1082" value="select repeat('a',2000)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1084" value="select repeat('hello', -18446744073709551615)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1086" value="select repeat('hello', -18446744073709551617)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1088" value="select repeat('hello', -4294967296)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1090" value="select repeat('hello', 18446744073709551615)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1092" value="select repeat('hello', 18446744073709551617)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1094" value="select repeat('hello', 4294967296)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1096" value="select repeat('monty',5),concat('*',space(5),'*')" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1097" value="select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1098" value="select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1099" value="select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a'))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1100" value="select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1101" value="select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1102" value="select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1103" value="select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1104" value="select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1105" value="select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,4))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1106" value="select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1107" value="select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1108" value="select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5)))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1109" value="select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1110" value="select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3))" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1112" value="select straight_join * from t1, t2, lateral (select t1.a) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1121" value="select sum(all a),count(all a),avg(all a),std(all a),variance(all a),bit_or(all a),bit_and(all a),min(all a),max(all a),min(all c),max(all c) from t1" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1122" value="select sum(col1) as co12 from t1 group by col2 having col2 10" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1123" value="select t1.*, dt.c from t t1 cross join lateral (select count(*) as c from t t2 left join t t3 on t3.a&gt;t2.a-t1.a) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1124" value="select t1.*, dt.c from t t1 join lateral (select count(*) as c from t t2 left join t t3 on t3.a&gt;t2.a-t1.a) as dt on true" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1125" value="select t1.*, dt.c from t t1, lateral (select count(*) as c from t t2 left join t t3 on t3.a&gt;t2.a-t1.a) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1127" value="select t1.a, dt.a from t1, lateral (select t1.a+t2.a as a from t2) dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1129" value="select t1.a, f from t1, lateral (select max(t1.a) as f) as dt" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1130" value="select table_name from information_schema.TABLES where table_schema = &quot;mysqltest&quot; and table_name rlike &quot;t[1-5]{1}$&quot; order by table_name" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1131" value="select test.a(), test.st_x(), test.st_y()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1132" value="select test.current_user(), test.current_user ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1133" value="select test.current_user(), test.current_user ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1134" value="select test.database(), test.database ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1135" value="select test.database(), test.database ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1136" value="select test.md5(&quot;aaa&quot;), test.md5 (&quot;aaa&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1137" value="select test.md5(&quot;aaa&quot;), test.md5 (&quot;aaa&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1138" value="select test.metaphon(&quot;Hello&quot;)" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1139" value="select test.pi(), test.pi ()" db-types="MySQL"/>
    <sql-case id="select_by_mysql_source_test_case1140" value="select test.pi(), test.pi ()" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case2" value="INSERT IGNORE INTO t1 SELECT 101, REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case4" value="INSERT IGNORE INTO t3 VALUES( REPEAT( 'a', 65536 ), 3 )" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case5" value="INSERT INTO B VALUES  ('at', repeat('a',1000), 'the', -1622540288, 'as', repeat('a',1000), 'want', 1810890752, NULL, 'v', 'just')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case6" value="INSERT INTO D VALUES (39,40,4,repeat('  X', 42)), (43,56,4,repeat('  X', 42)), (47,12,4,repeat('  X', 42)), (71,28,4,repeat('  X', 42)), (76,54,4,repeat('  X', 42)), (83,45,4,repeat('  X', 42)), (105,53,12,NULL)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case7" value="INSERT INTO N VALUES (1,3,repeat('a',1000)),(0,4,'tell'),(7,6,'o'),(6,7,'g'),(8,8,'can'), (9,15,repeat('a',1020)),(4,16,repeat('a',1020)),(6,18,'his'),(NULL,19,'going'), (7,22,'mean'),(8,23,'here')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case8" value="INSERT INTO `proc` VALUES ('test','downgrade_alter_proc','PROCEDURE', 'downgrade_alter_proc', 'SQL','CONTAINS_SQL','NO','INVOKER','','', 'BEGIN\n      SELECT c1, English, French FROM t1 ' 'JOIN t2 ON t1.c3 = t2.col2;\n     END', 'root@localhost','1988-04-25 20:45:00', '1988-04-25 20:45:00','NO_ZERO_DATE','','latin1', 'latin1_swedish_ci','latin1_swedish_ci', 'BEGIN\n      SELECT c1, English, French FROM t1 ' 'JOIN t2 ON t1.c3 = t2.col2;\n     END'), ('test','my_test_func','FUNCTION','myfunc','SQL', 'CONTAINS_SQL','NO','DEFINER', '', 'varchar(20) CHARSET latin1', 'BEGIN\n  RETURN \'å\';\nEND', 'root@localhost','2017-03-08 09:07:36', '2017-03-08 09:07:36', 'ONLY_FULL_GROUP_BY,' 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,' 'ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,' 'NO_ENGINE_SUBSTITUTION','','latin1','latin1_swedish_ci', 'latin1_swedish_ci','BEGIN\n  RETURN \'Ã¥\';\nEND')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case9" value="INSERT INTO `t``\&quot;&quot;e` VALUES (0), (2), (6), (10), (14), (18), (22)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case11" value="INSERT INTO all_types VALUES ( NULL,     # BOOLEAN NULL,     # BIT NULL,     # TINYINT NULL,     # SMALLINT NULL,     # MEDIUMINT NULL,     # INTEGER NULL,     # BIGINT NULL,     # TINYINT_UNSIGNED NULL,     # SMALLINT_UNSIGNED NULL,     # MEDIUMINT_UNSIGNED NULL,     # INTEGER_UNSIGNED NULL,     # BIGINT_UNSIGNED NULL,     # FLOAT NULL,     # DOUBLE NULL,     # DECIMAL(65, 2) NULL,     # DATE NULL,     # TIME NULL,     # YEAR NULL,     # DATETIME NULL,     # TIMESTAMP NULL,     # CHAR NULL,     # VARCHAR NULL,     # TINYTEXT NULL,     # TEXT NULL,     # MEDIUMTEXT NULL,     # LONGTEXT NULL,     # BINARY NULL,     # VARBINARY NULL,     # TINYBLOB NULL,     # BLOB NULL,     # MEDIUMBLOB NULL,     # LONGBLOB NULL,     # ENUM NULL);    # SET INSERT INTO all_types VALUES ( FALSE,                                                               # BOOLEAN b'0000000000000000000000000000000000000000000000000000000000000000', # BIT -128,                                                                # TINYINT -32768,                                                              # SMALLINT -8388608,                                                            # MEDIUMINT -2147483648,                                                         # INTEGER -9223372036854775808,                                                # BIGINT 0,                                                                   # TINYINT_UNSIGNED 0,                                                                   # SMALLINT_UNSIGNED 0,                                                                   # MEDIUMINT_UNSIGNED 0,                                                                   # INTEGER_UNSIGNED 0,                                                                   # BIGINT_UNSIGNED -3.402823466E+38,                                                    # FLOAT -1.7976931348623157E+308,                                            # DOUBLE -999999999999999999999999999999999999999999999999999999999999999.99, # DECIMAL(65, 2) '1000-01-01',                                                        # DATE '-838:59:59.000000',                                                 # TIME 1901,                                                                # YEAR '1000-01-01 00:00:00',                                               # DATETIME '1970-01-02 00:00:01',                                               # TIMESTAMP '',                                                                  # CHAR '',                                                                  # VARCHAR '',                                                                  # TINYTEXT '',                                                                  # TEXT '',                                                                  # MEDIUMTEXT '',                                                                  # LONGTEXT '',                                                                  # BINARY '',                                                                  # VARBINARY '',                                                                  # TINYBLOB '',                                                                  # BLOB '',                                                                  # MEDIUMBLOB '',                                                                  # LONGBLOB 'red',                                                               # ENUM '');                                                                 # SET INSERT INTO all_types VALUES ( TRUE,                                                                # BOOLEAN b'1111111111111111111111111111111111111111111111111111111111111111', # BIT 127,                                                                 # TINYINT 32767,                                                               # SMALLINT 8388607,                                                             # MEDIUMINT 2147483647,                                                          # INTEGER 9223372036854775807,                                                 # BIGINT 255,                                                                 # TINYINT_UNSIGNED 65535,                                                               # SMALLINT_UNSIGNED 16777215,                                                            # MEDIUMINT_UNSIGNED 4294967295,                                                          # INTEGER_UNSIGNED 18446744073709551615,                                                # BIGINT_UNSIGNED 3.402823466E+38,                                                     # FLOAT 1.7976931348623157E+308,                                             # DOUBLE 999999999999999999999999999999999999999999999999999999999999999.99,  # DECIMAL(65, 2) '9999-12-31',                                                        # DATE '838:59:59.000000',                                                  # TIME 2155,                                                                # YEAR '9999-12-31 23:59:59',                                               # DATETIME '2038-01-19 03:14:07',                                               # TIMESTAMP 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # CHAR 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # VARCHAR 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # TINYTEXT 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # TEXT 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # MEDIUMTEXT 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # LONGTEXT 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # BINARY 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # VARBINARY 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # TINYBLOB 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # BLOB 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # MEDIUMBLOB 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # LONGBLOB 'purple',                                                            # ENUM 'three');                                                            # SET SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case13" value="INSERT INTO dd_check_table(t) SELECT CONCAT(id, '-', name, '-', IFNULL(options, 'NULL'), '-', IFNULL(INSERT(se_private_data, INSTR(se_private_data, 'server_version'), 20, 'server_version=x'), 'NULL'), '-', comment, '-', engine) FROM mysql.tablespaces WHERE name = 'mysql'" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case14" value="INSERT INTO t (c) VALUES (REPEAT('1',65537))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case15" value="INSERT INTO t (c) VALUES (REPEAT('2',65536))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case16" value="INSERT INTO t (c) VALUES (REPEAT('3',65535))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case17" value="INSERT INTO t SELECT * FROM (VALUES ROW(1, 11), ROW(2, 20)) AS n(a, b) ON DUPLICATE KEY UPDATE b= n.b" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case18" value="INSERT INTO t VALUES (REPEAT('a', 128)), (REPEAT('b', 128)), (REPEAT('c', 128)), (REPEAT('d', 128))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case19" value="INSERT INTO t VALUES (REPEAT('a', 128)), (REPEAT('b', 128)), (REPEAT('c', 128)), (REPEAT('d', 128))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case20" value="INSERT INTO t VALUES ROW(DEFAULT(a) + 1, 30)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case21" value="INSERT INTO t VALUES ROW(DEFAULT(a), 20)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case23" value="INSERT INTO t VALUES(1, REPEAT('2', 257)), (1, REPEAT('1', 257))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case25" value="INSERT INTO t VALUES(1, REPEAT('abs',1000))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case27" value="INSERT INTO t VALUES(3, REPEAT('ajj',1000))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case29" value="INSERT INTO t VALUES(REPEAT(x'0a',1000))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case30" value="INSERT INTO t0 SET a=1, b=20 AS n ON DUPLICATE KEY UPDATE b= n.b" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case32" value="INSERT INTO t1 (data) VALUES (repeat('b',16*1024*1024-1024))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case34" value="INSERT INTO t1 SELECT 101, REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case35" value="INSERT INTO t1 SELECT 102, REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case36" value="INSERT INTO t1 SELECT CONCAT(REPEAT('1', 1024*1024 - 27), &quot;\'\r dummydb dummyhost&quot;)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case38" value="INSERT INTO t1 SELECT ST_GeomFromText(CONCAT('GEOMETRYCOLLECTION(POINT(1 1)', REPEAT(',POINT(1 1)', 100), ')'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case39" value="INSERT INTO t1 SELECT ST_GeomFromText(CONCAT('GEOMETRYCOLLECTION(POINT(1 1)', REPEAT(',POINT(1 1)', 100), ')')) FROM t1" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case40" value="INSERT INTO t1 SELECT ST_GeomFromText(CONCAT('GEOMETRYCOLLECTION(POINT(1 1)', REPEAT(',POINT(1 1)', 100), ')')) FROM t1" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case41" value="INSERT INTO t1 SET b='11', a=0 AS n ON DUPLICATE KEY UPDATE b= n.a, a= n.b" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case42" value="INSERT INTO t1 SET b='11', a=0 AS n ON DUPLICATE KEY UPDATE b= n.a, a= n.b" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case44" value="INSERT INTO t1 SET b=repeat('a',600)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case46" value="INSERT INTO t1 SET j = 1, i = DEFAULT(i)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case47" value="INSERT INTO t1 SET j = 1, i = DEFAULT(i)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case49" value="INSERT INTO t1 VALUES ( 2, REPEAT('-', 1048576) )" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case50" value="INSERT INTO t1 VALUES ( UNHEX('0000000001030000000100000002000000000000000000000000000000000000000000' '00000000F03F0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case51" value="INSERT INTO t1 VALUES ( UNHEX('0000000001030000000100000003000000000000000000000000000000000000000000' '00000000F03F000000000000000000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case52" value="INSERT INTO t1 VALUES ( UNHEX('0000000001040000000100000001020000000200000000000000000000000000000000' '000000000000000000F03F000000000000F03F'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case53" value="INSERT INTO t1 VALUES ( UNHEX('0000000001070000000100000001040000000100000001020000000200000000000000' '000000000000000000000000000000000000F03F000000000000F03F'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case54" value="INSERT INTO t1 VALUES ( UNHEX('0000000001070000000100000001050000000100000001010000000000000000000000' '0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case55" value="INSERT INTO t1 VALUES ( UNHEX('0000000001070000000100000001060000000100000001010000000000000000000000' '0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case56" value="INSERT INTO t1 VALUES ( UNHEX('00000000010F0000000100000001030000000100000004000000000000000000000000' '00000000000000000000000000F03F0000000000000000000000000000F03F00000000' '0000F03F00000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case57" value="INSERT INTO t1 VALUES ( UNHEX('0000000001100000000100000001030000000100000004000000000000000000000000' '00000000000000000000000000F03F0000000000000000000000000000F03F00000000' '0000F03F00000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case58" value="INSERT INTO t1 VALUES ( UNHEX('0000000001110000000100000004000000000000000000000000000000000000000000' '00000000F03F0000000000000000000000000000F03F000000000000F03F0000000000' '0000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case59" value="INSERT INTO t1 VALUES ( UNHEX('0000000001B90B00000000000000000000000000000000000000000000000000000000' '0000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case60" value="INSERT INTO t1 VALUES ( UNHEX('0000000001BA0B00000200000000000000000000000000000000000000000000000000' '00000000000000000000000000000000F03F000000000000F03F000000000000000000' '00000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case61" value="INSERT INTO t1 VALUES ( UNHEX('0000000001BB0B00000100000004000000000000000000000000000000000000000000' '0000000000000000000000000000000000000000F03F00000000000000000000000000' '0000000000000000000000000000000000F03F000000000000F03F0000000000000000' '0000000000000000000000000000000000000000000000000000000000000000000000' '0000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case62" value="INSERT INTO t1 VALUES ( UNHEX('0000000001BC0B00000100000001B90B00000000000000000000000000000000000000' '0000000000000000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case63" value="INSERT INTO t1 VALUES ( UNHEX('0000000001BD0B00000100000001BA0B00000200000000000000000000000000000000' '00000000000000000000000000000000000000000000000000F03F000000000000F03F' '00000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case64" value="INSERT INTO t1 VALUES ( UNHEX('0000000001BE0B00000100000001BB0B00000100000004000000000000000000000000' '0000000000000000000000000000000000000000000000000000000000F03F00000000' '0000000000000000000000000000000000000000000000000000F03F000000000000F0' '3F00000000000000000000000000000000000000000000000000000000000000000000' '0000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case65" value="INSERT INTO t1 VALUES ( UNHEX('0000000001BF0B00000100000001B90B00000000000000000000000000000000000000' '0000000000000000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case66" value="INSERT INTO t1 VALUES ( UNHEX('0000000001C70B00000100000001BB0B00000100000004000000000000000000000000' '0000000000000000000000000000000000000000000000000000000000F03F00000000' '0000000000000000000000000000000000000000000000000000F03F000000000000F0' '3F00000000000000000000000000000000000000000000000000000000000000000000' '0000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case67" value="INSERT INTO t1 VALUES ( UNHEX('0000000001C80B00000100000001BB0B00000100000004000000000000000000000000' '0000000000000000000000000000000000000000000000000000000000F03F00000000' '0000000000000000000000000000000000000000000000000000F03F000000000000F0' '3F00000000000000000000000000000000000000000000000000000000000000000000' '0000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case68" value="INSERT INTO t1 VALUES ( UNHEX('0000000001C90B00000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case69" value="INSERT INTO t1 VALUES ( UNHEX('0000000001D20700000200000000000000000000000000000000000000000000000000' '0000000000000000F03F000000000000F03F0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case70" value="INSERT INTO t1 VALUES ( UNHEX('0000000001D30700000100000004000000000000000000000000000000000000000000' '000000000000000000000000F03F000000000000000000000000000000000000000000' '00F03F000000000000F03F000000000000000000000000000000000000000000000000' '0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case71" value="INSERT INTO t1 VALUES ( UNHEX('0000000001D40700000100000001E90300000000000000000000000000000000000000' '00000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case72" value="INSERT INTO t1 VALUES ( UNHEX('0000000001D5070000010000000000000001EA03000002000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000F03F00000000' '00000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case73" value="INSERT INTO t1 VALUES ( UNHEX('0000000001D60700000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case74" value="INSERT INTO t1 VALUES ( UNHEX('0000000001D70700000100000001E90300000000000000000000000000000000000000' '00000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case75" value="INSERT INTO t1 VALUES ( UNHEX('0000000001DF0700000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case76" value="INSERT INTO t1 VALUES ( UNHEX('0000000001E00700000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case77" value="INSERT INTO t1 VALUES ( UNHEX('0000000001E10700000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case78" value="INSERT INTO t1 VALUES ( UNHEX('0000000001EA0300000200000000000000000000000000000000000000000000000000' '0000000000000000F03F000000000000F03F0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case79" value="INSERT INTO t1 VALUES ( UNHEX('0000000001EB0300000100000004000000000000000000000000000000000000000000' '000000000000000000000000F03F000000000000000000000000000000000000000000' '00F03F000000000000F03F000000000000000000000000000000000000000000000000' '0000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case80" value="INSERT INTO t1 VALUES ( UNHEX('0000000001EC0300000100000001E90300000000000000000000000000000000000000' '00000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case81" value="INSERT INTO t1 VALUES ( UNHEX('0000000001ED030000010000000000000001EA03000002000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000F03F00000000' '00000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case82" value="INSERT INTO t1 VALUES ( UNHEX('0000000001EE0300000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case83" value="INSERT INTO t1 VALUES ( UNHEX('0000000001EF0300000100000001E90300000000000000000000000000000000000000' '00000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case84" value="INSERT INTO t1 VALUES ( UNHEX('0000000001F70300000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case85" value="INSERT INTO t1 VALUES ( UNHEX('0000000001F80300000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case86" value="INSERT INTO t1 VALUES ( UNHEX('0000000001F90300000100000001EB0300000100000004000000000000000000000000' '000000000000000000000000000000000000000000F03F000000000000000000000000' '00000000000000000000F03F000000000000F03F000000000000000000000000000000' '0000000000000000000000000000000000'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case87" value="INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1), ( repeat( 'b', 10 ), 2)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case88" value="INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1), ( repeat( 'b', 10 ), 2)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case89" value="INSERT INTO t1 VALUES ( repeat( 'a', 16384 ) )" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case90" value="INSERT INTO t1 VALUES (1, REPEAT(&quot;a&quot;, 8192))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case91" value="INSERT INTO t1 VALUES (1, REPEAT('a', 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case92" value="INSERT INTO t1 VALUES (1, REPEAT('a',59), REPEAT('a',512))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case93" value="INSERT INTO t1 VALUES (1,CONCAT(REPEAT('_', 250), &quot;qq&quot;)), (1,CONCAT(REPEAT('_', 250), &quot;zz&quot;)), (1,CONCAT(REPEAT('_', 250), &quot;aa&quot;)), (1,CONCAT(REPEAT('_', 250), &quot;ff&quot;))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case95" value="INSERT INTO t1 VALUES (10, REPEAT('a', CEIL(RAND(10) * 300))), (11, REPEAT('b', CEIL(RAND() * 300))), (12, REPEAT('c', CEIL(RAND() * 300))), (13, REPEAT('d', CEIL(RAND() * 300))), (14, REPEAT('e', CEIL(RAND() * 300))), (15, REPEAT('f', CEIL(RAND() * 300))), (16, REPEAT('g', CEIL(RAND() * 300))), (17, REPEAT('h', CEIL(RAND() * 300))), (18, REPEAT('i', CEIL(RAND() * 300))), (19, REPEAT('j', CEIL(RAND() * 300))), (20, REPEAT('k', CEIL(RAND() * 300))), (21, REPEAT('l', CEIL(RAND() * 300))), (22, REPEAT('m', CEIL(RAND() * 300))), (23, REPEAT('n', CEIL(RAND() * 300))), (24, REPEAT('o', CEIL(RAND() * 300))), (25, REPEAT('p', CEIL(RAND() * 300))), (26, REPEAT('q', CEIL(RAND() * 300))), (27, REPEAT('r', CEIL(RAND() * 300))), (28, REPEAT('s', CEIL(RAND() * 300))), (29, REPEAT('t', CEIL(RAND() * 300))), (30, REPEAT('u', CEIL(RAND() * 300))), (31, REPEAT('v', CEIL(RAND() * 300))), (32, REPEAT('w', CEIL(RAND() * 300))), (33, REPEAT('x', CEIL(RAND() * 300))), (34, REPEAT('y', CEIL(RAND() * 300))), (35, REPEAT('z', CEIL(RAND() * 300)))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case96" value="INSERT INTO t1 VALUES (101, REPEAT('ab', @max_allowed_packet))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case97" value="INSERT INTO t1 VALUES (101, REPEAT('ab', @max_allowed_packet))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case98" value="INSERT INTO t1 VALUES (2, REPEAT(&quot;b&quot;, 8192))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case99" value="INSERT INTO t1 VALUES (2, REPEAT('a',59), REPEAT('a',512))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case100" value="INSERT INTO t1 VALUES (3, REPEAT(&quot;c&quot;, 8192))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case101" value="INSERT INTO t1 VALUES (DEFAULT(i))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case102" value="INSERT INTO t1 VALUES (DEFAULT(i))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case104" value="INSERT INTO t1 VALUES (REPEAT('1',200))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case106" value="INSERT INTO t1 VALUES (REPEAT('A', 50000)), (REPEAT('A', 50000))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case108" value="INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 262144))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case110" value="INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 4194304))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case112" value="INSERT INTO t1 VALUES (REPEAT('a', 500000), 0), (REPEAT('b', 500000), 1), (REPEAT('c', 500000), 2)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case113" value="INSERT INTO t1 VALUES (REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), 1, REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case114" value="INSERT INTO t1 VALUES (REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), 2, REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case115" value="INSERT INTO t1 VALUES (REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), 3, REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case116" value="INSERT INTO t1 VALUES (REPEAT(0x1125,200000), REPEAT(0x1125,200000)), ('', ''), ('', '')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case117" value="INSERT INTO t1 VALUES (REPEAT(0x1125,200000), REPEAT(0x1125,200000)), ('', ''), ('', '')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case119" value="INSERT INTO t1 VALUES (REPEAT(_ucs2 0x2020, 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case121" value="INSERT INTO t1 VALUES (b'')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case122" value="INSERT INTO t1 VALUES (b'', b'')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case123" value="INSERT INTO t1 VALUES (concat(repeat('MySQL',100),'1'),repeat('0',257))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case124" value="INSERT INTO t1 VALUES (concat(repeat('MySQL',100),'2'),repeat('0',257))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case125" value="INSERT INTO t1 VALUES (concat(repeat('MySQL',100),'3'),repeat('0',257))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case127" value="INSERT INTO t1 VALUES (repeat('1', 1300),'one'), (repeat('1', 1300),'two')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case129" value="INSERT INTO t1 VALUES(1,repeat('a',1000)),(2,repeat('def',600))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case131" value="INSERT INTO t1 VALUES(REPEAT(&quot;a&quot;,128), 'b')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case133" value="INSERT INTO t1 VALUES(REPEAT(_utf8 x'e0ae85',43), 'b')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case135" value="INSERT INTO t1 VALUES(REPEAT(_utf8 x'e0ae85',43), 'b')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case137" value="INSERT INTO t1 VALUES(default(a), default(b))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case138" value="INSERT INTO t1 VALUES(default(a),default(b), default(c), default(d), default(e), default(f))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case139" value="INSERT INTO t1 VALUES(default(col1),default(col2))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case141" value="INSERT INTO t1 values(AES_ENCRYPT(@ENCSTR, @KEYS, @IV))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case142" value="INSERT INTO t2 (a, b) VALUES (REPEAT('A', 512), REPEAT('B', 512))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case143" value="INSERT INTO t2 (a, b) VALUES (REPEAT('a', 10000), REPEAT('b', 10000))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case144" value="INSERT INTO t2 (a, b) VALUES (REPEAT('a', 512), REPEAT('b', 512))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case145" value="INSERT INTO t2 VALUES ( NULL, repeat('x', 600), 3, repeat('y', 600), repeat('z', 600) )" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case146" value="INSERT INTO t2 VALUES ('MFDLE',1,'no',1358168064), ('v',2,'really',154664960), (repeat('mcrxjxxfpo',100),3,repeat('mcrxjxxfpo',100),1), ('o',4,'CEJHM',3), ('j',5,'CRDLM',174915584), ('m',6,'that\'s',7), ('YVMBM',7,'is',4), ('h',8,'as',8), ('y',9,'not',686096384), ('m',10,repeat('mcrxjxxfpo',100),8), (repeat('mcrxjxxfpo',100),11,'v',2), ('and', 12,'b',6), ('from',13,'OJSUT',9), ('you',14,repeat('mcrxjxxfpo',100),1), ('mr',15,'ZMJFI',9), ('TYZOE',16,'I\'ll',-363069440), ('HLKEJ',17,'v',-767492096), ('OINER',18,repeat('mcrxjxxfpo',100),-102170624), (repeat('mcrxjxxfpo',100),19,'i',7), ('one',20,'CPIUQ',469303296), (repeat('mcrxjxxfpo',100),21,'IGLXO',1140391936), ('ERRUY',22,'WKQHJ',1), ('q',23,repeat('mcrxjxxfpo',100),1694564352), ('CYGKG',24,'o',7), ('BIWWF',25,'good',-1532035072)" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case148" value="INSERT INTO t2 VALUES( REPEAT( 'a', 5000 ) )" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case150" value="INSERT INTO t3 VALUES( REPEAT( 'a', 65534 ), 1 )" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case152" value="INSERT INTO t4 SELECT c31, CONCAT(c32, REPEAT('a', @max_allowed_packet-1)) FROM t3" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case153" value="INSERT INTO test.proc VALUES ('sp','bug24805140','PROCEDURE','bug24805140','SQL', 'CONTAINS_SQL','NO','DEFINER','out a int','', 'begin select requesting_trx_id from ' 'information_schema.INNODB_LOCK_WAITS limit 1 into a; end', 'root@localhost','2016-10-05 21:44:21', '2016-10-05 21:44:21', 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,' 'NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,' 'NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION', '','utf8','utf8_general_ci','latin1_swedish_ci', 'begin select requesting_trx_id from ' 'information_schema.INNODB_LOCK_WAITS limit 1 into a; end'), ('sp','proc2','PROCEDURE','proc2','SQL', 'CONTAINS_SQL','NO','DEFINER','out b int','', 'begin select   @@show_compatibility_56 into b; end', 'root@localhost','2016-10-05 21:55:05', '2016-10-05 21:55:05','ONLY_FULL_GROUP_BY,' 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,' 'NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,' 'NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION','', 'utf8','utf8_general_ci','latin1_swedish_ci', 'begin select   @@show_compatibility_56 into b; end')" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case156" value="insert ignore t1 values (2, repeat(0xD0B1,215), repeat(0xD0B1, 310))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case158" value="insert into city 'blah'" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case160" value="insert into t1 (b) values (repeat('a',100)),(repeat('b',100)),(repeat('c',100))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case162" value="insert into t1 (binarycol) values (repeat('x',256))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case163" value="insert into t1 (charcol) values (repeat('x',256))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case164" value="insert into t1 (tinyblobcol) values (repeat('x',256))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case165" value="insert into t1 (tinytextcol) values (repeat('x',256))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case166" value="insert into t1 (varbinarycol) values (repeat('x',256))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case167" value="insert into t1 (varcharcol) values (repeat('x',256))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case168" value="insert into t1 values (1, concat(repeat('1', 300), '2')), (1, concat(repeat('1', 300), '2')), (1, concat(repeat('0', 300), '1')), (2, concat(repeat('1', 300), '2')), (2, concat(repeat('1', 300), '2')), (2, concat(repeat('0', 300), '1'))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case170" value="insert into t1 values (1,repeat('a',255)),(2,repeat('b',255))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case171" value="insert into t1 values (repeat(&quot;1&quot;,200))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case173" value="insert into t1 values (repeat('a',333)), (repeat('b',333))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case175" value="insert into t1 values (repeat(0x0000201f, 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case177" value="insert into t1 values (repeat(0x00002021, 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case179" value="insert into t1 values (repeat(0x201f, 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case181" value="insert into t1 values (repeat(0x2020, 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case183" value="insert into t1 values (repeat(0x2021, 10))" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case185" value="insert into t2 select x3.a,  -- 3 concat('val-', x3.a + 3*x4.a), -- 12 concat('val-', @a:=x3.a + 3*x4.a + 12*C.a), -- 120 concat('val-', @a + 120*D.a) from t1 x3, t1 x4, t1 C, t1 D where x3.a &lt; 3 and x4.a &lt; 4 and D.a &lt; 4 order by x3.a, x4.a, C.a, D.a" db-types="MySQL"/>
    <sql-case id="insert_by_mysql_source_test_case186" value="insert into t5 select * from `äöüÄÖÜ` flush logs" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case1" value="UPDATE (VALUES ROW(1),ROW(2)) AS dt(a) LEFT JOIN performance_schema.setup_instruments ON dt.a=enabled SET enabled = 'YES' WHERE name = 'wait/lock/metadata/sql/mdl'" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case3" value="UPDATE IGNORE t1 SET c12= REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case5" value="UPDATE IGNORE t1, t2 SET c12= REPEAT('ab', @max_allowed_packet), c22= 'ab'" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case6" value="UPDATE t1 LEFT JOIN t2 USING(id) SET t2.c = REPEAT('1', 70000) WHERE t1.id = 1" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case7" value="UPDATE t1 SET b=default(b)" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case9" value="UPDATE t1 SET b=repeat('a', 800) where a=10" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case10" value="UPDATE t1 SET c12= REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case11" value="UPDATE t1 SET c12= REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case13" value="UPDATE t1 set data=repeat('c',17*1024*1024)" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case14" value="UPDATE t1, t2 SET c12= REPEAT('ab', @max_allowed_packet), c22= 'ab'" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case15" value="UPDATE t2 SET c = REPEAT('1', 70000)" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case16" value="UPDATE t3 SET c32= CONCAT(c32, REPEAT('a', @max_allowed_packet-1))" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case18" value="update t1 set b=repeat('e',200) where a=1" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case20" value="update t1 set b=repeat(left(b,1),2) where a between 64 and 66" db-types="MySQL"/>
    <sql-case id="update_by_mysql_source_test_case22" value="update t1 set b=repeat(left(b,1),255) where a between 1 and 5" db-types="MySQL"/>
    <sql-case id="delete_by_mysql_source_test_case4" value="DELETE FROM t1 WHERE c12 &lt;=&gt; REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="delete_by_mysql_source_test_case5" value="DELETE FROM t1 WHERE c12 &lt;=&gt; REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="delete_by_mysql_source_test_case6" value="DELETE FROM t1, t2 USING t1 INNER JOIN t2 WHERE t1.c11 = t2.c21 AND t2.c22 &lt;=&gt; REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="delete_by_mysql_source_test_case7" value="DELETE IGNORE FROM t1, t2 USING t1 INNER JOIN t2 WHERE t1.c11 = t2.c21 AND t2.c22 &lt;=&gt; REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="delete_by_mysql_source_test_case8" value="DELETE t1 PARTITION (pNeg), t3 FROM t1, t3 FLUSH STATUS" db-types="MySQL"/>
    <sql-case id="delete_by_mysql_source_test_case10" value="delete from (select * from t1) as t1, t1 as t2" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case1" value="(VALUES ROW(1)) ORDER BY '1'" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case2" value="(VALUES ROW(1)) ORDER BY '1' DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case3" value="(VALUES ROW(1)) ORDER BY (SELECT 1)" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case4" value="(VALUES ROW(1)) ORDER BY (SELECT 1) DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case5" value="(VALUES ROW(1)) ORDER BY 1" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case6" value="(VALUES ROW(1)) ORDER BY 1 DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case7" value="(VALUES ROW(1), ROW(2), ROW(3), ROW(4), ROW(5)) LIMIT 2 OFFSET 3" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case8" value="(VALUES ROW(1),ROW(2)) ORDER BY '1'" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case9" value="(VALUES ROW(1),ROW(2)) ORDER BY '1' DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case10" value="(VALUES ROW(1),ROW(2)) ORDER BY (SELECT 1)" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case11" value="(VALUES ROW(1),ROW(2)) ORDER BY (SELECT 1) DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case12" value="(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0)" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case13" value="(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0)" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case14" value="(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0) DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case15" value="(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0) DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case16" value="(VALUES ROW(1),ROW(2)) ORDER BY 1" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case17" value="(VALUES ROW(1),ROW(2)) ORDER BY 1 DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case18" value="(VALUES ROW(1),ROW(2)) ORDER BY column_0" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case19" value="(VALUES ROW(1),ROW(2)) ORDER BY column_0" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case20" value="(VALUES ROW(1),ROW(2)) ORDER BY column_0 DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case21" value="(VALUES ROW(1),ROW(2)) ORDER BY column_0 DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case22" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY '2'" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case23" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY '2' DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case24" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT 2)" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case25" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT 2) DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case26" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT column_1)" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case27" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT column_1) DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case28" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY 2" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case29" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY 2 DESC" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case30" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY column_1" db-types="MySQL"/>
    <sql-case id="left_values_by_mysql_source_test_case31" value="(VALUES ROW(1,9),ROW(2,4)) ORDER BY column_1 DESC" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case1" value="ALTER  USER test_user9 IDENTIFIED WITH 'caching_sha2_password' BY ''" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case2" value="ALTER  USER u18@localhost, u19@localhost IDENTIFIED BY 'auth_string', u20@localhost IDENTIFIED WITH 'sha256_password', u21@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string', u22@localhost IDENTIFIED WITH 'mysql_native_password', u23@localhost IDENTIFIED WITH 'mysql_native_password' AS '*318C29553A414C4A571A077BC9E9A9F67D5E5634' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot; ISSUER &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA&quot; ACCOUNT UNLOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case4" value="ALTER DEFINER=s@1 VIEW v1 AS SELECT * FROM t1" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case6" value="ALTER TABLE m1 UNION=()" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case8" value="ALTER TABLE t ADD COLUMN b BLOB DEFAULT (repeat('b', i))" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case10" value="ALTER TABLE t ADD COLUMN b MEDIUMBLOB DEFAULT (repeat('b', i))" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case12" value="ALTER TABLE t ALTER COLUMN b SET DEFAULT (repeat('b', i))" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case14" value="ALTER TABLE t ALTER COLUMN b SET DEFAULT (repeat('b', i))" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case20" value="ALTER TABLE t1 ALTER COLUMN i SET DEFAULT(GROUPING(r))" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case24" value="ALTER TABLE t1 MODIFY COLUMN i INT AUTO_INCREMENT PRIMARY KEY DEFAULT(GROUPING(r))" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case28" value="ALTER TABLE t1 TABLESPACE ``" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case29" value="ALTER TABLE t1 partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1) ( subpartition x11 engine innodb nodegroup 0, subpartition x12 engine innodb nodegroup 1), partition x2 values less than (5) ( subpartition x21 engine innodb nodegroup 0, subpartition x22 engine innodb nodegroup 1) )" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case33" value="ALTER TABLE t6 UNION = ()" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case34" value="ALTER TABLESPACE innodb_system RENAME TO ts3" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case35" value="ALTER TABLESPACE innodb_temporary RENAME TO ts3" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case36" value="ALTER TABLESPACE mysql RENAME TO ts3" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case37" value="ALTER TABLESPACE ts RENAME TO `innodb_file_per_table.2`" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case38" value="ALTER TABLESPACE ts RENAME TO innodb_file_per_table" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case39" value="ALTER TABLESPACE ts RENAME TO innodb_file_per_table" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case40" value="ALTER TABLESPACE ts RENAME TO innodb_file_per_table_whatever" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case41" value="ALTER TABLESPACE ts RENAME TO innodb_system" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case42" value="ALTER TABLESPACE ts RENAME TO innodb_temporary" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case43" value="ALTER TABLESPACE ts RENAME TO mysql" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case44" value="ALTER TABLESPACE ts RENAME TO ts2" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case45" value="ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{&quot;foo&quot;: &quot;bar&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case46" value="ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{&quot;foo&quot;: &quot;bar}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case48" value="ALTER TABLESPACE ts1 RENAME TO ts11" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case49" value="ALTER TABLESPACE ts1 RENAME TO ts11" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case50" value="ALTER TABLESPACE ts1 RENAME TO ts11" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case51" value="ALTER TABLESPACE ts1 RENAME TO ts11" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case53" value="ALTER TABLESPACE ts1 RENAME TO ts2" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case55" value="ALTER TABLESPACE ts1 RENAME TO ts2" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case57" value="ALTER TABLESPACE ts1 RENAME TO ts2" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case59" value="ALTER TABLESPACE ts2 RENAME TO ts1" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case61" value="ALTER TABLESPACE ts2 RENAME TO ts3" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case63" value="ALTER TABLESPACE ts3 RENAME TO ts4" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case65" value="ALTER UNDO TABLESPACE undo_003 SET ACTIVE ENGINE InnoDB" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case66" value="ALTER UNDO TABLESPACE undo_003 SET ACTIVE ENGINE MyISAM" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case67" value="ALTER UNDO TABLESPACE undo_003 SET INACTIVE ENGINE InnoDB" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case68" value="ALTER UNDO TABLESPACE undo_003 SET INACTIVE ENGINE MyISAM" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case70" value="ALTER USER CURRENT_USER() ATTRIBUTE '{ &quot;comment&quot; : null }'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case71" value="ALTER USER CURRENT_USER() COMMENT 'test'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case72" value="ALTER USER IF EXISTS ne_user2@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case73" value="ALTER USER IF EXISTS ne_user2@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case74" value="ALTER USER IF EXISTS user1@localhost,ne_user3@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case75" value="ALTER USER IF EXISTS user1@localhost,ne_user3@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case76" value="ALTER USER IF EXISTS user2@localhost IDENTIFIED WITH 'mysql_native_password' AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case77" value="ALTER USER b22551523@localhost IDENTIFIED with 'mysql_native_password'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case78" value="ALTER USER b22551523@localhost IDENTIFIED with 'test_plugin_server'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case79" value="ALTER USER fff@asdasd COMMENT ''" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case80" value="ALTER USER foo4 ACCOUNT UNLOCK ATTRIBUTE '{&quot;stuff&quot;:&quot;unlocked&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case81" value="ALTER USER foo@localhost ATTRIBUTE &quot;{ \&quot;test\&quot;: \&quot;account locking\&quot; }&quot;" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case82" value="ALTER USER foo@localhost ATTRIBUTE 'not a valid object'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case83" value="ALTER USER foo@localhost ATTRIBUTE '{&quot;flag&quot;:&quot;red&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case84" value="ALTER USER foo@localhost ATTRIBUTE '{&quot;flag&quot;:null}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case85" value="ALTER USER foo@localhost ATTRIBUTE '{&quot;key&quot;:&quot;value&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case86" value="ALTER USER foo@localhost COMMENT &quot;This is a test account for verifying that password locking and user attributes won't interfer with one and another.&quot;" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case87" value="ALTER USER foo@localhost COMMENT 'Added key/value pair'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case88" value="ALTER USER foo@localhost COMMENT 'password lock time'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case89" value="ALTER USER foo@localhost COMMENT 'xxx'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case90" value="ALTER USER foo@localhost COMMENT 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case91" value="ALTER USER method_alter@localhost IDENTIFIED WITH 'sha256_password'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case92" value="ALTER USER mohit@localhost IDENTIFIED WITH 'test_plugin_server' AS 'haha'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case93" value="ALTER USER no_pwd_history@localhost IDENTIFIED WITH 'sha256_password'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case94" value="ALTER USER pwd_history_plugin@localhost IDENTIFIED WITH 'test_plugin_server' PASSWORD REUSE INTERVAL 1 DAY" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case95" value="ALTER USER redqueen@localhost DISCARD OLD PASSWORD COMMENT 'Dropped old password'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case96" value="ALTER USER tu1@localhost IDENTIFIED WITH 'sha256_password' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot;" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case97" value="ALTER USER u1 ATTRIBUTE '{&quot;speed&quot; : &quot;9000&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case98" value="ALTER USER u1 ATTRIBUTE '{&quot;speed&quot; : null }'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case99" value="ALTER USER u1 ATTRIBUTE '{&quot;uid&quot; : &quot;34234&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case100" value="ALTER USER u1 COMMENT 'changed the free form text'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case101" value="ALTER USER u1 COMMENT 'free form text'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case103" value="ALTER USER u1 IDENTIFIED WITH 'invalid_plugin' AS 'secret'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case105" value="ALTER USER u10@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string' REQUIRE SSL" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case106" value="ALTER USER u10@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string' REQUIRE SSL" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case107" value="ALTER USER u10@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot; AND SUBJECT &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client&quot; ISSUER &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA&quot; WITH MAX_CONNECTIONS_PER_HOUR 1000 MAX_USER_CONNECTIONS 20 MAX_QUERIES_PER_HOUR 60 MAX_UPDATES_PER_HOUR 100" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case108" value="ALTER USER u10@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE SSL" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case109" value="ALTER USER u10@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE SSL" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case111" value="ALTER USER u12@localhost IDENTIFIED WITH 'sha256_password' WITH MAX_QUERIES_PER_HOUR 8" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case112" value="ALTER USER u12@localhost IDENTIFIED WITH 'test_plugin_server' WITH MAX_QUERIES_PER_HOUR 1000" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case113" value="ALTER USER u15@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string' WITH MAX_CONNECTIONS_PER_HOUR 1000 MAX_USER_CONNECTIONS 20 MAX_QUERIES_PER_HOUR 60 MAX_UPDATES_PER_HOUR 100" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case114" value="ALTER USER u15@localhost IDENTIFIED WITH 'sha256_password', u16@localhost, u17@localhost IDENTIFIED BY 'new_auth_string' PASSWORD EXPIRE DEFAULT" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case115" value="ALTER USER u15@localhost IDENTIFIED WITH 'sha256_password', u16@localhost, u17@localhost IDENTIFIED BY 'new_auth_string' PASSWORD EXPIRE DEFAULT" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case116" value="ALTER USER u1@localhost ATTRIBUTE '{&quot;Restrictions&quot;: [{&quot;Database&quot;:&quot;mysql&quot;,&quot;Privileges&quot;: [ &quot;CREATE&quot; ]}]}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case117" value="ALTER USER u1@localhost ATTRIBUTE '{&quot;key&quot;: &quot;value&quot;}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case118" value="ALTER USER u1@localhost COMMENT 'I comment what I want'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case120" value="ALTER USER u2@localhost IDENTIFIED WITH 'sha256_password'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case122" value="ALTER USER u3@localhost IDENTIFIED WITH 'mysql_native_password' AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case123" value="ALTER USER u3@localhost IDENTIFIED WITH 'sha256_password' ACCOUNT LOCK ACCOUNT UNLOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case125" value="ALTER USER u4@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case127" value="ALTER USER u4@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' ACCOUNT UNLOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case128" value="ALTER USER u4@sdasd ATTRIBUTE '{}'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case130" value="ALTER USER u5@localhost IDENTIFIED WITH 'sha256_password'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case131" value="ALTER USER u6@localhost IDENTIFIED WITH 'test_plugin_server' AS 'new_auth_string' REQUIRE SSL" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case132" value="ALTER USER u7@localhost IDENTIFIED WITH 'mysql_native_password' PASSWORD EXPIRE DEFAULT ACCOUNT LOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case133" value="ALTER USER u7@localhost IDENTIFIED WITH 'mysql_native_password' REQUIRE ISSUER 'issuer'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case134" value="ALTER USER u7@localhost IDENTIFIED WITH 'sha256_password' BY 'new_auth_string' REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA'" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case136" value="ALTER USER u8@localhost IDENTIFIED WITH 'mysql_native_password' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot;" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case137" value="ALTER USER u8@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot;" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case138" value="ALTER USER u8@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA' PASSWORD EXPIRE NEVER ACCOUNT LOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case140" value="ALTER USER u9@localhost IDENTIFIED WITH 'test_plugin_server' BY 'auth_string77hg' REQUIRE ISSUER &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA&quot;" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case141" value="ALTER USER user11@localhost IDENTIFIED WITH 'sha256_password' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot; AND SUBJECT &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client&quot; ISSUER &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA&quot; PASSWORD EXPIRE  DEFAULT ACCOUNT UNLOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case142" value="ALTER USER user11@localhost IDENTIFIED WITH 'sha256_password' REQUIRE CIPHER &quot;DHE-RSA-AES256-SHA&quot; AND SUBJECT &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client&quot; ISSUER &quot;/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA&quot; PASSWORD EXPIRE  DEFAULT ACCOUNT UNLOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case143" value="ALTER USER user12@localhost IDENTIFIED WITH 'mysql_native_password' AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF' ACCOUNT UNLOCK PASSWORD  EXPIRE INTERVAL 90 DAY" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case144" value="ALTER USER user12@localhost IDENTIFIED WITH 'mysql_native_password' AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF' ACCOUNT UNLOCK PASSWORD  EXPIRE INTERVAL 90 DAY" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case145" value="ALTER USER user6@localhost IDENTIFIED WITH 'mysql_native_password' ACCOUNT LOCK ACCOUNT UNLOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case147" value="ALTER USER user7@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string_sha256' PASSWORD EXPIRE NEVER ACCOUNT LOCK" db-types="MySQL"/>
    <sql-case id="alter_by_mysql_source_test_case148" value="ALTER USER user8@localhost IDENTIFIED WITH 'mysql_native_password' BY 'new_auth_string' ACCOUNT UNLOCK PASSWORD EXPIRE" db-types="MySQL"/>
    <sql-case id="begin_by_mysql_source_test_case1" value="BEGIN WORK" db-types="MySQL"/>
    <sql-case id="begin_by_mysql_source_test_case2" value="BEGIN WORK" db-types="MySQL"/>
    <sql-case id="begin_by_mysql_source_test_case3" value="BEGIN WORK" db-types="MySQL"/>
    <sql-case id="begin_by_mysql_source_test_case4" value="BEGIN WORK" db-types="MySQL"/>
    <sql-case id="begin_by_mysql_source_test_case5" value="BEGIN WORK" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case2" value="CALL db1.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case3" value="CALL db1.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case4" value="CALL db1.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case5" value="CALL db1.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case6" value="CALL db1.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case7" value="CALL db1.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case8" value="CALL db1.sp2()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case9" value="CALL db1.sp2()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case10" value="CALL db1.sp2()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case11" value="CALL db1.sp3()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case12" value="CALL db1.sp3()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case13" value="CALL db1.sp3()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case14" value="CALL db1.sp3()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case15" value="CALL db2.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case16" value="CALL db2.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case17" value="CALL db_name.very_long_pr_name_111111111111111111111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999999999999999999()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case18" value="CALL mtr.add_suppression(&quot; corrupted: row in wrong partition: &quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case19" value="CALL mtr.add_suppression(&quot;'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case21" value="CALL mtr.add_suppression(&quot;--character-set-server: 'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case23" value="CALL mtr.add_suppression(&quot;.*Out of memory *&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case24" value="CALL mtr.add_suppression(&quot;.ERROR.  Operating system error number&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case25" value="CALL mtr.add_suppression(&quot;.ERROR.  The error means mysqld does not have the access&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case27" value="CALL mtr.add_suppression(&quot;==[0-9]*== Warning: set address range perms: large range&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case29" value="CALL mtr.add_suppression(&quot;ACL table mysql.default_roles missing. Some operations may fail.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case30" value="CALL mtr.add_suppression(&quot;ACL table mysql.role_edges missing. Some operations may fail.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case31" value="CALL mtr.add_suppression(&quot;Cannot calculate&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case32" value="CALL mtr.add_suppression(&quot;Cannot calculate&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case33" value="CALL mtr.add_suppression(&quot;Cannot create temporary merge file&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case34" value="CALL mtr.add_suppression(&quot;Cannot load from .* The table is probably corrupted&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case35" value="CALL mtr.add_suppression(&quot;Cannot load from mysql.*. The table is probably corrupted&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case36" value="CALL mtr.add_suppression(&quot;Cannot load from&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case37" value="CALL mtr.add_suppression(&quot;Cannot open datafile&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case38" value="CALL mtr.add_suppression(&quot;Cannot open datafile&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case39" value="CALL mtr.add_suppression(&quot;Cannot rename&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case40" value="CALL mtr.add_suppression(&quot;Cannot rename&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case41" value="CALL mtr.add_suppression(&quot;Column count of mysql.* is wrong. &quot; &quot;Expected .*, found .*. &quot; &quot;The table is probably corrupted&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case42" value="CALL mtr.add_suppression(&quot;Column count of&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case43" value="CALL mtr.add_suppression(&quot;Could not increase number of max_open_files to more than *&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case45" value="CALL mtr.add_suppression(&quot;Dictionary file not specified&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case47" value="CALL mtr.add_suppression(&quot;Dictionary file open failed&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case48" value="CALL mtr.add_suppression(&quot;Dictionary file size exceeded&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case49" value="CALL mtr.add_suppression(&quot;Effective value of validate_password.length is changed.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case51" value="CALL mtr.add_suppression(&quot;Enabling keys got errno&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case53" value="CALL mtr.add_suppression(&quot;Failed to find tablespace&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case54" value="CALL mtr.add_suppression(&quot;Failed to find tablespace&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case55" value="CALL mtr.add_suppression(&quot;Failed to initialize TLS for channel: mysql_admin&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case56" value="CALL mtr.add_suppression(&quot;Failed to initialize TLS for channel: mysql_admin&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case57" value="CALL mtr.add_suppression(&quot;Failed to set up SSL because of the following *&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case58" value="CALL mtr.add_suppression(&quot;Failed to set up SSL because of the following *&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case59" value="CALL mtr.add_suppression(&quot;Failed to set up SSL because of the following SSL library error&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case60" value="CALL mtr.add_suppression(&quot;Failed to set up SSL because of the following SSL library error&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case61" value="CALL mtr.add_suppression(&quot;File ./s/t_innodb.ibd&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case62" value="CALL mtr.add_suppression(&quot;File ./s/t_innodb.ibd&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case64" value="CALL mtr.add_suppression(&quot;Ignoring tablespace&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case65" value="CALL mtr.add_suppression(&quot;Ignoring tablespace&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case66" value="CALL mtr.add_suppression(&quot;Incorrect definition of table&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case68" value="CALL mtr.add_suppression(&quot;Master's UUID has changed, its old UUID is&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case69" value="CALL mtr.add_suppression(&quot;One can only use the --user switch.*&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case70" value="CALL mtr.add_suppression(&quot;Open files 7 exceeds the limit 1&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case71" value="CALL mtr.add_suppression(&quot;Operating system error number&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case72" value="CALL mtr.add_suppression(&quot;Operating system error number&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case74" value="CALL mtr.add_suppression(&quot;Out of sort memory&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case76" value="CALL mtr.add_suppression(&quot;Plugin audit_log reported *&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case78" value="CALL mtr.add_suppression(&quot;Plugin test_plugin_server reported: 'Wrong password supplied for plug_dest'&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case79" value="CALL mtr.add_suppression(&quot;Plugin test_plugin_server reported: 'Wrong password supplied for plug_dest'&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case81" value="CALL mtr.add_suppression(&quot;Problem while dropping database. Can't remove database directory .* Please remove it manually.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case82" value="CALL mtr.add_suppression(&quot;REVOKE/GRANT failed while granting/revoking &quot; &quot;privileges in databases. An incident event &quot; &quot;has been written to the binary log which &quot; &quot;will stop the slaves.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case83" value="CALL mtr.add_suppression(&quot;REVOKE/GRANT failed while storing table level &quot; &quot;and column level grants in the privilege &quot; &quot;tables. An incident event has been written to &quot; &quot;the binary log which will stop the slaves.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case84" value="CALL mtr.add_suppression(&quot;Since the validate_password_policy is mentioned &quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case85" value="CALL mtr.add_suppression(&quot;Storage engine '.*' does not support system tables. \\[mysql.*\\]&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case86" value="CALL mtr.add_suppression(&quot;Storage engine 'MyISAM' does not&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case88" value="CALL mtr.add_suppression(&quot;The error means the system cannot find&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case89" value="CALL mtr.add_suppression(&quot;The error means the system cannot find&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case91" value="CALL mtr.add_suppression(&quot;The plugin 'new_plugin_server' used to authenticate user 'new_user'@'%' is not loaded. Nobody can currently login using this account.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case92" value="CALL mtr.add_suppression(&quot;Too many (.*) files stay open while the maximum allowed value would be 1. You may need to raise the value of innodb_open_files in my.cnf.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case94" value="CALL mtr.add_suppression(&quot;Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case96" value="CALL mtr.add_suppression(&quot;Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case98" value="CALL mtr.add_suppression(&quot;Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case100" value="CALL mtr.add_suppression(&quot;Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case102" value="CALL mtr.add_suppression(&quot;World-writable config file .* is ignored&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case103" value="CALL mtr.add_suppression(&quot;You must raise the value of innodb_open_files in my.cnf! Remember that InnoDB keeps all&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case104" value="CALL mtr.add_suppression(&quot;You need to use --log-bin to make --log-replica-updates work.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case105" value="CALL mtr.add_suppression(&quot;\\[ERROR\\].* 'mkdir' returned OS error 130&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case106" value="CALL mtr.add_suppression(&quot;\\[ERROR\\].* Cannot create a tablespace for table .* because the directory is not a valid location. The DATA DIRECTORY location must be in a known directory&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case107" value="CALL mtr.add_suppression(&quot;\\[ERROR\\].* Error number 30 means 'Read-only file system'&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case108" value="CALL mtr.add_suppression(&quot;\\[ERROR\\].* Operating system error number&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case109" value="CALL mtr.add_suppression(&quot;\\[ERROR\\].* The error means mysqld does not have the access&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case110" value="CALL mtr.add_suppression(&quot;currently unknown variable 'validate_password*&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case111" value="CALL mtr.add_suppression(&quot;currently unknown variable 'validate_password*&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case112" value="CALL mtr.add_suppression(&quot;currently unknown variable 'validate_password_*&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case113" value="CALL mtr.add_suppression(&quot;currently unknown variable 'validate_password_*&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case115" value="CALL mtr.add_suppression(&quot;default_tmp_storage_engine is set to a disabled storage engine .*&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case116" value="CALL mtr.add_suppression(&quot;file *  was not purged because it is the active log file.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case117" value="CALL mtr.add_suppression(&quot;innodb_open_files should not be greater than the open_files_limit.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case118" value="CALL mtr.add_suppression(&quot;log files and all system tablespace files open for the whole time mysqld is running, and&quot;);CALL mtr.add_suppression(&quot;needs to open also some .ibd files if the file-per-table storage model is used. Current open files .*, max allowed open files 1.&quot;)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case120" value="CALL mtr.add_suppression('Disk is full writing')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case121" value="CALL mtr.add_suppression('Failed to initialize TLS for channel: mysql_main')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case122" value="CALL mtr.add_suppression('Failed to set up SSL because of the following SSL library error')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case123" value="CALL mtr.add_suppression('Following users were specified in ALTER USER IF EXISTS but they do not exist')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case124" value="CALL mtr.add_suppression('Following users were specified in ALTER USER IF EXISTS but they do not exist')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case125" value="CALL mtr.add_suppression('Following users were specified in CREATE USER IF NOT EXISTS but they already exist')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case126" value="CALL mtr.add_suppression('Following users were specified in CREATE USER IF NOT EXISTS but they already exist')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case127" value="CALL mtr.add_suppression('Found \\d+ sys .*, but expected \\d+. Re-installing the sys schema.')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case128" value="CALL mtr.add_suppression('Retry in 60 secs')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case130" value="CALL mtr.add_suppression('You need to use --log-bin to make --binlog-format work.')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case131" value="CALL my_db.baz_proc()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case132" value="CALL my_db.baz_proc()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case133" value="CALL my_db.foo_proc()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case134" value="CALL my_db.foo_proc()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case136" value="CALL mysql.p1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case137" value="CALL p1(_UTF8 't')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case138" value="CALL p2(_LATIN1 't')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case140" value="CALL sys.ps_setup_enable_instrument('wait')" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case142" value="CALL test.p1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case144" value="CALL test.p1(12)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case145" value="CALL test.p1(13)" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case146" value="CALL test.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case147" value="CALL test.sp1()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case148" value="CALL very_long_db_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999.simple_proc()" db-types="MySQL"/>
    <sql-case id="call_by_mysql_source_test_case149" value="CALL world.proc_empty()" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case2" value="CHANGE REPLICATION FILTER REPLICATE_DO_TABLE=(db1.t1)" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case4" value="CHANGE REPLICATION FILTER REPLICATE_IGNORE_TABLE=(db1.t1)" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case6" value="CHANGE REPLICATION FILTER REPLICATE_WILD_DO_TABLE=('db1.t%')" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case8" value="CHANGE REPLICATION SOURCE TO SOURCE_CONNECT_RETRY = 1, SOURCE_HEARTBEAT_PERIOD = 1.01" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case9" value="CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE=&quot;binlog-default.000001&quot;, SOURCE_LOG_POS=4 FOR CHANNEL ''" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case10" value="CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch1.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch1'" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case11" value="CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch2.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch2'" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case12" value="CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3'" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case13" value="CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3', SOURCE_BIND = 'eth4n', SOURCE_TLS_CIPHERSUITES = '' FOR CHANNEL 'chan_jackie'" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case14" value="CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3', SOURCE_CONNECT_RETRY = 1, SOURCE_HEARTBEAT_PERIOD = 1.01, SOURCE_LOG_FILE = 'master_log_name', SOURCE_LOG_POS = 0, SOURCE_SSL = 0, SOURCE_SSL_CA = 'ca_file_name', SOURCE_SSL_CAPATH = 'ca_directory_name', SOURCE_SSL_CERT = 'cert_file_name', SOURCE_SSL_KEY = 'key_file_name', SOURCE_SSL_CIPHER = 'cipher_list', SOURCE_SSL_VERIFY_SERVER_CERT = 1, SOURCE_SSL_CRL = 'crl_file_name', SOURCE_SSL_CRLPATH = 'crl_directory_name', IGNORE_SERVER_IDS = (99,100), SOURCE_TLS_VERSION = 'TLSv1.2', SOURCE_TLS_CIPHERSUITES = NULL, SOURCE_BIND = 'eth4n', SOURCE_RETRY_COUNT = 7, SOURCE_DELAY = 4711, SOURCE_AUTO_POSITION = 0 FOR CHANNEL 'chan_jackie'" db-types="MySQL"/>
    <sql-case id="change_by_mysql_source_test_case15" value="CHANGE REPLICATION SOURCE TO SOURCE_USER=     'plug_user', SOURCE_PASSWORD= 'plug_user', SOURCE_RETRY_COUNT= 0" db-types="MySQL"/>
    <sql-case id="check_by_mysql_source_test_case2" value="CHECK TABLES t1" db-types="MySQL"/>
    <sql-case id="close_by_mysql_source_test_case1" value="CLOSE cur1" db-types="MySQL"/>
    <sql-case id="declare_by_mysql_source_test_case1" value="DECLARE cur1 CURSOR FOR SHOW TABLES" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case2" value="EXPLAIN ANALYZE FORMAT=JSON SELECT 1" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case4" value="EXPLAIN FORMAT=tree (SELECT 1 FROM t1) UNION ALL SELECT 1 IN (SELECT 1 FROM t1) FROM t1 WHERE 1=2" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case6" value="EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN ( t2 LEFT JOIN t3 USING ( a ) CROSS JOIN LATERAL ( SELECT * FROM t4 WHERE t4.a = t3.a LIMIT 1 ) t4d ) ON t1.a = t4d.a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case7" value="EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN t2 USING ( a ), LATERAL ( SELECT * FROM t3 WHERE t3.a = t2.a LIMIT 1 ) t3d, LATERAL ( SELECT * FROM t3 WHERE t3.a &gt; t1.a LIMIT 1 ) t4d" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case8" value="EXPLAIN FORMAT=tree SELECT /*+ NO_BNL(t1, t2) */ * FROM t2 JOIN t1 ON 1 WHERE (CAST(&quot;1&quot; AS JSON) MEMBER OF( t1.col_json-&gt;'$[*]'))" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case10" value="EXPLAIN SELECT (SELECT dt.a FROM   (SELECT 1 AS a, t2.a AS b FROM t2 HAVING t1.a) dt     # &lt;----- outer reference inside derived table. WHERE dt.b=t1.a) AS subq    # &lt;----- normal outer reference FROM t1" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case11" value="EXPLAIN SELECT * FROM t1 AS x3 WHERE EXISTS (SELECT * FROM t1 AS x1 JOIN t1 AS x2 ON x1.b=x2.b JOIN LATERAL (SELECT COUNT(a) AS c FROM t1 WHERE t1.b=x1.b) AS d3 ON x1.b=c)" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case13" value="EXPLAIN SELECT /*+ SUBQUERY(@subq INTOEXISTS) */ a, a IN (SELECT /*+ QB_NAME(subq) */ a FROM t1) FROM t2" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case14" value="EXPLAIN SELECT /*+ SUBQUERY(@subq MATERIALIZATION) */ a, a IN (SELECT /*+ QB_NAME(subq) */ a FROM t1) FROM t2" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case15" value="EXPLAIN SELECT 1 FROM t1 WHERE a IN (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2))" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case16" value="EXPLAIN SELECT 1 FROM t2 WHERE a IN (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2))" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case17" value="EXPLAIN SELECT a FROM t1 FORCE INDEX (PRIMARY) IGNORE INDEX FOR GROUP BY (i2) IGNORE INDEX FOR ORDER BY (i2) USE INDEX (i2)" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case18" value="EXPLAIN SELECT a FROM t1 FORCE INDEX FOR JOIN (i2) FORCE INDEX FOR GROUP BY (i2) GROUP BY a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case21" value="EXPLAIN SELECT a FROM t1 IGNORE INDEX (i2) USE INDEX ()" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case23" value="EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY) IGNORE INDEX FOR GROUP BY (i2) GROUP BY a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case25" value="EXPLAIN SELECT a FROM t1 USE INDEX () IGNORE INDEX (i2)" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case27" value="EXPLAIN SELECT a FROM t1 USE INDEX (i2) USE INDEX ()" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case28" value="EXPLAIN SELECT a FROM t1 USE INDEX FOR GROUP BY (i2) USE INDEX FOR ORDER BY (i2) USE INDEX FOR JOIN (i2)" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case29" value="EXPLAIN SELECT a FROM t1 USE INDEX FOR JOIN (i2) USE INDEX FOR GROUP BY (i2) GROUP BY a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case30" value="EXPLAIN SELECT a FROM t1 USE INDEX FOR JOIN (i2) USE INDEX FOR JOIN (i2) USE INDEX FOR JOIN (i2,i2)" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case31" value="EXPLAIN SELECT a, a IN (SELECT /*+ SUBQUERY(MATERIALIZATION) */ a FROM t1) FROM t2" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case32" value="EXPLAIN SELECT a, a IN (SELECT a FROM t1) FROM t2" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case33" value="EXPLAIN SELECT a, a IN (SELECT a FROM t1) FROM t2" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case34" value="EXPLAIN SELECT myfunc_int(MIN(b) xx) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case35" value="EXPLAIN SELECT myfunc_int(a AS attr_name) FROM t1" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case36" value="EXPLAIN SELECT myfunc_int(test.fn(MIN(b))) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case41" value="EXPLAIN SELECT test.fn(MIN(b)) as c FROM t1 GROUP BY a" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case42" value="EXPLAIN WITH cte AS ( SELECT alias1 . col_date AS field1 , alias1 . col_blob AS field2 , alias1 . pk AS field3 , alias1 . pk AS field4 FROM  dd AS alias1  LEFT  JOIN d AS alias2 ON  alias1 . col_varchar_key =  alias2 . col_varchar_key WHERE  alias2 . pk != 0 OR  alias2 . col_varchar_key &gt;= 'v' ORDER BY field4 ) DELETE /*+ NO_MERGE(outrcte) */  outr2.* FROM d AS outr1 JOIN d AS outr2 ON ( outr1 . col_datetime_key = outr2 . col_date ) JOIN cte AS outrcte ON outr1 . pk = outrcte.field1 WHERE outr1 . col_int_key = ( SELECT  innr1 . col_int AS y FROM dd AS innr1 INNER JOIN cte AS innrcte ON innr1.col_int_key = innrcte.field1 WHERE innr1 . col_blob_key = 'h' ORDER BY innr1 . col_varchar )" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case43" value="EXPLAIN WITH cte AS ( SELECT alias1 . col_date AS field1 , alias2 . col_blob AS field2 FROM  view_d AS alias1  LEFT  JOIN view_dd AS alias2 ON  alias1 . col_blob_key =  alias2 . col_blob_key WHERE  alias1 . col_varchar_key IS  NULL AND  alias2 . col_int_key &gt; 6 AND alias2 . col_int_key &lt;= ( 7 + 5 ) OR alias1 . col_blob_key &gt;= 'a' ) DELETE /*+ MERGE(outrcte) */ FROM outr1.*, outr2.* USING d AS outr1 LEFT OUTER JOIN d AS outr2 ON ( outr1 . col_date = outr2 . col_date ) JOIN cte AS outrcte ON outr2 . col_blob_key = outrcte.field1 WHERE outr1 . col_blob  IN ( SELECT DISTINCT innr1 . col_blob_key AS y FROM dd AS innr1 RIGHT OUTER JOIN cte AS innrcte ON innr1.pk &gt;= innrcte.field1 WHERE outr1 . col_int_key &gt; 6  )" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case44" value="EXPLAIN WITH cte AS ( SELECT alias1 . col_time_key AS field1 FROM  cc AS alias1  LEFT OUTER JOIN view_c AS alias2 ON  alias1 . col_varchar_key =  alias2 . col_blob_key WHERE  alias2 . col_varchar_key &gt;= 'n' ORDER BY field1 LIMIT 1000 OFFSET 9) DELETE  FROM outr1.*, outr2.* USING c AS outr1 RIGHT OUTER JOIN c AS outr2 ON ( outr1 . col_blob_key = outr2 . col_blob ) RIGHT JOIN cte AS outrcte ON outr2 . col_blob = outrcte.field1 WHERE outr1 . col_blob_key &lt;&gt; ( SELECT DISTINCT innr1 . col_blob AS y FROM bb AS innr1 LEFT JOIN cte AS innrcte ON innr1.pk &lt;&gt; innrcte.field1 )" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case45" value="EXPLAIN WITH cte AS ( SELECT alias1 . pk AS field1 , alias2 . col_blob AS field2 FROM  bb AS alias1  LEFT  JOIN dd AS alias2 ON  alias1 . col_varchar_key =  alias2 . col_varchar_key WHERE  alias2 . pk &gt; 3 AND alias2 . pk &lt; ( 1 + 1 ) OR alias2 . pk  IN (7, 5) AND  alias2 . pk &lt;&gt; 3 AND  alias2 . pk IS NOT NULL  ) DELETE /*+ NO_MERGE(outrcte) */ LOW_PRIORITY outr2.* FROM d AS outr1 INNER JOIN a AS outr2 ON ( outr1 . col_int = outr2 . col_int_key ) LEFT OUTER JOIN cte AS outrcte ON outr2 . col_int_key = outrcte.field1 WHERE outr1 . col_int_key &lt; ( SELECT DISTINCT innr1 . col_int AS y FROM cc AS innr1 LEFT OUTER JOIN cte AS innrcte ON innr1.col_int_key &lt;= innrcte.field1 WHERE innr1 . col_int = 4  )" db-types="MySQL"/>
    <sql-case id="explain_by_mysql_source_test_case46" value="EXPLAIN WITH cte AS ( SELECT alias2 . col_datetime_key AS field1 , alias1 . col_varchar_key AS field2 , alias2 . col_int_key AS field3 FROM  view_b AS alias1  LEFT  JOIN  cc AS alias2  LEFT  JOIN view_d AS alias3 ON  alias2 . col_varchar_key =  alias3 . col_blob_key ON  alias1 . col_blob =  alias3 . col_blob_key WHERE  alias3 . col_varchar_key  LIKE ( 'w' ) OR  alias2 . pk &lt;&gt; 4  ) DELETE /*+ NO_MERGE(outrcte) */  QUICK outr1.*, outr2.* FROM d AS outr1 LEFT OUTER JOIN d AS outr2 ON ( outr1 . col_int = outr2 . col_int ) INNER JOIN cte AS outrcte ON outr1 . pk = outrcte.field1 WHERE (4, 7 )  IN ( SELECT DISTINCT innr1 . col_int_key AS x , innr1 . col_int AS y FROM cc AS innr1 JOIN cte AS innrcte ON innr1.pk = innrcte.field1 WHERE innr1 . col_int &gt;= innr1 . pk )" db-types="MySQL"/>
    <sql-case id="fetch_by_mysql_source_test_case1" value="FETCH cur1 INTO c" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case2" value="FLUSH TABLE WITH READ LOCK" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case4" value="FLUSH TABLE WITH READ LOCK" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case6" value="FLUSH TABLE db1.t1 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case8" value="FLUSH TABLE db1.t1 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case10" value="FLUSH TABLE export FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case12" value="FLUSH TABLE mysql.procs_priv" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case13" value="FLUSH TABLE mysql.procs_priv" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case15" value="FLUSH TABLE schema1.t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case16" value="FLUSH TABLE schema1.t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case18" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case20" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case22" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case24" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case26" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case28" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case30" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case32" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case34" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case36" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case38" value="FLUSH TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case40" value="FLUSH TABLE t1 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case42" value="FLUSH TABLE t1 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case44" value="FLUSH TABLE t1 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case46" value="FLUSH TABLE t1 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case48" value="FLUSH TABLE t1 WITH READ LOCK" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case49" value="FLUSH TABLE t1;                                    # Assertion happened here DROP TABLE t1" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case50" value="FLUSH TABLE t1;                                    # Assertion happened here UNLOCK TABLES" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case52" value="FLUSH TABLE t2" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case54" value="FLUSH TABLE t2" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case56" value="FLUSH TABLE t2 FOR EXPORT" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case58" value="FLUSH TABLE t4" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case60" value="FLUSH TABLE t4" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case62" value="FLUSH TABLE ta, tb" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case64" value="FLUSH TABLE tb" db-types="MySQL"/>
    <sql-case id="flush_by_mysql_source_test_case66" value="FLUSH TABLE tb" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case1" value="GET DIAGNOSTICS @n = NUMBER" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case3" value="GET DIAGNOSTICS @var = NUMBER" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case5" value="GET DIAGNOSTICS @var = NUMBER" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case7" value="GET DIAGNOSTICS @var = ROW_COUNT" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case9" value="GET DIAGNOSTICS @var = ROW_COUNT" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case11" value="GET DIAGNOSTICS @var1 = NUMBER, @var2 = ROW_COUNT" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case13" value="GET DIAGNOSTICS @var1 = ROW_COUNT, @var2 = NUMBER" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case15" value="GET DIAGNOSTICS CONDITION &quot;1&quot; @var = CLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case16" value="GET DIAGNOSTICS CONDITION 1 @class_origin = CLASS_ORIGIN, @subclass_origin = SUBCLASS_ORIGIN, @constraint_catalog = CONSTRAINT_CATALOG, @constraint_schema = CONSTRAINT_SCHEMA, @constraint_name = CONSTRAINT_NAME, @catalog_name = CATALOG_NAME, @schema_name = SCHEMA_NAME, @table_name = TABLE_NAME, @column_name = COLUMN_NAME, @cursor_name = CURSOR_NAME, @message_text = MESSAGE_TEXT, @mysql_errno = MYSQL_ERRNO, @returned_sqlstate = RETURNED_SQLSTATE" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case17" value="GET DIAGNOSTICS CONDITION 1 @class_origin = CLASS_ORIGIN, @subclass_origin = SUBCLASS_ORIGIN, @constraint_catalog = CONSTRAINT_CATALOG, @constraint_schema = CONSTRAINT_SCHEMA, @constraint_name = CONSTRAINT_NAME, @catalog_name = CATALOG_NAME, @schema_name = SCHEMA_NAME, @table_name = TABLE_NAME, @column_name = COLUMN_NAME, @cursor_name = CURSOR_NAME, @message_text = MESSAGE_TEXT, @mysql_errno = MYSQL_ERRNO, @returned_sqlstate = RETURNED_SQLSTATE" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case19" value="GET DIAGNOSTICS CONDITION 1 @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case20" value="GET DIAGNOSTICS CONDITION 1 @mysql_errno = MYSQL_ERRNO, @message_text = MESSAGE_TEXT, @returned_sqlstate = RETURNED_SQLSTATE, @class_origin = CLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case22" value="GET DIAGNOSTICS CONDITION 1 @var = SUBCLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case24" value="GET DIAGNOSTICS CONDITION 1 @var1 = MESSAGE_TEXT, @var2 = CLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case26" value="GET DIAGNOSTICS CONDITION 1 @varErrorMessage = message_text, @varErrorNo = mysql_errno" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case28" value="GET DIAGNOSTICS CONDITION 1 var" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case30" value="GET DIAGNOSTICS CONDITION 9999 @var = CLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case32" value="GET DIAGNOSTICS CONDITION @cond @var1 = CLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case34" value="GET DIAGNOSTICS CONDITION NULL @var = CLASS_ORIGIN" db-types="MySQL"/>
    <sql-case id="get_by_mysql_source_test_case36" value="GET DIAGNOSTICS var" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case1" value="GRANT INSERT,UPDATE,DELETE ON mysql.* to u1@120.0.0.1" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case3" value="GRANT PROXY ON ''@'' TO grant_plug" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case4" value="GRANT PROXY ON ''@'' TO grant_plug" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case5" value="GRANT PROXY ON ''@'' TO proxy_admin WITH GRANT OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case6" value="GRANT PROXY ON 'employee'@'localhost' TO 'empl_external'@'localhost'" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case7" value="GRANT PROXY ON 'employee'@'localhost' TO 'empl_external'@'localhost'" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case8" value="GRANT PROXY ON 'employee'@'localhost' TO 'empl_external'@'localhost'" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case9" value="GRANT PROXY ON 'internal_proxied'@'%' TO 'external_u1'@'%','external_u2'@'%'" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case10" value="GRANT PROXY ON 'user1'@'%' TO 'user2'@'%'" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case11" value="GRANT PROXY ON 'user1'@'%' TO 'user2'@'%'" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case12" value="GRANT PROXY ON bug12818542_dest@localhost TO bug12818542@localhost" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case13" value="GRANT PROXY ON bug12818542_dest@localhost TO bug12818542@localhost" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case15" value="GRANT PROXY ON bug20625566_dest@localhost TO bug20625566_user@localhost" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case16" value="GRANT PROXY ON grant_plug_dest@localhost TO grant_plug WITH GRANT OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case17" value="GRANT PROXY ON proxied_to_user@localhost TO proxy_user@localhost" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case19" value="GRANT PROXY ON root@localhost TO some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case21" value="GRANT PROXY ON some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890 TO root@localhost" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case23" value="GRANT SELECT ON mysql.user to u3@120.0.0.1" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case24" value="GRANT UPDATE (a) ON t1 TO user1@" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case25" value="GRANT `admin-db1t1` TO `admin-db1` WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case26" value="GRANT `admin-db1t1` TO `app`@`localhost` WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case27" value="GRANT consultants TO engineering WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case28" value="GRANT consultants TO engineering WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case29" value="GRANT consultants TO sally WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case30" value="GRANT r1 TO `app-middleware-db1`@`localhost` WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case31" value="GRANT r1 TO u1 WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case32" value="GRANT r1 TO u1 WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case33" value="GRANT r1 TO u1@localhost WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case34" value="GRANT r1 TO u2@localhost WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case35" value="GRANT r2 TO r1 WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case36" value="GRANT r2 TO u1@localhost WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case37" value="GRANT r2 TO u2@localhost WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case38" value="GRANT r3 TO r2 WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case39" value="GRANT r3 TO u1 WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case40" value="GRANT r3 TO u2 WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case41" value="GRANT role1 TO peter@clickhost.net" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case42" value="GRANT sys_role TO peter@clickhost.net" db-types="MySQL"/>
    <sql-case id="grant_by_mysql_source_test_case43" value="GRANT wp_administrators TO joe@localhost WITH ADMIN OPTION" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case2" value="HANDLER a CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case4" value="HANDLER alias1 READ `PRIMARY` NEXT WHERE `col_int_not_null_key` &lt;= 'j' LIMIT 8" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case6" value="HANDLER b CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case8" value="HANDLER db1.t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case10" value="HANDLER m1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case12" value="HANDLER s1.t1 OPEN AS t1" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case14" value="HANDLER t OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case16" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case18" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case20" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case22" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case24" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case26" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case28" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case30" value="HANDLER t1 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case32" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case34" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case36" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case38" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case40" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case42" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case44" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case46" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case48" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case50" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case52" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case54" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case56" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case58" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case60" value="HANDLER t1 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case62" value="HANDLER t1 OPEN AS A" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case64" value="HANDLER t1 OPEN AS A" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case66" value="HANDLER t1 OPEN AS b" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case68" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case70" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case72" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case74" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case76" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case78" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case80" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case82" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case84" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case86" value="HANDLER t1 READ FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case88" value="HANDLER t1 READ NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case90" value="HANDLER t1 READ NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case92" value="HANDLER t1 READ NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case94" value="HANDLER t1 READ NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case96" value="HANDLER t1 READ `PRIMARY` FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case97" value="HANDLER t1 READ `PRIMARY` LAST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case99" value="HANDLER t1 READ `PRIMARY` NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case101" value="HANDLER t1 READ `PRIMARY` NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case103" value="HANDLER t1 READ `PRIMARY` NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case105" value="HANDLER t1 READ `PRIMARY` PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case107" value="HANDLER t1 READ `PRIMARY` PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case109" value="HANDLER t1 READ `PRIMARY` PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case111" value="HANDLER t1 READ a FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case113" value="HANDLER t1 READ a FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case115" value="HANDLER t1 READ a NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case117" value="HANDLER t1 READ a NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case119" value="HANDLER t1 READ ab NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case121" value="HANDLER t1 READ ab NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case122" value="HANDLER t1 READ ab_asc FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case123" value="HANDLER t1 READ ab_asc LAST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case124" value="HANDLER t1 READ ab_asc NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case125" value="HANDLER t1 READ ab_asc NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case126" value="HANDLER t1 READ ab_asc NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case127" value="HANDLER t1 READ ab_asc NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case128" value="HANDLER t1 READ ab_asc PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case129" value="HANDLER t1 READ ab_asc PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case130" value="HANDLER t1 READ ab_asc PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case132" value="HANDLER t1 READ b NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case134" value="HANDLER t1 READ b NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case136" value="HANDLER t1 READ b NEXT" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case138" value="HANDLER t1 READ b PREV" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case140" value="HANDLER t1 READ k1 FIRST" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case142" value="HANDLER t2 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case144" value="HANDLER t2 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case146" value="HANDLER t2 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case148" value="HANDLER t3 OPEN" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case150" value="HANDLER t3 OPEN AS a" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case152" value="HANDLER t3 OPEN AS b" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case154" value="HANDLER t3 OPEN AS b" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case156" value="HANDLER tbl_18335504 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case158" value="HANDLER tbl_18335504 READ FIRST WHERE b = 2 AND 1 &gt; sleep(2)" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case160" value="HANDLER tbl_18335504 READ i1 FIRST WHERE a = 20 AND 1 &gt; sleep(2)" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case162" value="HANDLER temp_t2 CLOSE" db-types="MySQL"/>
    <sql-case id="handler_by_mysql_source_test_case164" value="HANDLER temp_t2 READ FIRST" db-types="MySQL"/>
    <sql-case id="if_by_mysql_source_test_case1" value="IF ($have_debug) { disable_query_log" db-types="MySQL"/>
    <sql-case id="if_by_mysql_source_test_case2" value="IF @aux &lt;&gt; 1 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'LOCK 2 not got. Abort.', MYSQL_ERRNO = 9999" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case2" value="IMPORT TABLE FROM 'pattern_which_matches_nothing'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case4" value="IMPORT TABLE FROM 's1/t1*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case6" value="IMPORT TABLE FROM 's1/t1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case8" value="IMPORT TABLE FROM 's2/t1*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case10" value="IMPORT TABLE FROM 't1.MYD'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case12" value="IMPORT TABLE FROM 't1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case14" value="IMPORT TABLE FROM 't1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case16" value="IMPORT TABLE FROM 't1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case18" value="IMPORT TABLE FROM 't1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case20" value="IMPORT TABLE FROM 't1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case22" value="IMPORT TABLE FROM 't1_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case24" value="IMPORT TABLE FROM 't1_*.sdi', 't2_*.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case26" value="IMPORT TABLE FROM 't1_.sdi'" db-types="MySQL"/>
    <sql-case id="import_by_mysql_source_test_case28" value="IMPORT TABLE FROM 't_case.sdi'" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case1" value="KILL (SELECT COUNT(*) FROM mysql.user)" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case3" value="KILL @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case5" value="KILL @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case7" value="KILL CONNECTION @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case8" value="KILL QUERY @aux" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case10" value="KILL QUERY @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case12" value="KILL QUERY @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case14" value="KILL QUERY @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case16" value="KILL QUERY @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case18" value="KILL QUERY @id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case20" value="KILL QUERY @thread_id" db-types="MySQL"/>
    <sql-case id="kill_by_mysql_source_test_case22" value="KILL QUERY @thread_id" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case2" value="LOAD DATA INFILE '../../std_data/bug20683959loaddata.txt' INTO TABLE t1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case3" value="LOAD DATA INFILE '../../std_data/bug21542698.dat' INTO TABLE t1 CHARACTER SET gb18030" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case4" value="LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v1 FIELDS ESCAPED BY '\\' TERMINATED BY ',' ENCLOSED BY '&quot;' LINES TERMINATED BY '\n' (c1, c2)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case5" value="LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v2 FIELDS ESCAPED BY '\\' TERMINATED BY ',' ENCLOSED BY '&quot;' LINES TERMINATED BY '\n' (c0, c2)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case6" value="LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v2 FIELDS ESCAPED BY '\\' TERMINATED BY ',' ENCLOSED BY '&quot;' LINES TERMINATED BY '\n' (c1, c2)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case7" value="LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v3 FIELDS ESCAPED BY '\\' TERMINATED BY ',' ENCLOSED BY '&quot;' LINES TERMINATED BY '\n' (d1, d2)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case9" value="LOAD DATA INFILE '../../std_data/loaddata3.dat' IGNORE INTO TABLE t1 FIELDS TERMINATED BY '' ENCLOSED BY '' IGNORE 1 LINES" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case11" value="LOAD DATA INFILE '../../std_data/loaddata_incomplete_escape.dat' INTO TABLE t1 IGNORE 20 LINES" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case13" value="LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1 ()" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case15" value="LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1 CHARACTER SET utf8mb4" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case17" value="LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t2 FIELDS TERMINATED BY '' LINES TERMINATED BY ''" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case19" value="LOAD DATA INFILE '../../std_data/rpl_loaddata.dat' INTO TABLE t2 (a, @b) SET b= @b + 2" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case20" value="LOAD DATA INFILE '../../std_data/wl6030.dat' INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '&quot;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case22" value="LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '&quot;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case23" value="LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE t2 FIELDS TERMINATED BY ',' ENCLOSED BY '&quot;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case24" value="LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE t2 FIELDS TERMINATED BY ',' ENCLOSED BY '&quot;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case25" value="LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE v2 FIELDS TERMINATED BY ',' ENCLOSED BY '&quot;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case26" value="LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE v2 FIELDS TERMINATED BY ',' ENCLOSED BY '&quot;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case27" value="LOAD DATA INFILE '../../std_data/x_y_data.csv' INTO TABLE t1 FIELDS TERMINATED BY ',' (x, y)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case28" value="LOAD DATA INFILE '../../std_data/x_y_data.csv' INTO TABLE t1 FIELDS TERMINATED BY ',' (x, y) SET g = ST_SRID(POINT(x, y), 4326)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case30" value="LOAD DATA INFILE '../../tmp/data2.tmp' INTO TABLE t2" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case32" value="LOAD DATA INFILE 'loadtest.txt' INTO TABLE t1 PARTITION (pNeg)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case33" value="LOAD DATA INFILE 'loadtest.txt' INTO TABLE t1 PARTITION (pNeg, `p10-99`) CHARACTER SET latin1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case34" value="LOAD DATA INFILE 'loadtest.txt' INTO TABLE t1 PARTITION (pNeg, subp4, subp5)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case36" value="LOAD DATA INFILE 't-1' INTO TABLE t1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case38" value="LOAD DATA INFILE 't1.dat' INTO TABLE t1(b)" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case40" value="LOAD DATA INFILE 'test.dat' INTO TABLE v(@a, @d) SET a= @a, d= @d" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case42" value="LOAD DATA INFILE 'tmp1.txt' INTO TABLE t1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case44" value="LOAD DATA INFILE 'tmp2.txt' INTO TABLE t1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case46" value="LOAD DATA LOCAL INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case48" value="LOAD XML INFILE '../../std_data/bug16171518_2.dat' INTO TABLE t1" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case50" value="LOAD XML INFILE '../../std_data/bug16171518_2.dat' INTO TABLE t4 (col1, col2, col3) SET col4 = NULL" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case52" value="LOAD XML INFILE '../../std_data/bug30753708.dat' INTO TABLE t1 ROWS IDENTIFIED BY '&lt;address&gt;'" db-types="MySQL"/>
    <sql-case id="load_by_mysql_source_test_case54" value="LOAD XML INFILE '../../std_data/loadxml.dat' INTO TABLE t1 ROWS IDENTIFIED BY '&lt;row&gt;' (a,@b) SET b=concat('!',@b)" db-types="MySQL"/>
    <sql-case id="open_by_mysql_source_test_case1" value="OPEN cur1" db-types="MySQL"/>
    <sql-case id="replace_by_mysql_source_test_case1" value="REPLACE INTO t1 SELECT 102, REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="replace_by_mysql_source_test_case2" value="REPLACE INTO t1 SET c11= 102, c12= REPEAT('ab', @max_allowed_packet)" db-types="MySQL"/>
    <sql-case id="replace_by_mysql_source_test_case3" value="REPLACE INTO t1 VALUES (1, REPEAT('a', 129015)),(1, NULL), (2, NULL),(3, NULL),(4, NULL),(5, NULL),(6, NULL),(7, NULL), (1, REPEAT('b', 129016)),(1, NULL), (1, REPEAT('c', 129015)),(1, REPEAT('d', 129015))" db-types="MySQL"/>
    <sql-case id="replace_by_mysql_source_test_case4" value="REPLACE INTO t1 VALUES (102, REPEAT('ab', @max_allowed_packet))" db-types="MySQL"/>
    <sql-case id="resignal_by_mysql_source_test_case1" value="RESIGNAL" db-types="MySQL"/>
    <sql-case id="resignal_by_mysql_source_test_case2" value="RESIGNAL SQLSTATE '12345'" db-types="MySQL"/>
    <sql-case id="resignal_by_mysql_source_test_case3" value="RESIGNAL SQLSTATE VALUE '12345'" db-types="MySQL"/>
    <sql-case id="resignal_by_mysql_source_test_case4" value="RESIGNAL foo" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case5" value="SET @@myisam_mmap_size= 500M" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case7" value="SET @ENCSTR=REPEAT('K',100)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case9" value="SET @KEYS='helloworld'" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case11" value="SET @KEYS=RANDOM_BYTES(1)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case13" value="SET @KEYS=REPEAT('c', 16)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case19" value="SET @a = REPEAT('a',1048576)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case20" value="SET @a = REPEAT('a',1048576)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case21" value="SET @a = REPEAT('a',2147483647)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case22" value="SET @a = REPEAT('a',2147483647)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case41" value="SET @decimal= 1.1" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case49" value="SET @rules= CONCAT(&quot;IF &quot;, REPEAT(&quot;x&quot;, 20000), &quot;&gt;9 THEN drop.&quot;)" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case53" value="SET @sav_big= (SELECT COALESCE(@session.big_tables, 0))" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case55" value="SET @save_filters= @@global.dragnet.log_error_filter_rules" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case56" value="SET @sql='DROP TABLE 18616826_does_not_exist'" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case57" value="SET @sql='SELECT command_type, argument FROM mysql.general_log WHERE argument LIKE &quot;%Bug#16953758%&quot;'" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case59" value="SET @start_value= @@global.syseventlog.include_pid" db-types="MySQL"/>
    <sql-case id="set_by_mysql_source_test_case61" value="SET @str_ascii=_ASCII'abcxyz'" db-types="MySQL"/>
    <sql-case id="show_by_mysql_source_test_case12" value="SHOW CREATE TABLE ```a`" db-types="MySQL"/>
    <sql-case id="show_by_mysql_source_test_case13" value="SHOW CREATE TABLE ```ab````cd```" db-types="MySQL"/>
    <sql-case id="show_by_mysql_source_test_case14" value="SHOW CREATE TABLE ```ab``cd```" db-types="MySQL"/>
    <sql-case id="show_by_mysql_source_test_case15" value="SHOW CREATE USER 'kristofer'@'localhost'" db-types="MySQL"/>
    <sql-case id="show_by_mysql_source_test_case16" value="SHOW CREATE USER 'kristofer'@'localhost'" db-types="MySQL"/>
    <sql-case id="show_by_mysql_source_test_case18" value="SHOW CREATE USER user1@47.9.9.9" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case1" value="SIGNAL SQLSTATE '00000'" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case2" value="SIGNAL SQLSTATE '00001'" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case3" value="SIGNAL SQLSTATE '01000'" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case4" value="SIGNAL SQLSTATE '02000'" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case5" value="SIGNAL SQLSTATE '23000'" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case6" value="SIGNAL SQLSTATE '77777' SET MESSAGE_TEXT=''" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case7" value="SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 0" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case8" value="SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 4294967295" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case9" value="SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 65535" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case10" value="SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 65536" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case11" value="SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 99999" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case12" value="SIGNAL SQLSTATE VALUE '23000'" db-types="MySQL"/>
    <sql-case id="signal_by_mysql_source_test_case13" value="SIGNAL foo" db-types="MySQL"/>
    <sql-case id="stop_by_mysql_source_test_case2" value="STOP SLAVE" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case1" value="VALUES ROW((SELECT 1), 10)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case2" value="VALUES ROW((SELECT a FROM t0), 10)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case3" value="VALUES ROW()" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case4" value="VALUES ROW(1) ORDER BY '1'" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case5" value="VALUES ROW(1) ORDER BY '1' DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case6" value="VALUES ROW(1) ORDER BY (SELECT 1)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case7" value="VALUES ROW(1) ORDER BY (SELECT 1) DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case8" value="VALUES ROW(1) ORDER BY (SELECT column_0)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case9" value="VALUES ROW(1) ORDER BY (SELECT column_0) DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case10" value="VALUES ROW(1) ORDER BY 1" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case11" value="VALUES ROW(1) ORDER BY 1 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case12" value="VALUES ROW(1) ORDER BY column_0" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case13" value="VALUES ROW(1) ORDER BY column_0 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case14" value="VALUES ROW(1) UNION SELECT 2" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case15" value="VALUES ROW(1), ROW(2) LIMIT 1" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case16" value="VALUES ROW(1), ROW(2, 20)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case17" value="VALUES ROW(1),ROW(2) ORDER BY '1'" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case18" value="VALUES ROW(1),ROW(2) ORDER BY '1' DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case19" value="VALUES ROW(1),ROW(2) ORDER BY (SELECT 1)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case20" value="VALUES ROW(1),ROW(2) ORDER BY (SELECT 1) DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case21" value="VALUES ROW(1),ROW(2) ORDER BY (SELECT column_0)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case22" value="VALUES ROW(1),ROW(2) ORDER BY (SELECT column_0) DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case23" value="VALUES ROW(1),ROW(2) ORDER BY 1" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case24" value="VALUES ROW(1),ROW(2) ORDER BY 1" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case25" value="VALUES ROW(1),ROW(2) ORDER BY 1 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case26" value="VALUES ROW(1),ROW(2) ORDER BY 1 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case27" value="VALUES ROW(1),ROW(2) ORDER BY column_0" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case28" value="VALUES ROW(1),ROW(2) ORDER BY column_0 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case29" value="VALUES ROW(1, 1.0, 1.0E0, '1', DATE'2000-01-01', TIME'00:00:01', TIMESTAMP'2000-01-01 00:00:01', CAST('{&quot;j&quot;:&quot;1&quot;}' AS JSON)), ROW(2, 2.0, 2.0E0, '2', DATE'2000-01-02', TIME'00:00:02', TIMESTAMP'2000-01-01 00:00:01', CAST('{&quot;j&quot;:&quot;2&quot;}' AS JSON))" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case30" value="VALUES ROW(1, 10)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case31" value="VALUES ROW(1, 10) UNION SELECT 2, 20" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case32" value="VALUES ROW(1, 10), ROW(2)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case33" value="VALUES ROW(1, 10), ROW(2, &quot;20&quot;)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case34" value="VALUES ROW(1, 10), ROW(2, 20)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case35" value="VALUES ROW(1, 10), ROW(2, NULL)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case36" value="VALUES ROW(1, NULL)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case37" value="VALUES ROW(1,9),ROW(2,4) ORDER BY '2'" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case38" value="VALUES ROW(1,9),ROW(2,4) ORDER BY '2' DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case39" value="VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT 2)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case40" value="VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT 2) DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case41" value="VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT column_1)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case42" value="VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT column_1) DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case43" value="VALUES ROW(1,9),ROW(2,4) ORDER BY 2" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case44" value="VALUES ROW(1,9),ROW(2,4) ORDER BY 2 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case45" value="VALUES ROW(1,9),ROW(2,4) ORDER BY column_1" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case46" value="VALUES ROW(1,9),ROW(2,4) ORDER BY column_1 DESC" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case47" value="VALUES ROW(DEFAULT)" db-types="MySQL"/>
    <sql-case id="values_by_mysql_source_test_case48" value="VALUES ROW(RAND(0), RAND(1))" db-types="MySQL"/>
    <sql-case id="while_by_mysql_source_test_case1" value="WHILE ($c) { EVAL INSERT INTO r SELECT $c, HEX(@a &lt;&lt; $c), HEX(@a &gt;&gt; $c)" db-types="MySQL"/>
    <sql-case id="with_by_mysql_source_test_case1" value="WITH cte AS ( SELECT alias1 . col_datetime_key AS field1 FROM  view_c AS alias1  RIGHT  JOIN view_bb AS alias2 ON  alias1 . col_blob_key =  alias2 . col_blob_key WHERE alias2 . col_varchar_key &gt;= 'r' AND alias2 . col_varchar_key &lt;= 'z' AND alias2 . col_varchar_key &gt; 'x' AND alias2 . col_varchar_key &lt;= 'z' AND  alias2 . pk &gt; 3 AND alias2 . pk &lt; ( 7 + 1 ) OR  alias2 . col_int_key  IN (5) ORDER BY field1  , field1 ) DELETE     outr1.* FROM b AS outr1 JOIN e AS outr2 ON ( outr1 . col_int_key = outr2 . col_int ) JOIN c AS outr3 ON ( outr1 . col_datetime_key = outr3 . col_date_key ) LEFT JOIN cte AS outrcte ON outr1 . col_blob = outrcte.field1 WHERE ( _utf8 'g' )  IN ( SELECT  innrcte . field1 AS x FROM aa AS innr1 JOIN cte AS innrcte ON innr1.pk = innrcte.field1 WHERE outr1 . col_int_key &lt;&gt; 0 ORDER BY innr1 . col_blob )" db-types="MySQL"/>
    <sql-case id="with_by_mysql_source_test_case2" value="WITH cte AS ( SELECT alias1 . col_int AS field1 FROM  dd AS alias1  LEFT  JOIN d AS alias2 ON  alias1 . col_blob =  alias2 . col_blob_key WHERE  alias2 . col_varchar_key  IN ('m') ORDER BY field1  LIMIT 10) DELETE IGNORE FROM outr2.* USING dd AS outr1 JOIN d AS outr2 ON ( outr1 . col_blob = outr2 . col_varchar ) JOIN d AS outr3 ON ( outr1 . pk = outr3 . col_int ) LEFT OUTER JOIN cte AS outrcte ON outr2 . pk = outrcte.field1 WHERE outrcte . field1 = ( SELECT  innr1 . col_int AS y FROM dd AS innr2 RIGHT OUTER JOIN dd AS innr1 ON ( innr2 . col_date &gt; innr1 . col_date ) INNER JOIN cte AS innrcte ON innr2.col_int_key &lt;= innrcte.field1 WHERE innr1 . col_varchar_key &lt;= 'u' ORDER BY innr1 . col_int_key )" db-types="MySQL"/>
    <sql-case id="with_by_mysql_source_test_case3" value="WITH cte AS ( SELECT alias1 . col_int_key AS field1 FROM  a AS alias1  LEFT  JOIN c AS alias2 ON  alias1 . col_blob =  alias2 . col_blob_key WHERE  alias2 . pk &gt; 3 AND alias2 . pk &lt; ( 3 + 10 ) OR  alias1 . col_varchar_key &gt;= 'z' AND alias1 . col_varchar_key &lt;= 'k'  ) DELETE /*+ NO_MERGE(outrcte) */ LOW_PRIORITY QUICK  outr1.*, outr2.* FROM d AS outr1 LEFT JOIN c AS outr2 ON ( outr1 . col_int = outr2 . pk ) JOIN a AS outr3 ON ( outr1 . col_int_key = outr3 . pk ) RIGHT JOIN cte AS outrcte ON outr1 . col_int_key = outrcte.field1 WHERE outr1 . col_blob_key &lt;&gt; ( SELECT  innr1 . col_blob AS y FROM a AS innr2 INNER JOIN a AS innr1 ON ( innr2 . col_datetime &gt;= innr1 . col_datetime ) RIGHT OUTER JOIN cte AS innrcte ON innr2.col_int_key &lt; innrcte.field1 WHERE innr1 . col_datetime = '2006-02-24'  )" db-types="MySQL"/>
    <sql-case id="with_by_mysql_source_test_case4" value="WITH qn AS (SELECT (SELECT  MAX(a) FROM t1) as field1 FROM t1 GROUP BY field1 WITH ROLLUP HAVING GROUPING(field1)=0) SELECT * FROM qn" db-types="MySQL"/>
    <sql-case id="with_by_mysql_source_test_case5" value="WITH qn AS (SELECT a, b, c, GROUPING(a) as grouping_a FROM t1 GROUP BY a,b,c WITH ROLLUP) SELECT * FROM qn" db-types="MySQL"/>
    <sql-case id="with_by_mysql_source_test_case6" value="WITH qn AS(SELECT GROUPING((SELECT MAX(b) FROM t1)) as field1 FROM t1 GROUP BY (SELECT MAX(b) FROM t1) WITH ROLLUP) SELECT qn.field1 FROM qn" db-types="MySQL"/>
    <sql-case id="low_abcd_by_mysql_source_test_case1" value="abcd CREATE TABLE t1 (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name TINYBLOB NOT NULL, modified TIMESTAMP DEFAULT '0000-00-00 00:00:00', INDEX namelocs (name(255))) ENGINE = InnoDB PARTITION BY HASH(id) PARTITIONS 2" db-types="MySQL"/>
    <sql-case id="low_alter_by_mysql_source_test_case2" value="alter event e_43 do begin alter event e_43 on schedule every 5 minute; insert into test_nested values(1); end" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case1" value="begin work" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case3" value="begin work" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case5" value="begin work" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case7" value="begin work" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case9" value="begin work" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case11" value="begin work" db-types="MySQL"/>
    <sql-case id="low_begin_by_mysql_source_test_case13" value="begin work" db-types="MySQL"/>
    <sql-case id="low_cache_by_mysql_source_test_case1" value="cache index t1,t2 in default" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case1" value="call db1_secret.stamp(2)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case2" value="call db1_secret.stamp(3)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case3" value="call db1_secret.stamp(5)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case4" value="call db1_secret.stamp(6)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case5" value="call db_bug14533.bug14533_1()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case6" value="call db_bug14533.bug14533_2()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case8" value="call mtr.add_suppression(&quot; '\..test.t1'&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case10" value="call mtr.add_suppression(&quot;.* Failed to activate default role .*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case12" value="call mtr.add_suppression(&quot;.* Native table .* has the wrong structure&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case14" value="call mtr.add_suppression(&quot;.*No error message, or error message of non-string type. This is almost certainly a bug!&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case16" value="call mtr.add_suppression(&quot;.*Password salt for user.*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case18" value="call mtr.add_suppression(&quot;.*The system table mysql.global_grants is missing.*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case20" value="call mtr.add_suppression(&quot;.*The system table mysql.global_grants.*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case22" value="call mtr.add_suppression(&quot;.*using log_message.. with .*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case24" value="call mtr.add_suppression(&quot;192.0.2.4&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case26" value="call mtr.add_suppression(&quot;2001:db8::6:6&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case28" value="call mtr.add_suppression(&quot;ACL DDLs will not work unless mysql_upgrade is executed&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case30" value="call mtr.add_suppression(&quot;ACL table mysql.[a-zA-Z_]* missing. Some operations may fail.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case32" value="call mtr.add_suppression(&quot;ACL table mysql.global_grants missing. Some operations may fail.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case34" value="call mtr.add_suppression(&quot;Can't create thread to&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case36" value="call mtr.add_suppression(&quot;Cannot find index .PRIMARY. in InnoDB index translation table.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case38" value="call mtr.add_suppression(&quot;Column count of mysql.* is wrong&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case39" value="call mtr.add_suppression(&quot;Column count of mysql.* is wrong. &quot; &quot;Expected .*, found .*. &quot; &quot;The table is probably corrupted&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case40" value="call mtr.add_suppression(&quot;Column count of mysql.* is wrong. &quot; &quot;Expected .*, found .*. &quot; &quot;The table is probably corrupted&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case41" value="call mtr.add_suppression(&quot;Column count of mysql.* is wrong. &quot; &quot;Expected .*, found .*. &quot; &quot;The table is probably corrupted&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case43" value="call mtr.add_suppression(&quot;Column count of performance_schema.replication_group_member_stats is wrong. Expected 13, found 9.*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case45" value="call mtr.add_suppression(&quot;Column count of performance_schema.threads is wrong. Expected 18, found 17.*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case47" value="call mtr.add_suppression(&quot;Couldn't load plugin named .* with soname &quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case49" value="call mtr.add_suppression(&quot;Creating routine without parsing routine body&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case50" value="call mtr.add_suppression(&quot;Dictionary file not specified&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case51" value="call mtr.add_suppression(&quot;Dictionary file not specified&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case52" value="call mtr.add_suppression(&quot;Dictionary file not specified&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case53" value="call mtr.add_suppression(&quot;Dictionary file not specified&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case54" value="call mtr.add_suppression(&quot;Dictionary file not specified&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case55" value="call mtr.add_suppression(&quot;Did not write failed .*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case57" value="call mtr.add_suppression(&quot;Error creating master info: Error checking repositories.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case59" value="call mtr.add_suppression(&quot;Error in checking mysql.slave_master_info repository info type of TABLE&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case61" value="call mtr.add_suppression(&quot;Failed to create or recover replication info repositories.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case63" value="call mtr.add_suppression(&quot;Failed to initialize TLS for channel: mysql_main&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case65" value="call mtr.add_suppression(&quot;Failed to set up SSL because of the following SSL library error&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case67" value="call mtr.add_suppression(&quot;Failed to set up SSL because of the following SSL library error&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case69" value="call mtr.add_suppression(&quot;Failed to set up SSL because of the following SSL library error&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case71" value="call mtr.add_suppression(&quot;For complete&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case72" value="call mtr.add_suppression(&quot;Found 1 prepared XA transactions&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case73" value="call mtr.add_suppression(&quot;Found 1 prepared XA transactions&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case75" value="call mtr.add_suppression(&quot;Found invalid password for user:*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case77" value="call mtr.add_suppression(&quot;Got an error from thread_id=.*ha_myisam.cc:&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case79" value="call mtr.add_suppression(&quot;Got an error from thread_id=.*ha_myisam.cc:&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case81" value="call mtr.add_suppression(&quot;Info table is not ready to be used. Table 'mysql.slave_master_info' cannot be opened&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case82" value="call mtr.add_suppression(&quot;Invalid .* username when attempting to connect to the master server&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case83" value="call mtr.add_suppression(&quot;Missing .ibd file for table&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case85" value="call mtr.add_suppression(&quot;MySQL thread id .*, query id .* localhost.*root Checking table&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case87" value="call mtr.add_suppression(&quot;MySQL thread id .*, query id .* localhost.*root Checking table&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case88" value="call mtr.add_suppression(&quot;New log files created&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case89" value="call mtr.add_suppression(&quot;New log files created&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case90" value="call mtr.add_suppression(&quot;Out of memory&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case91" value="call mtr.add_suppression(&quot;Plugin .* is not to be used as an .early. plugin&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case93" value="call mtr.add_suppression(&quot;Plugin mysqlx reported: 'Unable to switch context&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case95" value="call mtr.add_suppression(&quot;Plugin validate_password reported: .Dictionary file not specified.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case96" value="call mtr.add_suppression(&quot;REVOKE/GRANT failed .* An incident event has been written to the binary log which will stop the slaves.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case98" value="call mtr.add_suppression(&quot;Resizing redo log from&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case100" value="call mtr.add_suppression(&quot;Server SSL certificate doesn't verify&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case101" value="call mtr.add_suppression(&quot;Server SSL certificate doesn't verify&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case103" value="call mtr.add_suppression(&quot;Slave SQL.*Can.t execute the query because you have a conflicting read lock., Error_code: MY-001223&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case105" value="call mtr.add_suppression(&quot;Slave SQL.*Table definition on master and slave does not match: Column 1 size mismatch.* Error_code: 1535&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case107" value="call mtr.add_suppression(&quot;Slave: Failed to initialize the master info structure for channel&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case109" value="call mtr.add_suppression(&quot;Some of the user accounts with SUPER privileges were disabled because of empty mysql.user.plugin value.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case111" value="call mtr.add_suppression(&quot;Some of the user accounts with SUPER&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case112" value="call mtr.add_suppression(&quot;Starting to delete and rewrite log files&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case113" value="call mtr.add_suppression(&quot;Starting to delete and rewrite log files&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case115" value="call mtr.add_suppression(&quot;Storage engine '.*' does not support system tables. \\[mysql.*\\]&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case117" value="call mtr.add_suppression(&quot;Table 'mysql.component' doesn't exist&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case119" value="call mtr.add_suppression(&quot;The plugin .* used to authenticate user .* is not loaded. Nobody can currently login using this account&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case121" value="call mtr.add_suppression(&quot;The privilege system failed to initialize correctly.*&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case123" value="call mtr.add_suppression(&quot;Unable to delete statistics for table mysql.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case125" value="call mtr.add_suppression(&quot;Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case127" value="call mtr.add_suppression(&quot;Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case129" value="call mtr.add_suppression(&quot;Upgrading redo log&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case131" value="call mtr.add_suppression(&quot;User entry 'B20614545'@'localhost' has an empty plugin value. The user will be ignored and no one can login with this user anymore.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case133" value="call mtr.add_suppression(&quot;User entry 'user_old_pass_pn'@'%' has an empty plugin value. The user will be ignored and no one can login with this user anymore.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case135" value="call mtr.add_suppression(&quot;User entry .B19011337&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case137" value="call mtr.add_suppression(&quot;When binlog_format=STATEMENT, the option binlog_row_value_options=PARTIAL_JSON&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case139" value="call mtr.add_suppression(&quot;When binlog_row_value_options=PARTIAL_JSON, the option log_bin_use_v1_row_events=1&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case141" value="call mtr.add_suppression(&quot;You need to use --log-bin to make --binlog-format work&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case143" value="call mtr.add_suppression(&quot;You need to use --log-bin to make --binlog-format work&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case145" value="call mtr.add_suppression(&quot;You need to use --log-bin to make --binlog-format work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case147" value="call mtr.add_suppression(&quot;You need to use --log-bin to make --binlog-format work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case148" value="call mtr.add_suppression(&quot;You need to use --log-bin to make --log-replica-updates work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case149" value="call mtr.add_suppression(&quot;You need to use --log-bin to make --log-replica-updates work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case151" value="call mtr.add_suppression(&quot;\\[ERROR\\] .*MY-\\d+.* Cannot open datafile for read-only&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case153" value="call mtr.add_suppression(&quot;\\[ERROR\\] .*MY-\\d+.* Table `test`.`t1` .* Partition.* InnoDB internal&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case155" value="call mtr.add_suppression(&quot;\\[ERROR\\] \\[MY\\-010000\\] \\[Server\\] Errors should not be suppressed&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case157" value="call mtr.add_suppression(&quot;\\[Warning\\] .*MY-\\d+.* Missing .ibd file for table `test`\.`t1` .* &quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case159" value="call mtr.add_suppression(&quot;\\[Warning\\] .*MY-\\d+.* Tablespace .*, name '.*', file '.*' is missing!&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case161" value="call mtr.add_suppression(&quot;\\[Warning\\] .*MY-\\d+.* You need to use --log-bin to make --binlog-format work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case163" value="call mtr.add_suppression(&quot;\\[Warning\\] \\[[^]]*\\] Server shutdown in progress&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case164" value="call mtr.add_suppression(&quot;\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] Unsafe statement written .* = STATEMENT.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case166" value="call mtr.add_suppression(&quot;\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-format work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case168" value="call mtr.add_suppression(&quot;\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-format work.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case170" value="call mtr.add_suppression(&quot;\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] option 'persisted_globals_load': boolean value 'NULL' was not recognized. Set to OFF.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case171" value="call mtr.add_suppression(&quot;\\[Warning\\] option 'persisted_globals_load': boolean value 'NULL' was not recognized. Set to OFF.&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case173" value="call mtr.add_suppression(&quot;filter_rules: *&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case175" value="call mtr.add_suppression(&quot;is expected to be transactional&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case177" value="call mtr.add_suppression(&quot;mysql.user has no `Event_priv` column at position 28&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case178" value="call mtr.add_suppression(&quot;option 'thread_stack':&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case180" value="call mtr.add_suppression(&quot;references invalid&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case181" value="call mtr.add_suppression(&quot;row in wrong partition:&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case183" value="call mtr.add_suppression(&quot;table is missing or has an incorrect definition&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case184" value="call mtr.add_suppression('Can not read and process value of User_attributes column from mysql.user table for user')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case185" value="call mtr.add_suppression('Can not read and process value of User_attributes column from mysql.user table for user')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case186" value="call mtr.add_suppression('Failed to open optimizer cost constant tables')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case187" value="call mtr.add_suppression('Invalid device type -1 for &quot;InnoDB&quot; storage engine for cost constant &quot;io_block_read_cost&quot; in mysql.engine_cost table')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case188" value="call mtr.add_suppression('Invalid value for cost constant &quot;io_block_read_cost&quot; for &quot;default&quot; storage engine and device type 0 in mysql.engine_cost table: 0.0')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case189" value="call mtr.add_suppression('Invalid value for cost constant &quot;key_compare_cost&quot; in mysql.server_cost table: 0.0')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case190" value="call mtr.add_suppression('Invalid value for cost constant &quot;row_evaluate_cost&quot; in mysql.server_cost table: -1.0')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case192" value="call mtr.add_suppression('Unknown cost constant &quot;lunch_cost&quot; in mysql.engine_cost table')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case193" value="call mtr.add_suppression('Unknown cost constant &quot;lunch_cost&quot; in mysql.server_cost table')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case194" value="call mtr.add_suppression('Unknown storage engine &quot;Falcon&quot; in mysql.engine_cost table')" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case195" value="call mysqltest.sp1()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case196" value="call mysqltest_1.p1()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case197" value="call mysqltest_1.p1()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case198" value="call mysqltest_db.p1()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case199" value="call mysqltest_db.p_does_not_exist()" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case201" value="call sptest.p1(1)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case202" value="call sptest.p1(2)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case203" value="call sptest.p1(3)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case204" value="call sptest.p1(4)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case205" value="call sys.create_synonym_db(&quot;INFORMATION_SCHEMA&quot;, &quot;I_S&quot;)" db-types="MySQL"/>
    <sql-case id="low_call_by_mysql_source_test_case206" value="call test.longprocedure(@value); select @value" db-types="MySQL"/>
    <sql-case id="low_default-character-set=koi8r_by_mysql_source_test_case1" value="default-character-set=koi8r default-collation=koi8r_bin let $MYSQLD_LOG= $MYSQLTEST_VARDIR/log/save_dd_upgrade_1.log" db-types="MySQL"/>
    <sql-case id="low_drop_by_mysql_source_test_case1" value="drop function `f``1`" db-types="MySQL"/>
    <sql-case id="low_drop_by_mysql_source_test_case5" value="drop table `t1a``b`" db-types="MySQL"/>
    <sql-case id="low_drop_by_mysql_source_test_case7" value="drop table `t``1`, `t 1`" db-types="MySQL"/>
    <sql-case id="low_drop_by_mysql_source_test_case9" value="drop table if exists t1,t2,t3,t4,t9,`t1a``b`,v1,v2,v3,v4,v5,v6" db-types="MySQL"/>
    <sql-case id="low_drop_by_mysql_source_test_case11" value="drop view if exists t1,t2,`t1a``b`,v1,v2,v3,v4,v5,v6" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case2" value="explain format=json select count(distinct concat(c1, repeat('xx', 250))) as cc from t2" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case4" value="explain select * from t1 use index() where c=1" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case6" value="explain select 2 between null and 1,2 between 3 AND NULL,NULL between 1 and 2,2 between NULL and 3, 2 between 1 AND null" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case8" value="explain select cast(1 as binary(4294967295))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case9" value="explain select cast(1 as binary(4294967296))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case10" value="explain select cast(1 as char(4294967295))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case11" value="explain select cast(1 as char(4294967296))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case12" value="explain select cast(1 as decimal(4294967296))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case13" value="explain select cast(1 as decimal(64, 999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case14" value="explain select cast(1 as decimal(999999999999999999999999999999999999))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case15" value="explain select cast(1 as nchar(4294967295))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case16" value="explain select cast(1 as nchar(4294967296))" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case18" value="explain select id, not (a=1 is false) from t1" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case19" value="explain select id, not (a=1 is true) from t1" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case20" value="explain select id, not (a=1 is unknown) from t1" db-types="MySQL"/>
    <sql-case id="low_explain_by_mysql_source_test_case23" value="explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)))" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case2" value="flush table mysqltest_db1.t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case4" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case6" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case8" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case10" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case12" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case14" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case16" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case18" value="flush table t1" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case20" value="flush table t1 with read lock" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case22" value="flush table t1, t2 with read lock" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case24" value="flush table t2" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case26" value="flush table t2" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case28" value="flush table t2" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case30" value="flush table t2 with read lock" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case32" value="flush table v1 with read lock" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case34" value="flush table v1, v2, v3 with read lock" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case36" value="flush table v3 with read lock" db-types="MySQL"/>
    <sql-case id="low_flush_by_mysql_source_test_case37" value="flush table with read lock" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case1" value="handler a1 read first limit 9" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case3" value="handler a1 read first limit 9" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case5" value="handler a2 read first limit 9" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case7" value="handler a2 read first limit 9" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case9" value="handler t close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case11" value="handler t close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case13" value="handler t close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case15" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case17" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case19" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case21" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case23" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case25" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case27" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case29" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case31" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case33" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case35" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case37" value="handler t1 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case39" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case41" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case43" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case45" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case47" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case49" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case51" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case53" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case55" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case57" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case59" value="handler t1 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case61" value="handler t1 open as a1" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case63" value="handler t1 open as a2" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case65" value="handler t1 open as t1" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case67" value="handler t1 open t" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case69" value="handler t1 open t" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case71" value="handler t1 open t" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case73" value="handler t1 read a next" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case75" value="handler t1 read a next" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case76" value="handler t1 read a=(1)" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case78" value="handler t1 read next limit 1" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case80" value="handler t1 read next limit 1" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case82" value="handler t1_base close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case84" value="handler t1_base open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case86" value="handler t1_base read first" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case88" value="handler t2 close" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case90" value="handler t2 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case92" value="handler t2 open" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case94" value="handler t2 read first limit 9" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case96" value="handler t2 read first limit 9" db-types="MySQL"/>
    <sql-case id="low_handler_by_mysql_source_test_case97" value="handler v1 open as xx" db-types="MySQL"/>
    <sql-case id="low_kill_by_mysql_source_test_case2" value="kill query @id" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case1" value="load data infile '../../std_data/bad_gis_data.dat' into table t1" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case3" value="load data infile '../../std_data/loaddata1.dat' ignore into table t1 fields terminated by ','" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case5" value="load data infile '../../std_data/loaddata1.dat' into table t1 fields terminated by ',' IGNORE 2 LINES" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case7" value="load data infile '../../std_data/loaddata2.dat' ignore into table v1 fields terminated by ',' enclosed by ''''" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case8" value="load data infile '../../std_data/loaddata2.dat' ignore into table v1 fields terminated by ',' enclosed by ''''" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case9" value="load data infile '../../std_data/loaddata2.dat' into table v1 fields terminated by ',' enclosed by ''''" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case10" value="load data infile '../../std_data/loaddata2.dat' into table v1 fields terminated by ',' enclosed by ''''" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case12" value="load data infile '../../std_data/loaddata3.dat' ignore into table v1 fields terminated by '' enclosed by '' ignore 1 lines" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case13" value="load data infile '../../std_data/loaddata3.dat' ignore into table v1 fields terminated by '' enclosed by '' ignore 1 lines" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case14" value="load data infile '../../std_data/loaddata3.dat' into table v1 fields terminated by '' enclosed by '' ignore 1 lines" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case15" value="load data infile '../../std_data/loaddata3.dat' into table v1 fields terminated by '' enclosed by '' ignore 1 lines" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case17" value="load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (a, @b)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case19" value="load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (a, b) set c=concat(a,&quot;+&quot;,b,&quot;+&quot;,@c,&quot;+&quot;,b,&quot;+&quot;,if(c is null,&quot;NIL&quot;,c))" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case20" value="load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (i, j)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case21" value="load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (i, k)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case22" value="load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (i, k)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case24" value="load data infile '../../std_data/loaddata6.dat' into table t1" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case26" value="load data infile '../../std_data/loaddata6.dat' into table t1" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case28" value="load data infile '../../std_data/loaddata6.dat' into table t1 CHARACTER SET latin1" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case30" value="load data infile '../../std_data/loaddata_dq.dat' into table t1 fields terminated by ',' enclosed by '&quot;' escaped by '&quot;' (a,b)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case32" value="load data infile '../../std_data/rpl_loaddata.dat' into table t1 (@a, @b)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case34" value="load data infile '../../std_data/rpl_loaddata.dat' into table t1 (@a, i)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case36" value="load data infile '../../std_data/rpl_loaddata.dat' into table t1 (a, @b) set b=@b+10, c=concat(&quot;b=&quot;,@b)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case38" value="load data infile '../../std_data/warnings_loaddata.dat' into table t1 fields terminated by ','" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case40" value="load data infile '../../std_data/words.dat' into table t1" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case42" value="load data infile '../../std_data/words.dat' into table t1" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case44" value="load data infile '../../std_data/words.dat' into table t1 (a)" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case45" value="load data infile '../../std_data/words.dat' into table t1 (a) set b:= f1()" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case49" value="load xml infile '../../std_data/loadxml.dat' into table t1 rows identified by '&lt;row&gt;'" db-types="MySQL"/>
    <sql-case id="low_load_by_mysql_source_test_case50" value="load xml infile '../../std_data/loadxml.dat' into table t1 rows identified by '&lt;row&gt;' ignore 4 rows" db-types="MySQL"/>
    <sql-case id="low_optimize_by_mysql_source_test_case1" value="optimize table t1 extended" db-types="MySQL"/>
    <sql-case id="low_password_by_mysql_source_test_case1" value="password validate eval SET @@global.validate_password.dictionary_file=&quot;$MYSQLTEST_VARDIR/tmp/dictionary.txt&quot;" db-types="MySQL"/>
    <sql-case id="low_password_by_mysql_source_test_case2" value="password validate password validate monkey CREATE USER 'user1'@'localhost' IDENTIFIED BY 'passWORD123#'" db-types="MySQL"/>
    <sql-case id="low_password_by_mysql_source_test_case3" value="password validate password validate monkey CREATE USER 'user1'@'localhost' IDENTIFIED BY 'passWORD123#'" db-types="MySQL"/>
    <sql-case id="low_purge_by_mysql_source_test_case1" value="purge master logs before (select adddate(current_timestamp(), interval -4 day))" db-types="MySQL"/>
    <sql-case id="low_purge_by_mysql_source_test_case2" value="purge master logs before adddate(current_timestamp(), interval -4 day)" db-types="MySQL"/>
    <sql-case id="low_release_by_mysql_source_test_case2" value="release savepoint sv1" db-types="MySQL"/>
    <sql-case id="low_release_by_mysql_source_test_case3" value="release savepoint x" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case1" value="set @``= &quot;illegal&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case23" value="set @a= _binary 0xFDFE0000000000005A55CAFFFEFA9089" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case24" value="set @a= date &quot;2001-01-02&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case25" value="set @a= time &quot;01:02:00&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case26" value="set @a= time &quot;10:11:12.345&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case27" value="set @a= timestamp &quot;2001-01-02 01:02:00&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case28" value="set @a= timestamp &quot;2001-01-02 10:11:12.345&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case29" value="set @a= timestamp &quot;2001-01-02 10:11:12.345&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case30" value="set @a= timestamp &quot;2001-01-02 10:11:12.345&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case31" value="set @a=date &quot;2001-01-02&quot;" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case32" value="set @a=repeat(&quot;x&quot;,1000000)" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case38" value="set @b=repeat(&quot;y&quot;,1000000)" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case39" value="set @b=repeat('A',24000)" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case42" value="set @check=0, @t4_bi_called=0, @t4_bu_called=0" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case64" value="set @q = repeat('q', 256)" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case65" value="set @rank := 0" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case67" value="set @select=2,@t5=1.23456" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case68" value="set @test_int=10,@test_double=1e-10,@test_string=&quot;abcdeghi&quot;,@test_string2=&quot;abcdefghij&quot;,@select=NULL" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case72" value="set charset default,@dummy='A'" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case73" value="set global init_connect=&quot;create procedure p1(x int)\ begin\ select count(*) from t1;\ select * from t1;\ set @x = x" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case74" value="set global sql_mode=repeat('a',80)" db-types="MySQL"/>
    <sql-case id="low_set_by_mysql_source_test_case76" value="set session @honk=99" db-types="MySQL"/>
    <sql-case id="low_show_by_mysql_source_test_case54" value="show local variables like 'SQL_MODE'" db-types="MySQL"/>
    <sql-case id="low_show_by_mysql_source_test_case55" value="show local variables like 'SQL_MODE'" db-types="MySQL"/>
    <sql-case id="low_show_by_mysql_source_test_case56" value="show local variables like 'default_storage_engine'" db-types="MySQL"/>
    <sql-case id="low_show_by_mysql_source_test_case57" value="show local variables like 'default_storage_engine'" db-types="MySQL"/>
    <sql-case id="low_some_by_mysql_source_test_case1" value="some text remove_file $MYSQLD_LOG" db-types="MySQL"/>
    <sql-case id="low_some_by_mysql_source_test_case2" value="some text remove_file $MYSQLD_LOG" db-types="MySQL"/>
    <sql-case id="low_with_by_mysql_source_test_case1" value="with qn as (SELECT  MAX(a) FROM t1 WHERE (b) IN ( SELECT MIN(t2.b) FROM (SELECT b from t1) AS t2 GROUP BY t2.b WITH ROLLUP HAVING GROUPING (t2.b)=0)) SELECT * FROM qn" db-types="MySQL"/>
    <sql-case id="low_with_by_mysql_source_test_case2" value="with t1 as (select * from t1 where a=3) delete from t1" db-types="MySQL"/>
    <sql-case id="low_with_by_mysql_source_test_case3" value="with t1 as (select * from t1 where a=3) delete t1.* from t1, t1 as t2" db-types="MySQL"/>
    <sql-case id="alter_by_postgresql_source_test_case152" value="ALTER OPERATOR CLASS alt_opc1 USING hash OWNER TO regress_alter_generic_user2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case153" value="ALTER OPERATOR CLASS alt_opc1 USING hash RENAME TO alt_opc2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case154" value="ALTER OPERATOR CLASS alt_opc1 USING hash RENAME TO alt_opc3;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case156" value="ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case158" value="ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user3;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case159" value="ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user3;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case160" value="ALTER OPERATOR CLASS alt_opc2 USING hash SET SCHEMA alt_nsp2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case161" value="ALTER OPERATOR CLASS alt_opc2 USING hash SET SCHEMA alt_nsp2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case162" value="ALTER OPERATOR CLASS alt_opc3 USING hash OWNER TO regress_alter_generic_user2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case163" value="ALTER OPERATOR CLASS alt_opc3 USING hash RENAME TO alt_opc4; -- failed (not owner) ALTER OPERATOR CLASS alt_opc1 USING hash RENAME TO alt_opc4;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case164" value="ALTER OPERATOR CLASS alt_opc3 USING hash SET SCHEMA alt_nsp2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case166" value="ALTER OPERATOR FAMILY alt_opf1 USING hash OWNER TO regress_alter_generic_user1;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case168" value="ALTER OPERATOR FAMILY alt_opf1 USING hash RENAME TO alt_opf2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case169" value="ALTER OPERATOR FAMILY alt_opf1 USING hash RENAME TO alt_opf3;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case171" value="ALTER OPERATOR FAMILY alt_opf11 USING gist ADD OPERATOR 1 &lt; (int4, int4) FOR ORDER BY float_ops;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case173" value="ALTER OPERATOR FAMILY alt_opf12 USING btree ADD FUNCTION 1 fn_opf12(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case175" value="ALTER OPERATOR FAMILY alt_opf14 USING btree ADD FUNCTION 1 fn_opf14(int4);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case177" value="ALTER OPERATOR FAMILY alt_opf16 USING gist ADD FUNCTION 1 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case178" value="ALTER OPERATOR FAMILY alt_opf17 USING btree ADD   OPERATOR 1 &lt; (int4, int2) ,   OPERATOR 2 &lt;= (int4, int2) ,   OPERATOR 3 = (int4, int2) ,   OPERATOR 4 &gt;= (int4, int2) ,   OPERATOR 5 &gt; (int4, int2) ,   FUNCTION 1 btint42cmp(int4, int2) ,   FUNCTION 1 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case179" value="ALTER OPERATOR FAMILY alt_opf17 USING btree ADD   OPERATOR 1 &lt; (int4, int2) ,   OPERATOR 2 &lt;= (int4, int2) ,   OPERATOR 3 = (int4, int2) ,   OPERATOR 4 &gt;= (int4, int2) ,   OPERATOR 5 &gt; (int4, int2) ,   FUNCTION 1 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case180" value="ALTER OPERATOR FAMILY alt_opf17 USING btree ADD   OPERATOR 1 &lt; (int4, int2) ,   OPERATOR 2 &lt;= (int4, int2) ,   OPERATOR 3 = (int4, int2) ,   OPERATOR 4 &gt;= (int4, int2) ,   OPERATOR 5 &gt; (int4, int2) ,   FUNCTION 1 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case181" value="ALTER OPERATOR FAMILY alt_opf17 USING btree ADD OPERATOR 1 &lt; (int4, int4), OPERATOR 1 &lt; (int4, int4);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case182" value="ALTER OPERATOR FAMILY alt_opf17 USING btree ADD OPERATOR 1 &lt; (int4, int4);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case183" value="ALTER OPERATOR FAMILY alt_opf17 USING btree ADD OPERATOR 1 &lt; (int4, int4);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case184" value="ALTER OPERATOR FAMILY alt_opf18 USING btree   ADD FUNCTION 4 (int4, int2) btequalimage(oid);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case185" value="ALTER OPERATOR FAMILY alt_opf18 USING btree ADD   OPERATOR 1 &lt; (int4, int2) ,   OPERATOR 2 &lt;= (int4, int2) ,   OPERATOR 3 = (int4, int2) ,   OPERATOR 4 &gt;= (int4, int2) ,   OPERATOR 5 &gt; (int4, int2) ,   FUNCTION 1 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case187" value="ALTER OPERATOR FAMILY alt_opf18 USING btree DROP OPERATOR 1 (int4, int4);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case189" value="ALTER OPERATOR FAMILY alt_opf19 USING btree ADD FUNCTION 5 (int4) test_opclass_options_func(internal);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case191" value="ALTER OPERATOR FAMILY alt_opf19 USING btree ADD FUNCTION 5 test_opclass_options_func(internal, text[], bool);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case193" value="ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user1;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case195" value="ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case196" value="ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user3;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case197" value="ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user3;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case198" value="ALTER OPERATOR FAMILY alt_opf2 USING hash SET SCHEMA alt_nsp2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case199" value="ALTER OPERATOR FAMILY alt_opf2 USING hash SET SCHEMA alt_nsp2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case200" value="ALTER OPERATOR FAMILY alt_opf3 USING hash OWNER TO regress_alter_generic_user2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case201" value="ALTER OPERATOR FAMILY alt_opf3 USING hash RENAME TO alt_opf4; -- failed (not owner) ALTER OPERATOR FAMILY alt_opf1 USING hash RENAME TO alt_opf4;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case202" value="ALTER OPERATOR FAMILY alt_opf3 USING hash SET SCHEMA alt_nsp2;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case203" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD   OPERATOR 1 &lt; (int4, int2) ,   OPERATOR 2 &lt;= (int4, int2) ,   OPERATOR 3 = (int4, int2) ,   OPERATOR 4 &gt;= (int4, int2) ,   OPERATOR 5 &gt; (int4, int2) ,   FUNCTION 1 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case204" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD FUNCTION 0 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case205" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD FUNCTION 6 btint42cmp(int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case206" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD OPERATOR 0 &lt; (int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case207" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD OPERATOR 1 &lt; ;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case208" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD OPERATOR 6 &lt; (int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case209" value="ALTER OPERATOR FAMILY alt_opf4 USING btree ADD STORAGE invalid_storage;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case210" value="ALTER OPERATOR FAMILY alt_opf4 USING btree DROP   OPERATOR 1 (int4, int2) ,   OPERATOR 2 (int4, int2) ,   OPERATOR 3 (int4, int2) ,   OPERATOR 4 (int4, int2) ,   OPERATOR 5 (int4, int2) ,   FUNCTION 1 (int4, int2) ;" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case211" value="ALTER OPERATOR FAMILY alt_opf4 USING invalid_index_method ADD  OPERATOR 1 &lt; (int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case213" value="ALTER OPERATOR FAMILY alt_opf7 USING btree ADD OPERATOR 1 &lt; (int4, int2);" db-types="PostgreSQL"/>
    <sql-case id="alter_by_postgresql_source_test_case215" value="ALTER OPERATOR FAMILY alt_opf8 USING btree ADD OPERATOR 1 &lt; (int4, int4);" db-types="PostgreSQL"/>
    <sql-case id="analyze_by_postgresql_source_test_case1" value="ANALYZE (nonexistent-arg) does_not_exist;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case124" value="CREATE CONSTRAINT TRIGGER trigtest_constraint AFTER INSERT OR UPDATE OR DELETE ON foreign_schema.foreign_table_1 FOR EACH ROW EXECUTE PROCEDURE dummy_trigger();" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case184" value="CREATE FUNCTION alter_op_test_fn(boolean, boolean) RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case185" value="CREATE FUNCTION alter_table_under_transition_tables_upd_func()   RETURNS TRIGGER   LANGUAGE plpgsql AS $$ BEGIN   RAISE WARNING 'old table = %, new table = %',                   (SELECT string_agg(id || '=' || name, ',') FROM d),                   (SELECT string_agg(id || '=' || name, ',') FROM i);   RAISE NOTICE 'one = %', (SELECT 1 FROM alter_table_under_transition_tables LIMIT 1);   RETURN NULL; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case186" value="CREATE FUNCTION balkifnull(int8, int4) RETURNS int8 STRICT LANGUAGE plpgsql AS $$ BEGIN     IF $1 IS NULL THEN        RAISE 'erroneously called with NULL argument';     END IF;     RETURN NULL; END$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case187" value="CREATE FUNCTION balkifnull(int8, int8) RETURNS int8 PARALLEL SAFE STRICT LANGUAGE plpgsql AS $$ BEGIN     IF $1 IS NULL THEN        RAISE 'erroneously called with NULL argument';     END IF;     RETURN NULL; END$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case188" value="CREATE FUNCTION base_tbl_trig_fn() RETURNS trigger AS $$ BEGIN   NEW.b := 10;   RETURN NEW; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case189" value="CREATE FUNCTION casttestfunc(casttesttype) RETURNS int4 LANGUAGE SQL AS $$ SELECT 1; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case190" value="CREATE FUNCTION check_ddl_rewrite(p_tablename regclass, p_ddl text) RETURNS boolean LANGUAGE plpgsql AS $$ DECLARE     v_relfilenode oid; BEGIN     v_relfilenode := relfilenode FROM pg_class WHERE oid = p_tablename;     EXECUTE p_ddl;     RETURN v_relfilenode &lt;&gt; (SELECT relfilenode FROM pg_class WHERE oid = p_tablename); END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case191" value="CREATE FUNCTION city_delete() RETURNS trigger LANGUAGE plpgsql AS $$ begin     DELETE FROM city_table WHERE city_id = OLD.city_id;     if NOT FOUND then RETURN NULL; end if;     RETURN OLD; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case192" value="CREATE FUNCTION city_insert() RETURNS trigger LANGUAGE plpgsql AS $$ declare     ctry_id int; begin     if NEW.country_name IS NOT NULL then         SELECT country_id, continent INTO ctry_id, NEW.continent             FROM country_table WHERE country_name = NEW.country_name;         if NOT FOUND then             raise exception 'No such country: &quot;%&quot;', NEW.country_name;         end if;     else         NEW.continent := NULL;     end if;     if NEW.city_id IS NOT NULL then         INSERT INTO city_table             VALUES(NEW.city_id, NEW.city_name, NEW.population, ctry_id);     else         INSERT INTO city_table(city_name, population, country_id)             VALUES(NEW.city_name, NEW.population, ctry_id)             RETURNING city_id INTO NEW.city_id;     end if;     RETURN NEW; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case193" value="CREATE FUNCTION city_update() RETURNS trigger LANGUAGE plpgsql AS $$ declare     ctry_id int; begin     if NEW.country_name IS DISTINCT FROM OLD.country_name then         SELECT country_id, continent INTO ctry_id, NEW.continent             FROM country_table WHERE country_name = NEW.country_name;         if NOT FOUND then             raise exception 'No such country: &quot;%&quot;', NEW.country_name;         end if;         UPDATE city_table SET city_name = NEW.city_name,                               population = NEW.population,                               country_id = ctry_id             WHERE city_id = OLD.city_id;     else         UPDATE city_table SET city_name = NEW.city_name,                               population = NEW.population             WHERE city_id = OLD.city_id;         NEW.continent := OLD.continent;     end if;     if NOT FOUND then RETURN NULL; end if;     RETURN NEW; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case194" value="CREATE FUNCTION comp() RETURNS TEXT AS $$ BEGIN   RETURN (SELECT CASE                WHEN m.id = c.relfilenode THEN 'Unchanged'                ELSE 'Rewritten'                END            FROM m, pg_class AS c, pg_namespace AS s            WHERE c.relname = 't'                AND c.relnamespace = s.oid                AND s.nspname = 'fast_default'); END; $$ LANGUAGE 'plpgsql';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case196" value="CREATE FUNCTION cp_testfunc1(a int) RETURNS int LANGUAGE SQL AS $$ SELECT a $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case197" value="CREATE FUNCTION deptest_func() RETURNS void LANGUAGE plpgsql   AS $$ BEGIN END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case198" value="CREATE FUNCTION dummy_trigger() RETURNS TRIGGER AS $$   BEGIN     RETURN NULL;   END $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case199" value="CREATE FUNCTION dummy_update_func() RETURNS trigger AS $$ BEGIN   RAISE NOTICE 'dummy_update_func(%) called: action = %, old = %, new = %',     TG_ARGV[0], TG_OP, OLD, NEW;   RETURN NEW; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case200" value="CREATE FUNCTION echo_me(anyenum) RETURNS text AS $$ BEGIN RETURN $1::text || 'omg'; END $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case201" value="CREATE FUNCTION echo_me(rainbow) RETURNS text AS $$ BEGIN RETURN $1::text || 'wtf'; END $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case202" value="CREATE FUNCTION float8mi_int(float8, float8) RETURNS int AS $$ SELECT CAST($1 - $2 AS INT); $$ LANGUAGE SQL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case203" value="CREATE FUNCTION float8mi_n(float8, float8) RETURNS float8 AS $$ SELECT $1 - $2; $$ LANGUAGE SQL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case204" value="CREATE FUNCTION fn_op3(type_op3, int8) RETURNS int8 AS $$     SELECT NULL::int8; $$ LANGUAGE sql IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case205" value="CREATE FUNCTION fn_op4(int8, type_op4) RETURNS int8 AS $$     SELECT NULL::int8; $$ LANGUAGE sql IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case206" value="CREATE FUNCTION fn_op5(int8, int8) RETURNS int8 AS $$     SELECT NULL::int8; $$ LANGUAGE sql IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case207" value="CREATE FUNCTION fn_op6(int8, int8) RETURNS type_op6 AS $$     SELECT NULL::type_op6; $$ LANGUAGE sql IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case208" value="CREATE FUNCTION func() RETURNS VOID AS $$ ALTER SUBSCRIPTION regress_testsub SET PUBLICATION mypub WITH (refresh = true) $$ LANGUAGE SQL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case209" value="CREATE FUNCTION func_d_1_15() RETURNS trigger AS $$ BEGIN    NEW.c = NEW.c +    return NEW; END $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case210" value="CREATE FUNCTION func_parted_mod_b() RETURNS trigger AS $$ BEGIN    NEW.b = NEW.b + 1;    return NEW; END $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case211" value="CREATE FUNCTION func_parted_mod_b() returns trigger as $$ BEGIN    NEW.b =    return NEW; END $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case212" value="CREATE FUNCTION functest_S_13() RETURNS boolean     BEGIN ATOMIC         SELECT 1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case213" value="CREATE FUNCTION functest_S_14() RETURNS bigint     RETURN (SELECT count(*) FROM functestv3);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case214" value="CREATE FUNCTION functest_S_2(a text[]) RETURNS int     RETURN a[1]::int;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case215" value="CREATE FUNCTION functest_S_3() RETURNS boolean     RETURN false;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case216" value="CREATE FUNCTION functest_S_3a() RETURNS boolean     BEGIN ATOMIC         ;;RETURN false;;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case217" value="CREATE FUNCTION functest_S_xxx(x int) RETURNS int     LANGUAGE SQL     AS $$ SELECT x * 2 $$     RETURN x * 3;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case218" value="CREATE FUNCTION fx(x WSlot) RETURNS void AS $$ BEGIN   GET DIAGNOSTICS x = ROW_COUNT;   RETURN; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case219" value="CREATE FUNCTION get_all_persons() RETURNS SETOF person_type LANGUAGE SQL AS $$     SELECT * FROM persons; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case221" value="CREATE FUNCTION gtest_trigger_func() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   IF tg_op IN ('DELETE', 'UPDATE') THEN     RAISE INFO '%: %: old = %', TG_NAME, TG_WHEN, OLD;   END IF;   IF tg_op IN ('INSERT', 'UPDATE') THEN     RAISE INFO '%: %: new = %', TG_NAME, TG_WHEN, NEW;   END IF;   IF tg_op = 'DELETE' THEN     RETURN OLD;   ELSE     RETURN NEW;   END IF; END $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case222" value="CREATE FUNCTION gtest_trigger_func3() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   RAISE NOTICE 'OK';   RETURN NEW; END $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case223" value="CREATE FUNCTION gtest_trigger_func4() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   NEW.a = 10;   NEW.b = 300;   RETURN NEW; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case225" value="CREATE FUNCTION int4_casttesttype(int4) RETURNS casttesttype LANGUAGE SQL AS $$ SELECT ('foo'::text || $1::text)::casttesttype; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case226" value="CREATE FUNCTION leak2(integer,integer) RETURNS boolean   AS $$begin raise notice 'leak % %', $1, $2; return $1 &gt; $2; end$$   LANGUAGE plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case227" value="CREATE FUNCTION leaker_1(fail BOOL) RETURNS INTEGER AS $$ DECLARE   v_var INTEGER; BEGIN   BEGIN     v_var := (leaker_2(fail)).error_code;   EXCEPTION     WHEN others THEN RETURN 0;   END;   RETURN 1; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case228" value="CREATE FUNCTION leaker_2(fail BOOL, OUT error_code INTEGER, OUT new_id INTEGER)   RETURNS RECORD AS $$ BEGIN   IF fail THEN     RAISE EXCEPTION 'fail ...';   END IF;   error_code := 1;   new_id := 1;   RETURN; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case229" value="CREATE FUNCTION log_rewrite() RETURNS event_trigger LANGUAGE plpgsql as $func$ declare    this_schema text; begin     select into this_schema relnamespace::regnamespace::text     from pg_class     where oid = pg_event_trigger_table_rewrite_oid();     if this_schema = 'fast_default'     then         RAISE NOTICE 'rewriting table % for reason %',           pg_event_trigger_table_rewrite_oid()::regclass,           pg_event_trigger_table_rewrite_reason();     end if; end; $func$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case230" value="CREATE FUNCTION logging_minvfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT $1 || '-' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case231" value="CREATE FUNCTION logging_minvfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '-' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case232" value="CREATE FUNCTION logging_msfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT COALESCE($1, '') || '+' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case233" value="CREATE FUNCTION logging_msfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '+' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case234" value="CREATE FUNCTION logging_sfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT COALESCE($1, '') || '*' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case235" value="CREATE FUNCTION logging_sfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '*' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case236" value="CREATE FUNCTION make_record(n int)   RETURNS RECORD LANGUAGE plpgsql PARALLEL SAFE AS $$ BEGIN   RETURN CASE n            WHEN 1 THEN ROW(1)            WHEN 2 THEN ROW(1, 2)            WHEN 3 THEN ROW(1, 2, 3)            WHEN 4 THEN ROW(1, 2, 3, 4)            ELSE ROW(1, 2, 3, 4, 5)          END; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case237" value="CREATE FUNCTION make_some_array(int,int) returns int[] as $$declare x int[];   begin     x[1] := $1;     x[2] := $2;     return x;   end$$ language plpgsql parallel safe;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case238" value="CREATE FUNCTION make_table() RETURNS VOID AS $$   CREATE TABLE created_table AS SELECT * FROM int8_tbl; $$ LANGUAGE SQL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case239" value="CREATE FUNCTION mvtest_func()   RETURNS void AS $$ BEGIN   CREATE MATERIALIZED VIEW mvtest1 AS SELECT 1 AS x;   CREATE MATERIALIZED VIEW mvtest2 AS SELECT 1 AS x WITH NO DATA; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case240" value="CREATE FUNCTION my_gen_series(int, int) RETURNS SETOF integer   LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE   AS $$generate_series_int4$$   SUPPORT test_support_func;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case241" value="CREATE FUNCTION my_int4_sort(int4,int4) RETURNS int LANGUAGE sql   AS $$ SELECT CASE WHEN $1 = $2 THEN 0 WHEN $1 &gt; $2 THEN 1 ELSE -1 END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case242" value="CREATE FUNCTION my_int_eq(int, int) RETURNS bool   LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE   AS $$int4eq$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case243" value="CREATE FUNCTION mylt (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 &lt; $2 $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case244" value="CREATE FUNCTION mylt2 (x text, y text) RETURNS boolean LANGUAGE plpgsql AS $$ declare   xx text := x;   yy text := y; begin   return xx &lt; yy; end $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case245" value="CREATE FUNCTION mylt_noninline (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 &lt; $2 limit 1 $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case246" value="CREATE FUNCTION mylt_plpgsql (text, text) RETURNS boolean LANGUAGE plpgsql     AS $$ begin return $1 &lt; $2; end $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case247" value="CREATE FUNCTION mytrigger() RETURNS trigger LANGUAGE plpgsql as $$ begin  if row(old.*) = row(new.*) then   raise notice 'row % not changed', new.f1;  else   raise notice 'row % changed', new.f1;  end if;  return new; end$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case248" value="CREATE FUNCTION myvarcharsend(myvarchar) RETURNS bytea LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharsend';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case250" value="CREATE FUNCTION nonsimple_expr_test() RETURNS integer AS $$ declare    i integer NOT NULL := 0; begin   begin     i := (SELECT NULL::intege   exception     WHEN OTHERS THEN       i := (SELECT 1::integer);   end;   return i; end; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case251" value="CREATE FUNCTION nonsimple_expr_test() RETURNS text[] AS $$ DECLARE   arr text[];   lr text;   i integer; BEGIN   arr := array[array['foo','bar'], array['baz', 'quux']];   lr := 'fool';   i := 1;   arr[(SELECT i)][(SELECT i+1)] := (SELECT lr);   RETURN arr; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case252" value="CREATE FUNCTION pg_temp.f(group_size BIGINT) RETURNS SETOF integer[] AS $$     SELECT array_agg(s) OVER w       FROM generate_series(1,5) s     WINDOW w AS (ORDER BY s ROWS BETWEEN CURRENT ROW AND GROUP_SIZE FOLLOWING) $$ LANGUAGE SQL STABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case254" value="CREATE FUNCTION predicate_stable() RETURNS bool IMMUTABLE LANGUAGE plpgsql AS $$ BEGIN   EXECUTE 'SELECT txid_current()';   RETURN true; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case255" value="CREATE FUNCTION price_key_from_input(price_input) RETURNS price_key AS $$     SELECT $1.id $$ LANGUAGE SQL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case256" value="CREATE FUNCTION price_key_from_table(price) RETURNS price_key AS $$     SELECT $1.id $$ LANGUAGE SQL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case257" value="CREATE FUNCTION reraise_test() RETURNS void AS $$ BEGIN    BEGIN        RAISE syntax_error;    EXCEPTION        WHEN syntax_error THEN            BEGIN                raise notice 'exception % thrown in inner block, reraising', sqlerrm;                RAISE;            EXCEPTION                WHEN OTHERS THEN                    raise notice 'RIGHT - exception % caught in inner block', sqlerrm;            END;    END; EXCEPTION    WHEN OTHERS THEN        raise notice 'WRONG - exception % caught in outer block', sqlerrm; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case259" value="CREATE FUNCTION rw_view1_aa(x rw_view1)   RETURNS int AS $$ SELECT x.aa $$ LANGUAGE sql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case260" value="CREATE FUNCTION rw_view1_trig_fn() RETURNS trigger AS $$ BEGIN   IF TG_OP = 'INSERT' THEN     INSERT INTO base_tbl VALUES (NEW.a, 10);     RETURN NEW;   ELSIF TG_OP = 'UPDATE' THEN     UPDATE base_tbl SET a=NEW.a WHERE a=OLD.a;     RETURN NEW;   ELSIF TG_OP = 'DELETE' THEN     DELETE FROM base_tbl WHERE a=OLD.a;     RETURN OLD;   END IF; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case261" value="CREATE FUNCTION rw_view1_trig_fn() RETURNS trigger AS $$ BEGIN   IF TG_OP = 'INSERT' THEN     INSERT INTO base_tbl VALUES (NEW.a, NEW.b);     RETURN NEW;   ELSIF TG_OP = 'UPDATE' THEN     UPDATE base_tbl SET b=NEW.b WHERE a=OLD.a;     RETURN NEW;   ELSIF TG_OP = 'DELETE' THEN     DELETE FROM base_tbl WHERE a=OLD.a;     RETURN OLD;   END IF; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case262" value="CREATE FUNCTION rw_view1_trig_fn() RETURNS trigger AS $$ BEGIN   IF TG_OP = 'INSERT' THEN     UPDATE base_tbl SET b=NEW.b WHERE a=1;     RETURN NULL;   END IF;   RETURN NULL; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case264" value="CREATE FUNCTION serializable_update_trig() RETURNS trigger LANGUAGE plpgsql AS $$ declare  rec record; begin  new.description = 'updated in trigger';  return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case265" value="CREATE FUNCTION set(tabname name) RETURNS VOID AS $$ BEGIN   UPDATE m   SET id = (SELECT c.relfilenode             FROM pg_class AS c, pg_namespace AS s             WHERE c.relname = tabname                 AND c.relnamespace = s.oid                 AND s.nspname = 'fast_default'); END; $$ LANGUAGE 'plpgsql';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case266" value="CREATE FUNCTION snoop(anyelement) RETURNS boolean AS $$ BEGIN   RAISE NOTICE 'snooped value: %', $1;   RETURN true; END; $$ LANGUAGE plpgsql COST 0.000001;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case267" value="CREATE FUNCTION sum_int_randrestart_minvfunc(int4, int4) RETURNS int4 AS $$ SELECT CASE WHEN random() &lt; 0.2 THEN NULL ELSE $1 - $2 END $$ LANGUAGE SQL STRICT;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case269" value="CREATE FUNCTION test_ambiguous_funcname(text) returns text as $$ select $1; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case270" value="CREATE FUNCTION test_future_xid_status(bigint) RETURNS void LANGUAGE plpgsql AS $$ BEGIN   PERFORM txid_status($1);   RAISE EXCEPTION 'didn''t ERROR at xid in the future as expected'; EXCEPTION   WHEN invalid_parameter_value THEN     RAISE NOTICE 'Got expected error for xid in the future'; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case271" value="CREATE FUNCTION test_future_xid_status(xid8) RETURNS void LANGUAGE plpgsql AS $$ BEGIN   PERFORM pg_xact_status($1);   RAISE EXCEPTION 'didn''t ERROR at xid in the future as expected'; EXCEPTION   WHEN invalid_parameter_value THEN     RAISE NOTICE 'Got expected error for xid in the future'; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case272" value="CREATE FUNCTION test_trigger() RETURNS trigger LANGUAGE plpgsql AS $$ begin     raise notice 'old tuple: %', to_json(OLD)::text;     if TG_OP = 'DELETE'     then        return OLD;     else        return NEW;     end if; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case273" value="CREATE FUNCTION tp_chk_data(OUT pktb regclass, OUT pkval int, OUT fktb regclass, OUT fkval int)   RETURNS SETOF record LANGUAGE plpgsql AS $$   BEGIN     RETURN QUERY SELECT       pk.tableoid::regclass, pk.a, fk.tableoid::regclass, fk.a     FROM truncprim pk FULL JOIN truncpart fk USING (a)     ORDER BY 2, 4;   END $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case274" value="CREATE FUNCTION tp_ins_data() RETURNS void LANGUAGE plpgsql AS $$   BEGIN  INSERT INTO truncprim VALUES (1), (100), (150);  INSERT INTO truncpart VALUES (1), (100), (150);   END $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case275" value="CREATE FUNCTION trans_updatetrigfunc() RETURNS trigger LANGUAGE plpgsql AS $$   begin     raise notice 'trigger = %, old table = %, new table = %',                  TG_NAME,                  (select string_agg(old_table::text, ', ' ORDER BY a) FROM old_table),                  (select string_agg(new_table::text, ', ' ORDER BY a) FROM new_table);     return null;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case276" value="CREATE FUNCTION transition_table_base_ins_func()   RETURNS trigger   LANGUAGE plpgsql AS $$ DECLARE   t text;   l text; BEGIN   t = '';   FOR l IN EXECUTE            $q$              EXPLAIN (TIMING off, COSTS off, VERBOSE on)              SELECT * FROM newtable            $q$ LOOP     t = t || l || E'\n';   END LOOP;   RAISE INFO '%', t;   RETURN new; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case277" value="CREATE FUNCTION transition_table_level1_ri_parent_del_func()   RETURNS TRIGGER   LANGUAGE plpgsql AS $$   DECLARE n bigint;   BEGIN     PERFORM FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no;     IF FOUND THEN       RAISE EXCEPTION 'RI error';     END IF;     RETURN NULL;   END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case278" value="CREATE FUNCTION transition_table_level1_ri_parent_upd_func()   RETURNS TRIGGER   LANGUAGE plpgsql AS $$   DECLARE     x int;   BEGIN     WITH p AS (SELECT level1_no, sum(delta) cnt                  FROM (SELECT level1_no, 1 AS delta FROM i                        UNION ALL                        SELECT level1_no, -1 AS delta FROM d) w                  GROUP BY level1_no                  HAVING sum(delta) &lt; 0)     SELECT level1_no       FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no       INTO x;     IF FOUND THEN       RAISE EXCEPTION 'RI error';     END IF;     RETURN NULL;   END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case279" value="CREATE FUNCTION transition_table_level2_bad_usage_func()   RETURNS TRIGGER   LANGUAGE plpgsql AS $$   BEGIN     INSERT INTO dx VALUES (1000000, 1000000, 'x');     RETURN NULL;   END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case280" value="CREATE FUNCTION transition_table_level2_ri_child_insupd_func()   RETURNS TRIGGER   LANGUAGE plpgsql AS $$   BEGIN     PERFORM FROM i       LEFT JOIN transition_table_level1 p         ON p.level1_no IS NOT NULL AND p.level1_no = i.parent_no       WHERE p.level1_no IS NULL;     IF FOUND THEN       RAISE EXCEPTION 'RI error';     END IF;     RETURN NULL;   END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case281" value="CREATE FUNCTION trigfunc() returns trigger language plpgsql as $$   begin     raise notice 'trigger = % fired on table % during %',                  TG_NAME, TG_TABLE_NAME, TG_OP;     return null;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case282" value="CREATE FUNCTION truncate_in_subxact() RETURNS VOID AS $$ BEGIN  TRUNCATE vistest; EXCEPTION   WHEN OTHERS THEN  INSERT INTO vistest VALUES ('subxact failure'); END; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case283" value="CREATE FUNCTION trunctrigger() RETURNS trigger as $$ declare c bigint; begin     execute 'select count(*) from ' || quote_ident(tg_table_name) into c;     insert into trunc_trigger_log values       (TG_OP, TG_LEVEL, TG_WHEN, TG_ARGV[0], tg_table_name, c);     return null; end; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case284" value="CREATE FUNCTION unbounded_syntax_test1b(x int) RETURNS TABLE (a int, b int, c int) LANGUAGE SQL AS $$   SELECT sum(unique1) over (rows between x preceding and x following),          unique1, four   FROM tenk1 WHERE unique1 &lt; 10; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case285" value="CREATE FUNCTION unbounded_syntax_test2b(unbounded int) RETURNS TABLE (a int, b int, c int) LANGUAGE SQL AS $$   SELECT sum(unique1) over (rows between unbounded preceding and unbounded following),          unique1, four   FROM tenk1 WHERE unique1 &lt; 10; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case286" value="CREATE FUNCTION update_using_indirect()         RETURNS trigger         LANGUAGE plpgsql AS $$ BEGIN     NEW := make_tuple_indirect(NEW);     RETURN NEW; END$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case287" value="CREATE FUNCTION voidtest1(a int) RETURNS VOID LANGUAGE SQL AS $$ SELECT a + 1 $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case288" value="CREATE FUNCTION voidtest2(a int, b int) RETURNS VOID LANGUAGE SQL AS $$ SELECT voidtest1(a + b) $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case289" value="CREATE FUNCTION voidtest3(a int) RETURNS VOID LANGUAGE SQL AS $$ INSERT INTO sometable VALUES(a + 1) $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case290" value="CREATE FUNCTION voidtest4(a int) RETURNS VOID LANGUAGE SQL AS $$ INSERT INTO sometable VALUES(a - 1) RETURNING f1 $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case291" value="CREATE FUNCTION voidtest5(a int) RETURNS SETOF VOID LANGUAGE SQL AS $$ SELECT generate_series(1, a) $$ STABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case292" value="CREATE FUNCTION y_trigger() RETURNS trigger AS $$ begin   raise notice 'y_trigger: a = %', new.a;   return new; end; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case298" value="CREATE INDEX brinidx_bloom ON brintest_bloom USING brin (  byteacol bytea_bloom_ops(n_distinct_per_range = -1.1) );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case370" value="CREATE OPERATOR CLASS alt_opc1 FOR TYPE uuid USING hash AS STORAGE uuid;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case372" value="CREATE OPERATOR CLASS alt_opc2 FOR TYPE uuid USING hash AS STORAGE uuid;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case373" value="CREATE OPERATOR CLASS box_ops DEFAULT  FOR TYPE box USING gist2 AS  OPERATOR 1 &lt;&lt;,  OPERATOR 2 &amp;&lt;,  OPERATOR 3 &amp;&amp;,  OPERATOR 4 &amp;&gt;,  OPERATOR 5 &gt;&gt;,  OPERATOR 6 ~=,  OPERATOR 7 @&gt;,  OPERATOR 8 &lt;@,  OPERATOR 9 &amp;&lt;|,  OPERATOR 10 &lt;&lt;|,  OPERATOR 11 |&gt;&gt;,  OPERATOR 12 |&amp;&gt;,  FUNCTION 1 gist_box_consistent(internal, box, smallint, oid, internal),  FUNCTION 2 gist_box_union(internal, internal),  FUNCTION 5 gist_box_penalty(internal, internal, internal),  FUNCTION 6 gist_box_picksplit(internal, internal),  FUNCTION 7 gist_box_same(box, box, internal);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case374" value="CREATE OPERATOR CLASS test_int4_ops FOR TYPE int4 USING btree AS   OPERATOR 1 &lt; (int4,int4), OPERATOR 2 &lt;= (int4,int4),   OPERATOR 3 = (int4,int4), OPERATOR 4 &gt;= (int4,int4),   OPERATOR 5 &gt; (int4,int4), FUNCTION 1 my_int4_sort(int4,int4);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case376" value="CREATE OPERATOR FAMILY alt_opf1 USING hash;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case378" value="CREATE OPERATOR FAMILY alt_opf10 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case380" value="CREATE OPERATOR FAMILY alt_opf12 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case382" value="CREATE OPERATOR FAMILY alt_opf14 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case384" value="CREATE OPERATOR FAMILY alt_opf16 USING gist;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case386" value="CREATE OPERATOR FAMILY alt_opf18 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case388" value="CREATE OPERATOR FAMILY alt_opf2 USING hash;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case390" value="CREATE OPERATOR FAMILY alt_opf4 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case392" value="CREATE OPERATOR FAMILY alt_opf5 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case394" value="CREATE OPERATOR FAMILY alt_opf8 USING btree;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case404" value="CREATE OR REPLACE FUNCTION   mylt2 (x text, y text) RETURNS boolean LANGUAGE plpgsql AS $$ declare   xx text COLLATE &quot;POSIX&quot; := x;   yy text := y; begin   return xx &lt; yy; end $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case405" value="CREATE OR REPLACE FUNCTION compare_relfilenode_part(tabname text)   RETURNS TABLE (relname name, relkind &quot;char&quot;, state text) AS   $func$   BEGIN     RETURN QUERY EXECUTE       format(         'SELECT  b.relname,                  b.relkind,                  CASE WHEN a.relfilenode = b.relfilenode THEN ''relfilenode is unchanged''                  ELSE ''relfilenode has changed'' END            FROM %I b JOIN pg_class a ON b.relname = a.relname            ORDER BY 1;', tabname);   END   $func$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case406" value="CREATE OR REPLACE FUNCTION create_relfilenode_part(relname text, indname text)   RETURNS VOID AS   $func$   BEGIN   EXECUTE format('     CREATE TABLE %I AS       SELECT oid, relname, relfilenode, relkind, reltoastrelid       FROM pg_class       WHERE oid IN          (SELECT relid FROM pg_partition_tree(''%I''));',   relname, indname);   END   $func$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case407" value="CREATE OR REPLACE FUNCTION distinct_func(a INT) RETURNS INT AS $$   BEGIN     RETURN a;   END; $$ LANGUAGE plpgsql PARALLEL SAFE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case408" value="CREATE OR REPLACE FUNCTION distinct_func(a INT) RETURNS INT AS $$   BEGIN     RETURN a;   END; $$ LANGUAGE plpgsql PARALLEL UNSAFE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case409" value="CREATE OR REPLACE FUNCTION drop_sql_command() RETURNS event_trigger AS $$ BEGIN RAISE NOTICE '% - sql_drop', tg_tag; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case410" value="CREATE OR REPLACE FUNCTION end_command() RETURNS event_trigger AS $$ BEGIN RAISE NOTICE '% - ddl_command_end', tg_tag; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case411" value="CREATE OR REPLACE FUNCTION event_trigger_report_dropped()  RETURNS event_trigger  LANGUAGE plpgsql AS $$ DECLARE r record; BEGIN     FOR r IN SELECT * from pg_event_trigger_dropped_objects()     LOOP     IF NOT r.normal AND NOT r.original THEN         CONTINUE;     END IF;     RAISE NOTICE 'NORMAL: orig=% normal=% istemp=% type=% identity=% name=% args=%',         r.original, r.normal, r.is_temporary, r.object_type,         r.object_identity, r.address_names, r.address_args;     END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case412" value="CREATE OR REPLACE FUNCTION event_trigger_report_end()  RETURNS event_trigger  LANGUAGE plpgsql AS $$ DECLARE r RECORD; BEGIN     FOR r IN SELECT * FROM pg_event_trigger_ddl_commands()     LOOP         RAISE NOTICE 'END: command_tag=% type=% identity=%',             r.command_tag, r.object_type, r.object_identity;     END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case413" value="CREATE OR REPLACE FUNCTION fn_op2(boolean, boolean) RETURNS boolean AS $$     SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case414" value="CREATE OR REPLACE FUNCTION foo(a INT) RETURNS TEXT AS $$ DECLARE res TEXT := '';         i INT; BEGIN   i := 0;   WHILE (i &lt; a) LOOP     res := res || chr(ascii('a') + i);     i := i + 1;   END LOOP;   RETURN res; END; $$ LANGUAGE PLPGSQL STABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case415" value="CREATE OR REPLACE FUNCTION func_parted_mod_b() returns trigger as $$ BEGIN    raise notice 'Trigger: Got OLD row %, but returning NULL', OLD;    return NULL; END $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case416" value="CREATE OR REPLACE FUNCTION get_from_partitioned_table(partitioned_table.a%type) RETURNS partitioned_table AS $$ DECLARE     a_val partitioned_table.a%TYPE;     result partitioned_table%ROWTYPE; BEGIN     a_val := $1;     SELECT * INTO result FROM partitioned_table WHERE a = a_val;     RETURN result; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case417" value="CREATE OR REPLACE FUNCTION hs_locks_create (n integer) RETURNS void LANGUAGE plpgsql AS $$     BEGIN       IF n &lt;= 0 THEN   CHECKPOINT;   RETURN;    END IF;       EXECUTE 'CREATE TABLE hs_locks_' || n::text || ' ()';       PERFORM hs_locks_create(n - 1);       RETURN;     EXCEPTION WHEN raise_exception THEN NULL; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case418" value="CREATE OR REPLACE FUNCTION hs_locks_drop (n integer) RETURNS void LANGUAGE plpgsql AS $$     BEGIN       IF n &lt;= 0 THEN   CHECKPOINT;   RETURN;    END IF;    EXECUTE 'DROP TABLE IF EXISTS hs_locks_' || n::text;       PERFORM hs_locks_drop(n - 1);       RETURN;     EXCEPTION WHEN raise_exception THEN NULL; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case419" value="CREATE OR REPLACE FUNCTION hs_subxids (n integer) RETURNS void LANGUAGE plpgsql AS $$     BEGIN       IF n &lt;= 0 THEN RETURN; END IF;       INSERT INTO hs_extreme VALUES (n);       PERFORM hs_subxids(n - 1);       RETURN;     EXCEPTION WHEN raise_exception THEN NULL; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case420" value="CREATE OR REPLACE FUNCTION leakproof(anyelement) RETURNS boolean AS $$ BEGIN   RETURN true; END; $$ LANGUAGE plpgsql STRICT IMMUTABLE LEAKPROOF;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case421" value="CREATE OR REPLACE FUNCTION list_partitioned_table() RETURNS SETOF partitioned_table.a%TYPE AS $$ DECLARE     row partitioned_table%ROWTYPE;     a_val partitioned_table.a%TYPE; BEGIN     FOR row IN SELECT * FROM partitioned_table ORDER BY a LOOP         a_val := row.a;         RETURN NEXT a_val;     END LOOP;     RETURN; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case422" value="CREATE OR REPLACE FUNCTION multi_test_trig() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN     RAISE NOTICE 'count = %', (SELECT COUNT(*) FROM new_test);     RAISE NOTICE 'count union = %',       (SELECT COUNT(*)        FROM (SELECT * FROM new_test UNION ALL SELECT * FROM new_test) ss);     RETURN NULL; END$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case423" value="CREATE OR REPLACE FUNCTION mytrigger() RETURNS trigger LANGUAGE plpgsql as $$ begin  if row(old.*) is distinct from row(new.*) then   raise notice 'row % changed', new.f1;  else   raise notice 'row % not changed', new.f1;  end if;  return new; end$$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case424" value="CREATE OR REPLACE FUNCTION rngfunc() RETURNS TABLE(a int) AS $$ SELECT a FROM generate_series(1,5) a(a) $$ LANGUAGE sql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case425" value="CREATE OR REPLACE FUNCTION rngfunc() RETURNS TABLE(a varchar(5)) AS $$ SELECT 'hello'::varchar(5) $$ LANGUAGE sql STABLE;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case426" value="CREATE OR REPLACE FUNCTION rngfunc(int) RETURNS TABLE(a int, b int) AS $$ SELECT a, b          FROM generate_series(1,$1) a(a),               generate_series(1,$1) b(b) $$ LANGUAGE sql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case427" value="CREATE OR REPLACE FUNCTION rngfuncb(in f1 int, inout f2 int, out text) AS $$select $2-1, $1::text || 'z'$$ LANGUAGE sql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case428" value="CREATE OR REPLACE FUNCTION rngfuncr(in f1 int, out f2 int, out text) AS $$select $1-1, $1::text || 'z'$$ LANGUAGE sql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case429" value="CREATE OR REPLACE FUNCTION schema_two.add(int, int) RETURNS int LANGUAGE plpgsql   CALLED ON NULL INPUT   AS $$ BEGIN RETURN coalesce($1,0) + coalesce($2,0); END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case430" value="CREATE OR REPLACE FUNCTION start_command() RETURNS event_trigger AS $$ BEGIN RAISE NOTICE '% - ddl_command_start', tg_tag; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case431" value="CREATE OR REPLACE FUNCTION test_evtrig_dropped_objects() RETURNS event_trigger LANGUAGE plpgsql AS $$ DECLARE     obj record; BEGIN     FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()     LOOP         IF obj.object_type = 'table' THEN                 EXECUTE format('DROP TABLE IF EXISTS audit_tbls.%I',      format('%s_%s', obj.schema_name, obj.object_name));         END IF;  INSERT INTO dropped_objects   (type, schema, object) VALUES   (obj.object_type, obj.schema_name, obj.object_identity);     END LOOP; END $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case432" value="CREATE OR REPLACE FUNCTION test_evtrig_no_rewrite() RETURNS event_trigger LANGUAGE plpgsql AS $$ BEGIN   RAISE EXCEPTION 'rewrites not allowed'; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case433" value="CREATE OR REPLACE FUNCTION test_evtrig_no_rewrite() RETURNS event_trigger LANGUAGE plpgsql AS $$ BEGIN   RAISE NOTICE 'Table ''%'' is being rewritten (reason = %)',                pg_event_trigger_table_rewrite_oid()::regclass,                pg_event_trigger_table_rewrite_reason(); END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case434" value="CREATE OR REPLACE FUNCTION test_evtrig_no_rewrite() RETURNS event_trigger LANGUAGE plpgsql AS $$ BEGIN   RAISE NOTICE 'Table is being rewritten (reason = %)',                pg_event_trigger_table_rewrite_reason(); END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case435" value="CREATE OR REPLACE FUNCTION tgf() RETURNS trigger LANGUAGE plpgsql   AS $$ begin raise exception 'except'; end $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case436" value="CREATE OR REPLACE FUNCTION transition_table_base_upd_func()   RETURNS trigger   LANGUAGE plpgsql AS $$ DECLARE   t text;   l text; BEGIN   t = '';   FOR l IN EXECUTE            $q$              EXPLAIN (TIMING off, COSTS off, VERBOSE on)              SELECT * FROM oldtable ot FULL JOIN newtable nt USING (id)            $q$ LOOP     t = t || l || E'\n';   END LOOP;   RAISE INFO '%', t;   RETURN new; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case437" value="CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger LANGUAGE plpgsql AS $$ declare  argstr text;  relid text; begin  relid := TG_relid::regclass;  raise NOTICE 'TG_NAME: %', TG_name;  raise NOTICE 'TG_WHEN: %', TG_when;  raise NOTICE 'TG_LEVEL: %', TG_level;  raise NOTICE 'TG_OP: %', TG_op;  raise NOTICE 'TG_RELID::regclass: %', relid;  raise NOTICE 'TG_RELNAME: %', TG_relname;  raise NOTICE 'TG_TABLE_NAME: %', TG_table_name;  raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema;  raise NOTICE 'TG_NARGS: %', TG_nargs;  argstr := '[';  for i in 0 .. TG_nargs - 1 loop   if i &gt; 0 then    argstr := argstr || ', ';   end if;   argstr := argstr || TG_argv[i];  end loop;  argstr := argstr || ']';  raise NOTICE 'TG_ARGV: %', argstr;  if TG_OP != 'INSERT' then   raise NOTICE 'OLD: %', OLD;  end if;  if TG_OP != 'DELETE' then   raise NOTICE 'NEW: %', NEW;  end if;  if TG_OP = 'DELETE' then   return OLD;  else   return NEW;  end if; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case438" value="CREATE OR REPLACE FUNCTION undroppable() RETURNS event_trigger LANGUAGE plpgsql AS $$ DECLARE  obj record; BEGIN  PERFORM 1 FROM pg_tables WHERE tablename = 'undroppable_objs';  IF NOT FOUND THEN   RAISE NOTICE 'table undroppable_objs not found, skipping';   RETURN;  END IF;  FOR obj IN   SELECT * FROM pg_event_trigger_dropped_objects() JOIN    undroppable_objs USING (object_type, object_identity)  LOOP   RAISE EXCEPTION 'object % of type % cannot be dropped',    obj.object_identity, obj.object_type;  END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case439" value="CREATE OR REPLACE FUNCTION view_trigger() RETURNS trigger LANGUAGE plpgsql AS $$ declare     argstr text := ''; begin     for i in 0 .. TG_nargs - 1 loop         if i &gt; 0 then             argstr := argstr || ', ';         end if;         argstr := argstr || TG_argv[i];     end loop;     raise notice '% % % % (%)', TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, argstr;     if TG_LEVEL = 'ROW' then         if TG_OP = 'INSERT' then             raise NOTICE 'NEW: %', NEW;             INSERT INTO main_table VALUES (NEW.a, NEW.b);             RETURN NEW;         end if;         if TG_OP = 'UPDATE' then             raise NOTICE 'OLD: %, NEW: %', OLD, NEW;             UPDATE main_table SET a = NEW.a, b = NEW.b WHERE a = OLD.a AND b = OLD.b;             if NOT FOUND then RETURN NULL; end if;             RETURN NEW;         end if;         if TG_OP = 'DELETE' then             raise NOTICE 'OLD: %', OLD;             DELETE FROM main_table WHERE a = OLD.a AND b = OLD.b;             if NOT FOUND then RETURN NULL; end if;             RETURN OLD;         end if;     end if;     RETURN NULL; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case440" value="CREATE OR REPLACE FUNCTION y_trigger() RETURNS trigger AS $$ begin   raise notice 'y_trigger';   return null; end; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case441" value="CREATE OR REPLACE PROCEDURE ptest5(a int, b text, c int default 100) LANGUAGE SQL AS $$ INSERT INTO cp_test VALUES(a, b); INSERT INTO cp_test VALUES(c, b); $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case442" value="CREATE OR REPLACE RULE voo_i AS ON INSERT TO voo DO INSTEAD   INSERT INTO foo VALUES(new.*, 57) RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case443" value="CREATE OR REPLACE RULE voo_i AS ON INSERT TO voo DO INSTEAD   INSERT INTO foo VALUES(new.*, 57) RETURNING f1, f2;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case533" value="CREATE PROCEDURE ptest1(x text) LANGUAGE SQL AS $$ INSERT INTO cp_test VALUES (1, x); $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case534" value="CREATE PROCEDURE ptest10(IN a int, IN b int, IN c int) LANGUAGE SQL AS $$ SELECT a + b - c $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case535" value="CREATE PROCEDURE ptest10(OUT a int, IN b int, IN c int) LANGUAGE SQL AS $$ SELECT b - c $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case536" value="CREATE PROCEDURE ptest11(a OUT int, VARIADIC b int[]) LANGUAGE SQL   AS $$ SELECT b[1] + b[2] $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case537" value="CREATE PROCEDURE ptest2() LANGUAGE SQL AS $$ SELECT 5; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case538" value="CREATE PROCEDURE ptest3(y text) LANGUAGE SQL AS $$ CALL ptest1(y); CALL ptest1($1); $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case539" value="CREATE PROCEDURE ptest4a(INOUT a int, INOUT b int) LANGUAGE SQL AS $$ SELECT 1, 2; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case540" value="CREATE PROCEDURE ptest4b(INOUT b int, INOUT a int) LANGUAGE SQL AS $$ CALL ptest4a(a, b);  $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case541" value="CREATE PROCEDURE ptest6(a int, b anyelement) LANGUAGE SQL AS $$ SELECT NULL::int; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case542" value="CREATE PROCEDURE ptest7(a text, b text) LANGUAGE SQL AS $$ SELECT a = b; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case543" value="CREATE PROCEDURE ptest8(x text) BEGIN ATOMIC END;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case544" value="CREATE PROCEDURE ptest9(OUT a int) LANGUAGE SQL AS $$ INSERT INTO cp_test VALUES (1, 'a'); SELECT 1; $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case546" value="CREATE PROCEDURE ptestx() LANGUAGE SQL WINDOW AS $$ INSERT INTO cp_test VALUES (1, 'a') $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case547" value="CREATE PROCEDURE ptestx(a VARIADIC int[], b OUT int) LANGUAGE SQL   AS $$ SELECT a[1] $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case548" value="CREATE PROCEDURE ptestx(a int DEFAULT 42, b OUT int) LANGUAGE SQL   AS $$ SELECT a $$;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case550" value="CREATE PROCEDURE test_ambiguous_procname(text) as $$ begin end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case601" value="CREATE RULE &quot;_RETURN&quot; AS ON SELECT TO t DO INSTEAD   SELECT * FROM generate_series(1,5) t0(c ROLLBACK TO q;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case602" value="CREATE RULE &quot;_RETURN&quot; AS ON SELECT TO t DO INSTEAD   SELECT * FROM generate_series(1,5) t0(c ROLLBACK TO q;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case603" value="CREATE RULE &quot;_RETURN&quot; AS ON SELECT TO t DO INSTEAD   SELECT * FROM generate_series(1,5) t0(c ROLLBACK;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case604" value="CREATE RULE rule1 AS ON INSERT TO ruletest1     DO INSTEAD INSERT INTO ruletest2 VALUES (NEW.*);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case605" value="CREATE RULE rules_parted_table_insert AS ON INSERT to rules_parted_table     DO INSTEAD INSERT INTO rules_parted_table_1 VALUES (NEW.*);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case606" value="CREATE RULE voo_i AS ON INSERT TO voo DO INSTEAD   INSERT INTO foo VALUES(new.*, 57);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case608" value="CREATE SERVER IF NOT EXISTS s1 FOREIGN DATA WRAPPER foo; -- No ERROR, just NOTICE CREATE SERVER s2 FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case610" value="CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case612" value="CREATE SERVER extstats_dummy_srv FOREIGN DATA WRAPPER extstats_dummy_fdw;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case614" value="CREATE SERVER s0 FOREIGN DATA WRAPPER dummy;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case616" value="CREATE SERVER s1 FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case618" value="CREATE SERVER s1 FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case620" value="CREATE SERVER s10 FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case622" value="CREATE SERVER s3 TYPE 'oracle' FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case624" value="CREATE SERVER s9 FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case626" value="CREATE SERVER s9 FOREIGN DATA WRAPPER postgresql;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case628" value="CREATE SERVER t1 FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case630" value="CREATE SERVER t2 FOREIGN DATA WRAPPER foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case632" value="CREATE STATISTICS IF NOT EXISTS ab1_a_b_stats ON a, b FROM ab1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case634" value="CREATE STATISTICS ab1_a_b_stats ON a, b FROM ab1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case636" value="CREATE STATISTICS ab1_b_a_stats ON b, a FROM ab1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case638" value="CREATE STATISTICS ab1_exprstat_1 ON (a+b) FROM ab1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case640" value="CREATE STATISTICS ab1_exprstat_3 ON (a+b), a FROM ab1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case642" value="CREATE STATISTICS ab1_exprstat_5 ON date_trunc('day', c) FROM ab1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case644" value="CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case646" value="CREATE STATISTICS alt_stat2 ON a, b FROM alt_regress_1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case648" value="CREATE STATISTICS expr_stat_comp_1 ON c0, c1 FROM expr_stats_incompatible_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case650" value="CREATE STATISTICS expr_stats_1 (mcv) ON a, b, (2*a), (3*b), (a+b), (a-b) FROM expr_stats;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case652" value="CREATE STATISTICS func_deps_stat (dependencies) ON (a * 2), upper(b), (c + 1) FROM functional_dependencies;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case654" value="CREATE STATISTICS func_deps_stat (dependencies) ON a, b, c FROM functional_dependencies;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case656" value="CREATE STATISTICS functional_dependencies_multi_1 (dependencies) ON a, b FROM functional_dependencies_multi;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case658" value="CREATE STATISTICS mcv_lists_arrays_stats (mcv) ON a, b, c   FROM mcv_lists_arrays;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case659" value="CREATE STATISTICS mcv_lists_bool_stats (mcv) ON a, b, c   FROM mcv_lists_bool;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case661" value="CREATE STATISTICS mcv_lists_multi_2 (mcv) ON c, d FROM mcv_lists_multi;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case662" value="CREATE STATISTICS mcv_lists_partial_stats (mcv) ON a, b, c   FROM mcv_lists_partial;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case664" value="CREATE STATISTICS mcv_lists_stats (mcv) ON (mod(a,7)), (mod(b::int,11)), (mod(c,13)) FROM mcv_lists;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case666" value="CREATE STATISTICS mcv_lists_stats (mcv) ON a, b, c FROM mcv_lists;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case668" value="CREATE STATISTICS mcv_lists_stats (mcv) ON a, b, d FROM mcv_lists;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case670" value="CREATE STATISTICS mcv_lists_stats_2 ON (mod(b::int,10)) FROM mcv_lists;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case672" value="CREATE STATISTICS mcv_lists_uuid_stats (mcv) ON a, b, c   FROM mcv_lists_uuid;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case674" value="CREATE STATISTICS s10 (ndistinct) ON (a+1), (b+100), (2*c) FROM ndistinct;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case676" value="CREATE STATISTICS s10 ON a, b, c FROM ndistinct;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case678" value="CREATE STATISTICS s11 (ndistinct) ON a, b, (a*5), (b+1) FROM ndistinct;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case680" value="CREATE STATISTICS s12 (ndistinct) ON (c * 10), (d - 1) FROM ndistinct;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case682" value="CREATE STATISTICS s12 (ndistinct) ON c, d FROM ndistinct;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case684" value="CREATE STATISTICS tst (unrecognized) ON x, y FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case686" value="CREATE STATISTICS tst ON (x || 'x'), (x || 'x'), (y + 1), (x || 'x'), (x || 'x'), (y + 1), (x || 'x'), (x || 'x'), (y + 1) FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case688" value="CREATE STATISTICS tst ON (x, y) FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case689" value="CREATE STATISTICS tst ON (y) FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case691" value="CREATE STATISTICS tst ON a, b FROM nonexistent;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case693" value="CREATE STATISTICS tst ON x, x, y FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case695" value="CREATE STATISTICS tst ON x, x, y, x, x, y, x, x, y FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case696" value="CREATE STATISTICS tst ON y + z FROM ext_stats_test;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case698" value="CREATE STATISTICS tststats.priv_test_stats (mcv) ON a, b   FROM tststats.priv_test_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case700" value="CREATE STATISTICS tststats.s2 ON a, b FROM tststats.ti;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case702" value="CREATE STATISTICS tststats.s4 ON a, b FROM tststats.v;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case704" value="CREATE STATISTICS tststats.s6 ON a, b FROM tststats.ty;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case706" value="CREATE STATISTICS tststats.s8 ON a, b FROM tststats.pt;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case708" value="CREATE SUBSCRIPTION regress_addr_sub CONNECTION '' PUBLICATION bar WITH (connect = false, slot_name = NONE);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case710" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION mypub        WITH (connect = false, create_slot = false, copy_data = false);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case712" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case714" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, binary = true);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case716" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, streaming = true);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case718" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, two_phase = foo);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case720" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'foo';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case722" value="CREATE SUBSCRIPTION regress_testsub CONNECTION 'testconn' PUBLICATION testpub;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case724" value="CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION foo WITH (connect = false);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case726" value="CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, create_slot = true);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case728" value="CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case730" value="CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, create_slot = true);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case732" value="CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, enabled = true);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case734" value="CREATE TABLE ;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case736" value="CREATE TABLE IF NOT EXISTS as_select1 AS SELECT * FROM pg_class WHERE relkind = 'r';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case737" value="CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case738" value="CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case739" value="CREATE TABLE RANDOM_TBL AS   SELECT count(*) AS random   FROM onek WHERE random() &lt; 1.0/10;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case740" value="CREATE TABLE \g INSERT INTO foo VALUES(123) foo;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case742" value="CREATE TABLE as_select1 AS EXECUTE select1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case744" value="CREATE TABLE as_select1 AS SELECT * FROM pg_class WHERE relkind = 'r';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case745" value="CREATE TABLE atest12 as   SELECT x AS a, 10001 - x AS b FROM generate_series(1,10000) x;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case746" value="CREATE TABLE badcompresstbl (a text COMPRESSION I_Do_Not_Exist_Compression);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case747" value="CREATE TABLE bit_defaults(   b1 bit(4) DEFAULT '1001',   b2 bit(4) DEFAULT B'0101',   b3 bit varying(5) DEFAULT '1001',   b4 bit varying(5) DEFAULT B'0101' );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case749" value="CREATE TABLE cmdata1(f1 TEXT COMPRESSION lz4);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case751" value="CREATE TABLE cmdata2 (f1 TEXT COMPRESSION pglz, f2 TEXT COMPRESSION lz4);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case753" value="CREATE TABLE cmdata2 (f1 text COMPRESSION pglz);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case755" value="CREATE TABLE cmmove2(f1 text COMPRESSION pglz);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case757" value="CREATE TABLE cmpart(f1 text COMPRESSION lz4) PARTITION BY HASH(f1);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case759" value="CREATE TABLE coll_t (c) AS VALUES ('bar'::text);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case760" value="CREATE TABLE credit_usage (        cid      int references customer(cid),        ymd      date,        usage    int );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case761" value="CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case762" value="CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case764" value="CREATE TABLE ctas_nodata (ii, jj) AS SELECT i, j FROM ctas_base;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case765" value="CREATE TABLE ctas_nodata (ii, jj, kk) AS SELECT i, j FROM ctas_base WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case766" value="CREATE TABLE ctas_nodata (ii, jj, kk) AS SELECT i, j FROM ctas_base;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case767" value="CREATE TABLE ctas_nodata_2 (ii, jj) AS SELECT i, j FROM ctas_base WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case768" value="CREATE TABLE ctas_nodata_3 (ii) AS SELECT i, j FROM ctas_base;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case769" value="CREATE TABLE ctas_nodata_4 (ii) AS SELECT i, j FROM ctas_base WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case770" value="CREATE TABLE ctv_data (v, h, c, i, d) AS VALUES    ('v1','h2','foo', 3, '2015-04-01'::date),    ('v2','h1','bar', 3, '2015-01-02'),    ('v1','h0','baz', NULL, '2015-07-12'),    ('v0','h4','qux', 4, '2015-07-15'),    ('v0','h4','dbl', -3, '2014-12-15'),    ('v0',NULL,'qux', 5, '2014-07-15'),    ('v1','h2','quux',7, '2015-04-04');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case771" value="CREATE TABLE distinct_group_1 AS SELECT DISTINCT g%1000 FROM generate_series(0,9999) g;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case772" value="CREATE TABLE distinct_group_2 AS SELECT DISTINCT (g%1000)::text FROM generate_series(0,9999) g;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case773" value="CREATE TABLE distinct_hash_1 AS SELECT DISTINCT g%1000 FROM generate_series(0,9999) g;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case774" value="CREATE TABLE distinct_hash_2 AS SELECT DISTINCT (g%1000)::text FROM generate_series(0,9999) g;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case775" value="CREATE TABLE dupindexcols AS   SELECT unique1 as id, stringu2::text as f1 FROM tenk1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case777" value="CREATE TABLE fewmore AS SELECT generate_series(1,3) AS data;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case778" value="CREATE TABLE foo   (id INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY,  id3 INTEGER NOT NUL,    id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case779" value="CREATE TABLE foo( id3 INTEGER NOT NUL, id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL, id INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case781" value="CREATE TABLE foo(id INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY, id3 INTEGER NOT NUL, id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case783" value="CREATE TABLE gtest_err_8 (a int PRIMARY KEY, b int GENERATED BY DEFAULT AS (a * 2) STORED);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case784" value="CREATE TABLE has_volatile AS SELECT * FROM generate_series(1,10) id;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case785" value="CREATE TABLE heaptable USING heap AS   SELECT a, repeat(a::text, 100) FROM generate_series(1,9) AS a;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case787" value="CREATE TABLE kd_point_tbl AS SELECT * FROM quad_point_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case789" value="CREATE TABLE mvtest_foo(a, b, c) AS VALUES(1, 2, 3);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case790" value="CREATE TABLE mvtest_foo_data AS SELECT i,   i+1 AS tid,   md5(random()::text) AS mv,   md5(random()::text) AS newdata,   md5(random()::text) AS newdata2,   md5(random()::text) AS diff   FROM generate_series(1, 10) i;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case792" value="CREATE TABLE onek2 AS SELECT * FROM onek;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case794" value="CREATE TABLE persons2 OF person_type (     id WITH OPTIONS PRIMARY KEY,     UNIQUE (name) );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case795" value="CREATE TABLE persons2 OF person_type (     id WITH OPTIONS PRIMARY KEY,     UNIQUE (name) );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case796" value="CREATE TABLE persons4 OF person_type (     name WITH OPTIONS NOT NULL,     name WITH OPTIONS DEFAULT );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case797" value="CREATE TABLE prevstats AS SELECT t.seq_scan, t.seq_tup_read, t.idx_scan, t.idx_tup_fetch,        (b.heap_blks_read + b.heap_blks_hit) AS heap_blks,        (b.idx_blks_read + b.idx_blks_hit) AS idx_blks,        pg_stat_get_snapshot_timestamp() as snap_ts   FROM pg_catalog.pg_stat_user_tables AS t,        pg_catalog.pg_statio_user_tables AS b  WHERE t.relname='tenk2' AND b.relname='tenk2';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case798" value="CREATE TABLE quad_box_tbl_ord_seq1 AS SELECT rank() OVER (ORDER BY b &lt;-&gt; point '123,456') n, b &lt;-&gt; point '123,456' dist, id FROM quad_box_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case799" value="CREATE TABLE quad_box_tbl_ord_seq2 AS SELECT rank() OVER (ORDER BY b &lt;-&gt; point '123,456') n, b &lt;-&gt; point '123,456' dist, id FROM quad_box_tbl WHERE b &lt;@ box '((200,300),(500,600))';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case800" value="CREATE TABLE quad_point_tbl AS     SELECT point(unique1,unique2) AS p FROM tenk1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case801" value="CREATE TABLE radix_text_tbl AS     SELECT name AS t FROM road WHERE name !~ '^[0-9]';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case802" value="CREATE TABLE reindex_after AS SELECT oid, relname, relfilenode, relkind  FROM pg_class  where relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'schema_to_reindex');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case803" value="CREATE TABLE reindex_before AS SELECT oid, relname, relfilenode, relkind, reltoastrelid  FROM pg_class  where relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'schema_to_reindex');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case804" value="CREATE TABLE reindex_temp_before AS SELECT oid, relname, relfilenode, relkind, reltoastrelid   FROM pg_class   WHERE relname IN ('concur_temp_ind_1', 'concur_temp_ind_2');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case806" value="CREATE TABLE reloptions_test2(i INT) WITH (fillfactor=-30.1);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case807" value="CREATE TABLE selinto_schema.tbl_nodata1 (a) AS   SELECT generate_series(1,3) WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case808" value="CREATE TABLE selinto_schema.tbl_nodata3 (a) AS   EXECUTE data_sel WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case809" value="CREATE TABLE selinto_schema.tbl_withdata1 (a)   AS SELECT generate_series(1,3) WITH DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case810" value="CREATE TABLE selinto_schema.tbl_withdata3 (a) AS   EXECUTE data_sel WITH DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case811" value="CREATE TABLE shoelace_log (         sl_name    char(1         sl_avail   intege         log_who    name,          log_when   timest     );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case813" value="CREATE TABLE t1 AS SELECT 1::int AS a , 2::int AS b FROM generate_series(1,20) q;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case815" value="CREATE TABLE tab_core_types AS SELECT   '(11,12)'::point,   '(1,1),(2,2)'::line,   '((11,11),(12,12))'::lseg,   '((11,11),(13,13))'::box,   '((11,12),(13,13),(14,14))'::path AS openedpath,   '[(11,12),(13,13),(14,14)]'::path AS closedpath,   '((11,12),(13,13),(14,14))'::polygon,   '1,1,1'::circle,   'today'::date,   'now'::time,   'now'::timestamp,   'now'::timetz,   'now'::timestamptz,   '12 seconds'::interval,   '{&quot;reason&quot;:&quot;because&quot;}'::json,   '{&quot;when&quot;:&quot;now&quot;}'::jsonb,   '$.a[*] ? (@ &gt; 2)'::jsonpath,   '127.0.0.1'::inet,   '127.0.0.0/8'::cidr,   '00:01:03:86:1c:ba'::macaddr8,   '00:01:03:86:1c:ba'::macaddr,   2::int2, 4::int4, 8::int8,   4::float4, '8'::float8, pi()::numeric,   'foo'::&quot;char&quot;,   'c'::bpchar,   'abc'::varchar,   'name'::name,   'txt'::text,   true::bool,   E'\\xDEADBEEF'::bytea,   B'10001'::bit,   B'10001'::varbit AS varbit,   '12.34'::money,   'abc'::refcursor,   '1 2'::int2vector,   '1 2'::oidvector,   format('%I=UC/%I', USER, USER)::aclitem AS aclitem,   'a fat cat sat on a mat and ate a fat rat'::tsvector,   'fat &amp; rat'::tsquery,   'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'::uuid,   '11'::xid8,   'pg_class'::regclass,   'regtype'::regtype type,   'pg_monitor'::regrole,   'pg_class'::regclass::oid,   '(1,1)'::tid, '2'::xid, '3'::cid,   '10:20:10,14,15'::txid_snapshot,   '10:20:10,14,15'::pg_snapshot,   '16/B374D848'::pg_lsn,   1::information_schema.cardinal_number,   'l'::information_schema.character_data,   'n'::information_schema.sql_identifier,   'now'::information_schema.time_stamp,   'YES'::information_schema.yes_or_no,   'venus'::planets,   'i16'::insenum,   '(1,2)'::int4range, '{(1,2)}'::int4multirange,   '(3,4)'::int8range, '{(3,4)}'::int8multirange,   '(1,2)'::float8range, '{(1,2)}'::float8multirange,   '(3,4)'::numrange, '{(3,4)}'::nummultirange,   '(a,b)'::textrange, '{(a,b)}'::textmultirange,   '(12.34, 56.78)'::cashrange, '{(12.34, 56.78)}'::cashmultirange,   '(2020-01-02, 2021-02-03)'::daterange,   '{(2020-01-02, 2021-02-03)}'::datemultirange,   '(2020-01-02 03:04:05, 2021-02-03 06:07:08)'::tsrange,   '{(2020-01-02 03:04:05, 2021-02-03 06:07:08)}'::tsmultirange,   '(2020-01-02 03:04:05, 2021-02-03 06:07:08)'::tstzrange,   '{(2020-01-02 03:04:05, 2021-02-03 06:07:08)}'::tstzmultirange,   arrayrange(ARRAY[1,2], ARRAY[2,1]),   arraymultirange(arrayrange(ARRAY[1,2], ARRAY[2,1]));" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case817" value="CREATE TABLE tableam_tblas_heapx AS SELECT * FROM tableam_tbl_heapx;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case819" value="CREATE TABLE tbl1 (c) AS VALUES ('bar'::text);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case821" value="CREATE TABLE test AS SELECT * FROM writetest;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case822" value="CREATE TABLE test_missing_target2 AS SELECT count(*) FROM test_missing_target x, test_missing_target y  WHERE x.a = y.a  GROUP BY x.b ORDER BY x.b;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case823" value="CREATE TABLE test_missing_target3 AS SELECT count(x.b) FROM test_missing_target x, test_missing_target y  WHERE x.a = y.a  GROUP BY x.b/2 ORDER BY x.b/2;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case825" value="CREATE TABLE test_u AS SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case826" value="CREATE TABLE testxmlschema.test3     AS SELECT true c1,               true::testboolxmldomain c2,               '2013-02-21'::date c3,               '2013-02-21'::testdatexmldomain c4;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case828" value="CREATE TABLE withz AS SELECT i AS k, (i || ' v')::text v FROM generate_series(1, 16, 3) i;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case829" value="CREATE TEMP TABLE bug6051 AS   select i from generate_series(1,3) as t(i);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case830" value="CREATE TEMP TABLE bug6051_3 AS   SELECT a FROM generate_series(11,13) AS a;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case831" value="CREATE TEMP TABLE department (  id INTEGER PRIMARY KEY,  parent_department INTEGER REFERENCES department  name TEX );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case832" value="CREATE TEMP TABLE gcircle_tbl AS     SELECT circle(home_base) AS f1 FROM slow_emp4000;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case833" value="CREATE TEMP TABLE gpolygon_tbl AS     SELECT polygon(home_base) AS f1 FROM slow_emp4000;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case834" value="CREATE TEMP TABLE kd_point_tbl_ord_idx1 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '0,0') n, p &lt;-&gt; '0,0' dist, p FROM kd_point_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case835" value="CREATE TEMP TABLE kd_point_tbl_ord_idx2 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '0,0') n, p &lt;-&gt; '0,0' dist, p FROM kd_point_tbl WHERE p &lt;@ box '(200,200,1000,1000)';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case836" value="CREATE TEMP TABLE kd_point_tbl_ord_idx3 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '333,400') n, p &lt;-&gt; '333,400' dist, p FROM kd_point_tbl WHERE p IS NOT NULL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case838" value="CREATE TEMP TABLE pcachetest AS SELECT * FROM int8_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case839" value="CREATE TEMP TABLE quad_box_tbl_ord_idx1 AS SELECT rank() OVER (ORDER BY b &lt;-&gt; point '123,456') n, b &lt;-&gt; point '123,456' dist, id FROM quad_box_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case840" value="CREATE TEMP TABLE quad_box_tbl_ord_idx2 AS SELECT rank() OVER (ORDER BY b &lt;-&gt; point '123,456') n, b &lt;-&gt; point '123,456' dist, id FROM quad_box_tbl WHERE b &lt;@ box '((200,300),(500,600))';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case841" value="CREATE TEMP TABLE quad_point_tbl_ord_idx1 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '0,0') n, p &lt;-&gt; '0,0' dist, p FROM quad_point_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case842" value="CREATE TEMP TABLE quad_point_tbl_ord_idx2 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '0,0') n, p &lt;-&gt; '0,0' dist, p FROM quad_point_tbl WHERE p &lt;@ box '(200,200,1000,1000)';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case843" value="CREATE TEMP TABLE quad_point_tbl_ord_idx3 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '333,400') n, p &lt;-&gt; '333,400' dist, p FROM quad_point_tbl WHERE p IS NOT NULL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case844" value="CREATE TEMP TABLE quad_point_tbl_ord_seq1 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '0,0') n, p &lt;-&gt; '0,0' dist, p FROM quad_point_tbl;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case845" value="CREATE TEMP TABLE quad_point_tbl_ord_seq2 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '0,0') n, p &lt;-&gt; '0,0' dist, p FROM quad_point_tbl WHERE p &lt;@ box '(200,200,1000,1000)';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case846" value="CREATE TEMP TABLE quad_point_tbl_ord_seq3 AS SELECT row_number() OVER (ORDER BY p &lt;-&gt; '333,400') n, p &lt;-&gt; '333,400' dist, p FROM quad_point_tbl WHERE p IS NOT NULL;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case847" value="CREATE TEMP TABLE quad_poly_tbl_ord_idx2 AS SELECT rank() OVER (ORDER BY p &lt;-&gt; point '123,456') n, p &lt;-&gt; point '123,456' dist, id FROM quad_poly_tbl WHERE p &lt;@ polygon '((300,300),(400,600),(600,500),(700,200))';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case848" value="CREATE TEMP TABLE quad_poly_tbl_ord_seq2 AS SELECT rank() OVER (ORDER BY p &lt;-&gt; point '123,456') n, p &lt;-&gt; point '123,456' dist, id FROM quad_poly_tbl WHERE p &lt;@ polygon '((300,300),(400,600),(600,500),(700,200))';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case850" value="CREATE TEMP TABLE temptest(col) ON COMMIT DROP AS SELECT 1;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case851" value="CREATE TEMPORARY TABLE foo (id INT4 UNIQUE NOT NULL , idm INT4 UNIQUE NOT NULL, idx INT4 UNIQUE NOT NULL, idy INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY, id3 INTEGER NOT NUL, id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL, idz INT4 UNIQUE NOT NULL, idv INT4 UNIQUE NOT NULL);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case852" value="CREATE TEMPORARY TABLE foo (id INT4 UNIQUE NOT NULL, idx INT4 UNIQUE NOT NULL, idy INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY, id3 INTEGER NOT NUL, id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL, idz INT4 UNIQUE NOT NULL, idv INT4 UNIQUE NOT NULL);" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case853" value="CREATE TEMPORARY TABLE foo( id3 INTEGER NOT NUL, id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL, id INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY) ;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case854" value="CREATE TEMPORARY TABLE foo(id INT4 UNIQUE NOT NULL, id2 TEXT NOT NULL PRIMARY KEY, id3 INTEGER NOT NUL, id4 INT4 UNIQUE NOT NULL, id5 TEXT UNIQUE NOT NULL) ;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case855" value="CREATE TEMPORARY TABLE q5_prep_nodata AS EXECUTE q5(200, 'DTAAAA')     WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case857" value="CREATE TRANSFORM FOR int LANGUAGE SQL (  FROM SQL WITH FUNCTION prsd_lextype(internal),  TO SQL WITH FUNCTION int4recv(internal));" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case858" value="CREATE TRIGGER error_ins_a BEFORE INSERT OF a ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('error_ins_a');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case859" value="CREATE TRIGGER error_stmt_when BEFORE UPDATE OF a ON main_table FOR EACH STATEMENT WHEN (OLD.* IS DISTINCT FROM NEW.*) EXECUTE PROCEDURE trigger_func('error_stmt_when');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case860" value="CREATE TRIGGER gtest1 BEFORE DELETE OR UPDATE ON gtest26   FOR EACH ROW   WHEN (OLD.b &lt; 0   EXECUTE PROCEDURE gtest_trigger_func();" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case861" value="CREATE TRIGGER gtest2a BEFORE INSERT OR UPDATE ON gtest26   FOR EACH ROW   WHEN (NEW.b &lt; 0   EXECUTE PROCEDURE gtest_trigger_func();" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case862" value="CREATE TRIGGER gtest2b BEFORE INSERT OR UPDATE ON gtest26   FOR EACH ROW   WHEN (NEW.* IS NOT NULL   EXECUTE PROCEDURE gtest_trigger_func();" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case863" value="CREATE TRIGGER gtest3 AFTER DELETE OR UPDATE ON gtest26   FOR EACH ROW   WHEN (OLD.b &lt; 0   EXECUTE PROCEDURE gtest_trigger_func();" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case864" value="CREATE TRIGGER gtest4 AFTER INSERT OR UPDATE ON gtest26   FOR EACH ROW   WHEN (NEW.b &lt; 0   EXECUTE PROCEDURE gtest_trigger_func();" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case865" value="CREATE TRIGGER modified_any BEFORE UPDATE OF a ON main_table FOR EACH ROW WHEN (OLD.* IS DISTINCT FROM NEW.*) EXECUTE PROCEDURE trigger_func('modified_any');" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case866" value="CREATE TYPE city_budget (    internallength = 16,    input = int44in,    output = int44out,    element = int4,    category = 'x'    preferred = tr );" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case869" value="CREATE TYPE tt_t0 AS (z inet, x int, y numeric(8,2));" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case873" value="CREATE VIEW mysecview5 WITH (security_barrier=100) -- Error        AS SELECT * FROM tbl1 WHERE a &gt; 100;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case874" value="CREATE VIEW mysecview6 WITH (invalid_option)  -- Error        AS SELECT * FROM tbl1 WHERE a &lt; 100;" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case875" value="CREATE VIEW rw_view2 AS SELECT * FROM rw_view1 WHERE a &lt; 10   WITH CHECK OPTIO SELECT * FROM information_schema.views WHERE table_name = 'rw_view2';" db-types="PostgreSQL"/>
    <sql-case id="create_by_postgresql_source_test_case878" value="CREATE foo;" db-types="PostgreSQL"/>
    <sql-case id="ddd 42_by_postgresql_source_test_case1" value="DDD 42 drop trigger child1_insert_trig on child1;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case2" value="DELETE FROM current_check WHERE CURRENT OF c1 RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case4" value="DELETE FROM current_check WHERE CURRENT OF current_check_cursor RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case6" value="DELETE FROM onek WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case7" value="DELETE FROM tenk1 WHERE CURRENT OF c;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case9" value="DELETE FROM uctest WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case11" value="DELETE FROM uctest WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case13" value="DELETE FROM uctest WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case15" value="DELETE FROM uctest WHERE CURRENT OF c;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case16" value="DELETE FROM uctest WHERE CURRENT OF c;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case17" value="DELETE FROM uctest WHERE CURRENT OF c;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case18" value="DELETE FROM uctest WHERE CURRENT OF cx;" db-types="PostgreSQL"/>
    <sql-case id="delete_by_postgresql_source_test_case19" value="DELETE FROM ucview WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case1" value="DO $$   declare r boolean;   begin     execute $e$ select 2 !=-- comment       1 $e$ into r;     raise info 'r = %', r;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case2" value="DO $$ BEGIN  EXECUTE 'EXPLAIN ANALYZE SELECT * INTO TABLE easi FROM int8_tbl';  EXECUTE 'EXPLAIN ANALYZE CREATE TABLE easi2 AS SELECT * FROM int8_tbl WITH NO DATA'; END$$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case3" value="DO $$ BEGIN     FOR r IN 1..1350 LOOP         DELETE FROM dedup_unique_test_table;         INSERT INTO dedup_unique_test_table SELECT 1;     END LOOP; END$$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case4" value="DO $$ BEGIN  SET effective_io_concurrency = 50; EXCEPTION WHEN invalid_parameter_value THEN END $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case5" value="DO $$ DECLARE  objtype text;  names text[];  args text[]; BEGIN  FOR objtype IN VALUES   ('table'), ('index'), ('sequence'), ('view'),   ('materialized view'), ('foreign table'),   ('table column'), ('foreign table column'),   ('aggregate'), ('function'), ('procedure'), ('type'), ('cast'),   ('table constraint'), ('domain constraint'), ('conversion'), ('default value'),   ('operator'), ('operator class'), ('operator family'), ('rule'), ('trigger'),   ('text search parser'), ('text search dictionary'),   ('text search template'), ('text search configuration'),   ('policy'), ('user mapping'), ('default acl'), ('transform'),   ('operator of access method'), ('function of access method'),   ('publication relation')  LOOP   FOR names IN VALUES ('{eins}'), ('{addr_nsp, zwei}'), ('{eins, zwei, drei}')   LOOP    FOR args IN VALUES ('{}'), ('{integer}')    LOOP     BEGIN      PERFORM pg_get_object_address(objtype, names, args);     EXCEPTION WHEN OTHERS THEN       RAISE WARNING 'error for %,%,%: %', objtype, names, args, sqlerrm;     END;    END LOOP;   END LOOP;  END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case6" value="DO $$ DECLARE  objtype text; BEGIN  FOR objtype IN VALUES ('toast table'), ('index column'), ('sequence column'),   ('toast table column'), ('view column'), ('materialized view column')  LOOP   BEGIN    PERFORM pg_get_object_address(objtype, '{one}', '{}');   EXCEPTION WHEN invalid_parameter_value THEN    RAISE WARNING 'error for %: %', objtype, sqlerrm;   END;  END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case7" value="DO $$ DECLARE  relname text := reltoastrelid::regclass FROM pg_class WHERE oid = 'tststats.t'::regclass; BEGIN  EXECUTE 'CREATE STATISTICS tststats.s10 ON a, b FROM ' || relname; EXCEPTION WHEN wrong_object_type THEN  RAISE NOTICE 'stats on toast table not created'; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case8" value="DO $$ DECLARE   o int;   a int[] := ARRAY[1,2,3,2,3,1,2]; BEGIN   o := array_position(a, 2);   WHILE o IS NOT NULL   LOOP     RAISE NOTICE '%', o;     o := array_position(a, 2, o + 1);   END LOOP; END $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case9" value="DO $$ DECLARE curtid tid; BEGIN   LOOP     INSERT INTO brin_summarize VALUES (1) RETURNING ctid INTO curtid;     EXIT WHEN curtid &gt; tid '(2, 0)';   END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case10" value="DO $$ DECLARE curtid tid; BEGIN   LOOP     INSERT INTO brin_summarize_bloom VALUES (1) RETURNING ctid INTO curtid;     EXIT WHEN curtid &gt; tid '(2, 0)';   END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case11" value="DO $$ DECLARE curtid tid; BEGIN   LOOP     INSERT INTO brin_summarize_multi VALUES (1) RETURNING ctid INTO curtid;     EXIT WHEN curtid &gt; tid '(2, 0)';   END LOOP; END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case12" value="DO $$ DECLARE r record; BEGIN     FOR r IN SELECT rtrim(roomno) AS roomno, comment FROM Room ORDER BY roomno     LOOP         RAISE NOTICE '%, %', r.roomno, r.comment;     END LOOP; END$$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case13" value="DO $$ DECLARE r record; BEGIN     FOR r IN SELECT rtrim(roomno) AS roomno, foo FROM Room ORDER BY roomno     LOOP         RAISE NOTICE '%, %', r.roomno, r.comment;     END LOOP; END$$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case14" value="DO $$ DECLARE r text[]; BEGIN   r := parse_ident('Schemax.Tabley');   RAISE NOTICE '%', format('%I.%I', r[1], r[2]);   r := parse_ident('&quot;SchemaX&quot;.&quot;TableY&quot;');   RAISE NOTICE '%', format('%I.%I', r[1], r[2]); END; $$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case15" value="DO $doblock$ declare   fk record;   nkeys integer;   cmd text;   err record; begin   for fk in select * from pg_get_catalog_foreign_keys()   loop     raise notice 'checking % % =&gt; % %',       fk.fktable, fk.fkcols, fk.pktable, fk.pkcols;     nkeys := array_length(fk.fkcols, 1);     cmd := 'SELECT ctid';     for i in 1 .. nkeys loop       cmd := cmd || ', ' || quote_ident(fk.fkcols[i]);     end loop;     if fk.is_array then       cmd := cmd || ' FROM (SELECT ctid';       for i in 1 .. nkeys-1 loop         cmd := cmd || ', ' || quote_ident(fk.fkcols[i]);       end loop;       cmd := cmd || ', unnest(' || quote_ident(fk.fkcols[nkeys]);       cmd := cmd || ') as ' || quote_ident(fk.fkcols[nkeys]);       cmd := cmd || ' FROM ' || fk.fktable::text || ') fk WHERE ';     else       cmd := cmd || ' FROM ' || fk.fktable::text || ' fk WHERE ';     end if;     if fk.is_opt then       for i in 1 .. nkeys loop         cmd := cmd || quote_ident(fk.fkcols[i]) || ' != 0 AND ';       end loop;     end if;     cmd := cmd || 'NOT EXISTS(SELECT 1 FROM ' || fk.pktable::text || ' pk WHERE ';     for i in 1 .. nkeys loop       if i &gt; 1 then cmd := cmd || ' AND '; end if;       cmd := cmd || 'pk.' || quote_ident(fk.pkcols[i]);       cmd := cmd || ' = fk.' || quote_ident(fk.fkcols[i]);     end loop;     cmd := cmd || ')';     for err in execute cmd loop       raise warning 'FK VIOLATION IN %(%): %', fk.fktable, fk.fkcols, err;     end loop;   end loop; end $doblock$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case16" value="DO $x$ DECLARE  r record;  r2 record;  cond text;  idx_ctids tid[];  ss_ctids tid[];  count int;  plan_ok bool;  plan_line text; BEGIN  FOR r IN SELECT colname, oper, typ, value[ordinality], matches[ordinality] FROM brinopers, unnest(op) WITH ORDINALITY AS oper LOOP   IF r.value IS NULL THEN    cond := format('%I %s %L', r.colname, r.oper, r.value);   ELSE    cond := format('%I %s %L::%s', r.colname, r.oper, r.value, r.typ);   END IF;   SET enable_seqscan = 0;   SET enable_bitmapscan = 1;   plan_ok := false;   FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest WHERE %s $y$, cond) LOOP    IF plan_line LIKE '%Bitmap Heap Scan on brintest%' THEN     plan_ok := true;    END IF;   END LOOP;   IF NOT plan_ok THEN    RAISE WARNING 'did not get bitmap indexscan plan for %', r;   END IF;   EXECUTE format($y$SELECT array_agg(ctid) FROM brintest WHERE %s $y$, cond)    INTO idx_ctids;   SET enable_seqscan = 1;   SET enable_bitmapscan = 0;   plan_ok := false;   FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest WHERE %s $y$, cond) LOOP    IF plan_line LIKE '%Seq Scan on brintest%' THEN     plan_ok := true;    END IF;   END LOOP;   IF NOT plan_ok THEN    RAISE WARNING 'did not get seqscan plan for %', r;   END IF;   EXECUTE format($y$SELECT array_agg(ctid) FROM brintest WHERE %s $y$, cond)    INTO ss_ctids;   count := array_length(idx_ctids, 1);   IF NOT (count = array_length(ss_ctids, 1) AND     idx_ctids @&gt; ss_ctids AND     idx_ctids &lt;@ ss_ctids) THEN    RAISE WARNING 'something not right in %: count %', r, count;    SET enable_seqscan = 1;    SET enable_bitmapscan = 0;    FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest WHERE ' || cond LOOP     RAISE NOTICE 'seqscan: %', r2;    END LOOP;    SET enable_seqscan = 0;    SET enable_bitmapscan = 1;    FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest WHERE ' || cond LOOP     RAISE NOTICE 'bitmapscan: %', r2;    END LOOP;   END IF;   IF count != r.matches THEN RAISE WARNING 'unexpected number of results % for %', count, r; END IF;  END LOOP; END; $x$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case17" value="DO $x$ DECLARE  r record;  r2 record;  cond text;  idx_ctids tid[];  ss_ctids tid[];  count int;  plan_ok bool;  plan_line text; BEGIN  FOR r IN SELECT colname, oper, typ, value[ordinality], matches[ordinality] FROM brinopers_bloom, unnest(op) WITH ORDINALITY AS oper LOOP   IF r.value IS NULL THEN    cond := format('%I %s %L', r.colname, r.oper, r.value);   ELSE    cond := format('%I %s %L::%s', r.colname, r.oper, r.value, r.typ);   END IF;   SET enable_seqscan = 0;   SET enable_bitmapscan = 1;   plan_ok := false;   FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) LOOP    IF plan_line LIKE '%Bitmap Heap Scan on brintest_bloom%' THEN     plan_ok := true;    END IF;   END LOOP;   IF NOT plan_ok THEN    RAISE WARNING 'did not get bitmap indexscan plan for %', r;   END IF;   EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond)    INTO idx_ctids;   SET enable_seqscan = 1;   SET enable_bitmapscan = 0;   plan_ok := false;   FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) LOOP    IF plan_line LIKE '%Seq Scan on brintest_bloom%' THEN     plan_ok := true;    END IF;   END LOOP;   IF NOT plan_ok THEN    RAISE WARNING 'did not get seqscan plan for %', r;   END IF;   EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond)    INTO ss_ctids;   count := array_length(idx_ctids, 1);   IF NOT (count = array_length(ss_ctids, 1) AND     idx_ctids @&gt; ss_ctids AND     idx_ctids &lt;@ ss_ctids) THEN    RAISE WARNING 'something not right in %: count %', r, count;    SET enable_seqscan = 1;    SET enable_bitmapscan = 0;    FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest_bloom WHERE ' || cond LOOP     RAISE NOTICE 'seqscan: %', r2;    END LOOP;    SET enable_seqscan = 0;    SET enable_bitmapscan = 1;    FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest_bloom WHERE ' || cond LOOP     RAISE NOTICE 'bitmapscan: %', r2;    END LOOP;   END IF;   IF count != r.matches THEN RAISE WARNING 'unexpected number of results % for %', count, r; END IF;  END LOOP; END; $x$;" db-types="PostgreSQL"/>
    <sql-case id="do_by_postgresql_source_test_case18" value="DO $x$ DECLARE  r record;  r2 record;  cond text;  idx_ctids tid[];  ss_ctids tid[];  count int;  plan_ok bool;  plan_line text; BEGIN  FOR r IN SELECT colname, oper, typ, value[ordinality], matches[ordinality] FROM brinopers_multi, unnest(op) WITH ORDINALITY AS oper LOOP   IF r.value IS NULL THEN    cond := format('%I %s %L', r.colname, r.oper, r.value);   ELSE    cond := format('%I %s %L::%s', r.colname, r.oper, r.value, r.typ);   END IF;   SET enable_seqscan = 0;   SET enable_bitmapscan = 1;   plan_ok := false;   FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_multi WHERE %s $y$, cond) LOOP    IF plan_line LIKE '%Bitmap Heap Scan on brintest_multi%' THEN     plan_ok := true;    END IF;   END LOOP;   IF NOT plan_ok THEN    RAISE WARNING 'did not get bitmap indexscan plan for %', r;   END IF;   EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_multi WHERE %s $y$, cond)    INTO idx_ctids;   SET enable_seqscan = 1;   SET enable_bitmapscan = 0;   plan_ok := false;   FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_multi WHERE %s $y$, cond) LOOP    IF plan_line LIKE '%Seq Scan on brintest_multi%' THEN     plan_ok := true;    END IF;   END LOOP;   IF NOT plan_ok THEN    RAISE WARNING 'did not get seqscan plan for %', r;   END IF;   EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_multi WHERE %s $y$, cond)    INTO ss_ctids;   count := array_length(idx_ctids, 1);   IF NOT (count = array_length(ss_ctids, 1) AND     idx_ctids @&gt; ss_ctids AND     idx_ctids &lt;@ ss_ctids) THEN    RAISE WARNING 'something not right in %: count %', r, count;    SET enable_seqscan = 1;    SET enable_bitmapscan = 0;    FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest_multi WHERE ' || cond LOOP     RAISE NOTICE 'seqscan: %', r2;    END LOOP;    SET enable_seqscan = 0;    SET enable_bitmapscan = 1;    FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest_multi WHERE ' || cond LOOP     RAISE NOTICE 'bitmapscan: %', r2;    END LOOP;   END IF;   IF count != r.matches THEN RAISE WARNING 'unexpected number of results % for %', count, r; END IF;  END LOOP; END; $x$;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case1" value="EXECUTE cprep;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case3" value="EXECUTE foo;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case4" value="EXECUTE hsp;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case6" value="EXECUTE p1;  -- To be perform as a view with security-barrier EXECUTE p2;  -- To be perform as a view without security-barrier RESET SESSION AUTHORIZATION;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case8" value="EXECUTE prepstmt;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case10" value="EXECUTE prepstmt;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case12" value="EXECUTE prepstmt;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case14" value="EXECUTE q1;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case15" value="EXECUTE test \gdesc EXPLAIN EXECUTE test \gdesc SELECT 1 + \gdesc SELECT \gdesc CREATE TABLE bububu(a int) \gdesc TABLE bububu;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case16" value="EXECUTE test;" db-types="PostgreSQL"/>
    <sql-case id="execute_by_postgresql_source_test_case18" value="EXECUTE vprep;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case3" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE ctas_ine_tbl AS EXECUTE ctas_ine_quer EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS EXECUTE ctas_ine_quer DROP TABLE ctas_ine_tbl;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case4" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE ctas_ine_tbl AS SELECT 1 /  EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 /  EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0 WITH NO DAT EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0 WITH NO DAT PREPARE ctas_ine_query AS SELECT 1 / 0;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case5" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE selinto_schema.tbl_nodata2 (a) AS   SELECT generate_series(1,3) WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case6" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE selinto_schema.tbl_nodata4 (a) AS   EXECUTE data_sel WITH NO DATA;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case7" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE selinto_schema.tbl_withdata2 (a) AS   SELECT generate_series(1,3) WITH DATA;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case8" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE TABLE selinto_schema.tbl_withdata4 (a) AS   EXECUTE data_sel WITH DATA;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case9" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF) UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case10" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF) UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case11" value="EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF) UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case12" value="EXPLAIN (COSTS OFF)   SELECT count(*) FROM dupindexcols     WHERE f1 BETWEEN 'WA' AND 'ZZZ' and id &lt; 1000 and f1 ~&lt;~ 'YX';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case14" value="EXPLAIN (COSTS OFF) EXECUTE plancache_test2;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case16" value="EXPLAIN (COSTS OFF) EXECUTE plancache_test2;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case18" value="EXPLAIN (COSTS OFF) EXECUTE plancache_test3;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case20" value="EXPLAIN (COSTS OFF) EXECUTE plancache_test3;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case22" value="EXPLAIN (COSTS OFF) EXECUTE plancache_test;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case24" value="EXPLAIN (COSTS OFF) EXECUTE plancache_test;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case26" value="EXPLAIN (COSTS OFF) EXECUTE role_inval;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case28" value="EXPLAIN (COSTS OFF) EXECUTE role_inval;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case45" value="EXPLAIN (COSTS OFF) SELECT * FROM fast_emp4000     WHERE home_base &lt;@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0];" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case46" value="EXPLAIN (COSTS OFF) SELECT * FROM fast_emp4000     WHERE home_base &lt;@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0];" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case48" value="EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr &gt;&gt; i;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case49" value="EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr &gt;&gt;= i;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case50" value="EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE i&lt;&lt;'192.168.1.0/24'::cidr;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case51" value="EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE i&lt;&lt;='192.168.1.0/24'::cidr;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case100" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ^@  'Worth';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case101" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ^@  'Worth';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case102" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;=~ 'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case103" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;=~ 'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case104" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;~  'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case105" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;~  'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case106" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;=~ 'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case107" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;=~ 'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case108" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;~  'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case109" value="EXPLAIN (COSTS OFF) SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;~  'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case110" value="EXPLAIN (COSTS OFF) SELECT i FROM inet_tbl WHERE i &lt;&lt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case111" value="EXPLAIN (COSTS OFF) SELECT i FROM inet_tbl WHERE i &lt;&lt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="explain_by_postgresql_source_test_case117" value="EXPLAIN (VERBOSE, COSTS OFF) UPDATE update_test t   SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)   WHERE CURRENT_USER = SESSION_USER;" db-types="PostgreSQL"/>
    <sql-case id="import_by_postgresql_source_test_case1" value="IMPORT FOREIGN SCHEMA s1 EXCEPT (t1) FROM SERVER s9 INTO public;" db-types="PostgreSQL"/>
    <sql-case id="import_by_postgresql_source_test_case2" value="IMPORT FOREIGN SCHEMA s1 EXCEPT (t1, t2) FROM SERVER s9 INTO public OPTIONS (option1 'value1', option2 'value2');" db-types="PostgreSQL"/>
    <sql-case id="import_by_postgresql_source_test_case3" value="IMPORT FOREIGN SCHEMA s1 FROM SERVER s9 INTO public;" db-types="PostgreSQL"/>
    <sql-case id="import_by_postgresql_source_test_case4" value="IMPORT FOREIGN SCHEMA s1 LIMIT TO (t1) FROM SERVER s9 INTO public;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case1" value="INSERT INTO 123 VALUES(123);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case7" value="INSERT INTO BIT_TABLE VALUES (B'00000000000');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case9" value="INSERT INTO BIT_TABLE VALUES (B'10');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case10" value="INSERT INTO BIT_TABLE VALUES (B'101011111010');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case12" value="INSERT INTO INET_TBL (c, i) VALUES (cidr('192.168.1.2/30'), '192.168.1.226');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case14" value="INSERT INTO LINE_TBL VALUES (line(point '(1,0)', point '(1,0)'));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case31" value="INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'0' AS BIT VARYING(6)) &gt;&gt;1 FROM VARBIT_SHIFT_TABLE;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case33" value="INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'0000' AS BIT VARYING(12)) &gt;&gt;4 FROM VARBIT_SHIFT_TABLE;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case35" value="INSERT INTO VARBIT_SHIFT_TABLE VALUES (B'11011');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case37" value="INSERT INTO VARBIT_TABLE VALUES (B'010101');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case39" value="INSERT INTO VARBIT_TABLE VALUES (B'101011111010');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case45" value="INSERT INTO abbrev_abort_uuids DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case49" value="INSERT INTO arrtest (a, b[1:2], c, d[1:2])    VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case50" value="INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)    VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{&quot;foobar&quot;}',            '{{&quot;elt1&quot;, &quot;elt2&quot;}}', '{&quot;3.4&quot;, &quot;6.7&quot;}',            '{&quot;abc&quot;,&quot;abcde&quot;}', '{&quot;abc&quot;,&quot;abcde&quot;}');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case51" value="INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)    VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case52" value="INSERT INTO arrtest (b[1:2]) VALUES(now());" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case53" value="INSERT INTO arrtest (b[2]) VALUES(now());" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case73" value="INSERT INTO bit_defaults DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case81" value="INSERT INTO brintest SELECT  repeat(stringu1, 42)::bytea,  substr(stringu1, 1, 1)::&quot;char&quot;,  stringu1::name, 142857 * tenthous,  thousand,  twothousand,  repeat(stringu1, 42),  unique1::oid,  format('(%s,%s)', tenthous, twenty)::tid,  (four + 1.0)/(hundred+1),  odd::float8 / (tenthous + 1),  format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  inet '10.2.3.4' + tenthous,  cidr '10.2.3/24' + tenthous,  substr(stringu1, 1, 1)::bpchar,  date '1995-08-15' + tenthous,  time '01:20:30' + thousand * interval '18.5 second',  timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  justify_days(justify_hours(tenthous * interval '12 minutes')),  timetz '01:30:20' + hundred * interval '15 seconds',  thousand::bit(10),  tenthous::bit(16)::varbit,  tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  int4range(thousand, twothousand),  format('%s/%s%s', odd, even, tenthous)::pg_lsn,  box(point(odd, even), point(thousand, twothousand)) FROM tenk1 ORDER BY unique2 LIMIT 5 OFFSET 5;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case82" value="INSERT INTO brintest SELECT  repeat(stringu1, 8)::bytea,  substr(stringu1, 1, 1)::&quot;char&quot;,  stringu1::name, 142857 * tenthous,  thousand,  twothousand,  repeat(stringu1, 8),  unique1::oid,  format('(%s,%s)', tenthous, twenty)::tid,  (four + 1.0)/(hundred+1),  odd::float8 / (tenthous + 1),  format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  inet '10.2.3.4/24' + tenthous,  cidr '10.2.3/24' + tenthous,  substr(stringu1, 1, 1)::bpchar,  date '1995-08-15' + tenthous,  time '01:20:30' + thousand * interval '18.5 second',  timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  justify_days(justify_hours(tenthous * interval '12 minutes')),  timetz '01:30:20+02' + hundred * interval '15 seconds',  thousand::bit(10),  tenthous::bit(16)::varbit,  tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  int4range(thousand, twothousand),  format('%s/%s%s', odd, even, tenthous)::pg_lsn,  box(point(odd, even), point(thousand, twothousand)) FROM tenk1 ORDER BY unique2 LIMIT 100;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case85" value="INSERT INTO brintest_bloom SELECT  repeat(stringu1, 42)::bytea,  substr(stringu1, 1, 1)::&quot;char&quot;,  stringu1::name, 142857 * tenthous,  thousand,  twothousand,  repeat(stringu1, 42),  unique1::oid,  (four + 1.0)/(hundred+1),  odd::float8 / (tenthous + 1),  format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  inet '10.2.3.4' + tenthous,  cidr '10.2.3/24' + tenthous,  substr(stringu1, 1, 1)::bpchar,  date '1995-08-15' + tenthous,  time '01:20:30' + thousand * interval '18.5 second',  timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  justify_days(justify_hours(tenthous * interval '12 minutes')),  timetz '01:30:20' + hundred * interval '15 seconds',  tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  format('%s/%s%s', odd, even, tenthous)::pg_lsn FROM tenk1 ORDER BY unique2 LIMIT 5 OFFSET 5;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case86" value="INSERT INTO brintest_bloom SELECT  repeat(stringu1, 8)::bytea,  substr(stringu1, 1, 1)::&quot;char&quot;,  stringu1::name, 142857 * tenthous,  thousand,  twothousand,  repeat(stringu1, 8),  unique1::oid,  (four + 1.0)/(hundred+1),  odd::float8 / (tenthous + 1),  format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  inet '10.2.3.4/24' + tenthous,  cidr '10.2.3/24' + tenthous,  substr(stringu1, 1, 1)::bpchar,  date '1995-08-15' + tenthous,  time '01:20:30' + thousand * interval '18.5 second',  timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  justify_days(justify_hours(tenthous * interval '12 minutes')),  timetz '01:30:20+02' + hundred * interval '15 seconds',  tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  format('%s/%s%s', odd, even, tenthous)::pg_lsn FROM tenk1 ORDER BY unique2 LIMIT 100;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case88" value="INSERT INTO brintest_multi SELECT  142857 * tenthous,  thousand,  twothousand,  unique1::oid,  format('(%s,%s)', tenthous, twenty)::tid,  (four + 1.0)/(hundred+1),  odd::float8 / (tenthous + 1),  format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  substr(md5(unique1::text), 1, 16)::macaddr8,  inet '10.2.3.4' + tenthous,  cidr '10.2.3/24' + tenthous,  date '1995-08-15' + tenthous,  time '01:20:30' + thousand * interval '18.5 second',  timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  justify_days(justify_hours(tenthous * interval '12 minutes')),  timetz '01:30:20' + hundred * interval '15 seconds',  tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  format('%s/%s%s', odd, even, tenthous)::pg_lsn FROM tenk1 ORDER BY unique2 LIMIT 5 OFFSET 5;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case89" value="INSERT INTO brintest_multi SELECT  142857 * tenthous,  thousand,  twothousand,  unique1::oid,  format('(%s,%s)', tenthous, twenty)::tid,  (four + 1.0)/(hundred+1),  odd::float8 / (tenthous + 1),  format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  substr(md5(unique1::text), 1, 16)::macaddr8,  inet '10.2.3.4/24' + tenthous,  cidr '10.2.3/24' + tenthous,  date '1995-08-15' + tenthous,  time '01:20:30' + thousand * interval '18.5 second',  timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  justify_days(justify_hours(tenthous * interval '12 minutes')),  timetz '01:30:20+02' + hundred * interval '15 seconds',  tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  format('%s/%s%s', odd, even, tenthous)::pg_lsn FROM tenk1 ORDER BY unique2 LIMIT 100;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case129" value="INSERT INTO default_test DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case145" value="INSERT INTO foo AS bar DEFAULT VALUES RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case146" value="INSERT INTO foo AS bar DEFAULT VALUES RETURNING bar.*;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case147" value="INSERT INTO foo AS bar DEFAULT VALUES RETURNING bar.f3;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case148" value="INSERT INTO foo AS bar DEFAULT VALUES RETURNING foo.*;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case164" value="INSERT INTO itest1 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case166" value="INSERT INTO itest2 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case168" value="INSERT INTO itest3 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case170" value="INSERT INTO itest4 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case172" value="INSERT INTO itest4 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case174" value="INSERT INTO itest6 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case176" value="INSERT INTO itest6 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case178" value="INSERT INTO itest7c DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case180" value="INSERT INTO itestv10 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case182" value="INSERT INTO itestv11 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case184" value="INSERT INTO large_tuple_test (select 1, NULL);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case186" value="INSERT INTO large_tuple_test (select 3, NULL);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case188" value="INSERT INTO main_table DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case205" value="INSERT INTO ndistinct (a, b, c, filler1)      SELECT i/100, i/100, i/100, cash_words((i/100)::money)        FROM generate_series(1,1000) s(i);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case211" value="INSERT INTO num_result SELECT id, 0, LOG(numeric '10', ABS(val))     FROM num_data     WHERE val != '0.0';" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case212" value="INSERT INTO num_result SELECT id, 0, POW(numeric '10', LN(ABS(round(val,1000))))     FROM num_data     WHERE val != '0.0';" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case213" value="INSERT INTO num_result SELECT id, 0, POWER(numeric '10', LN(ABS(round(val,200))))     FROM num_data     WHERE val != '0.0';" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case234" value="INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.7, 1.7, '[]'), numrange(1.7, 1.9)));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case236" value="INSERT INTO nummultirange_test VALUES(nummultirange(variadic '{}'::numrange[]));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case238" value="INSERT INTO nummultirange_test2 VALUES(nummultirange(numrange(1.1, 2.2)));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case240" value="INSERT INTO numrange_test VALUES(numrange(1.1, 2.2));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case242" value="INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case244" value="INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2,'()'));" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case307" value="INSERT INTO s1 (SELECT x, md5(x::text) FROM generate_series(-10,10) x);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case311" value="INSERT INTO t DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case317" value="INSERT INTO t2 (SELECT * FROM t1);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case349" value="INSERT INTO test6 VALUES (2, U&amp;'\0061\0308bc');" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case351" value="INSERT INTO test6a VALUES (2, ARRAY[U&amp;'\0061\0308bc']);" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case354" value="INSERT INTO test_ns_schema_1.abc DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case363" value="INSERT INTO trunc_stats_test DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case365" value="INSERT INTO trunc_stats_test DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case367" value="INSERT INTO trunc_stats_test1 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case369" value="INSERT INTO trunc_stats_test1 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case371" value="INSERT INTO trunc_stats_test2 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case373" value="INSERT INTO trunc_stats_test2 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case375" value="INSERT INTO trunc_stats_test3 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case377" value="INSERT INTO trunc_stats_test3 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case379" value="INSERT INTO trunc_stats_test4 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case381" value="INSERT INTO trunc_stats_test4 DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case383" value="INSERT INTO truncate_a DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case385" value="INSERT INTO truncate_a DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case387" value="INSERT INTO truncate_a DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case389" value="INSERT INTO truncate_a DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case391" value="INSERT INTO truncate_b DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case393" value="INSERT INTO truncate_b DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case395" value="INSERT INTO truncate_b DEFAULT VALUES;" db-types="PostgreSQL"/>
    <sql-case id="insert_by_postgresql_source_test_case428" value="INSERT INTO y2 (SELECT x, md5(x::text) FROM generate_series(0,20) x);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1" value="SELECT  i::text || ':' || COALESCE(v::text, 'NULL') as row,  logging_agg_strict(v::text)   over wnd as inverse,  logging_agg_strict(v::text || CASE WHEN random() &lt; 0 then '?' ELSE '' END)   over wnd as noinverse FROM (VALUES  (1, 'a'),  (2, 'b'),  (3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case2" value="SELECT  i::text || ':' || COALESCE(v::text, 'NULL') as row,  logging_agg_strict(v::text) filter(where true)   over wnd as inverse,  logging_agg_strict(v::text) filter(where random() &gt;= 0)   over wnd as noinverse FROM (VALUES  (1, 'a'),  (2, 'b'),  (3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case3" value="SELECT  p::text || ',' || i::text || ':' ||   CASE WHEN f THEN COALESCE(v::text, 'NULL') ELSE '-' END as row,  logging_agg_nonstrict(v) filter(where f) over wnd as nstrict_filt,  logging_agg_nonstrict_initcond(v) filter(where f) over wnd as nstrict_init_filt,  logging_agg_strict(v::text) filter(where f) over wnd as strict_filt,  logging_agg_strict_initcond(v) filter(where f) over wnd as strict_init_filt FROM (VALUES  (1, 1, true,  NULL),  (1, 2, false, 'a'),  (1, 3, true,  'b'),  (1, 4, false, NULL),  (1, 5, false, NULL),  (1, 6, false, 'c'),  (2, 1, false, NULL),  (2, 2, true,  'x'),  (3, 1, true,  'z') ) AS t(p, i, f, v) WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case4" value="SELECT  p::text || ',' || i::text || ':' || COALESCE(v::text, 'NULL') AS row,  logging_agg_nonstrict(v) over wnd as nstrict,  logging_agg_nonstrict_initcond(v) over wnd as nstrict_init,  logging_agg_strict(v::text) over wnd as strict,  logging_agg_strict_initcond(v) over wnd as strict_init FROM (VALUES  (1, 1, NULL),  (1, 2, 'a'),  (1, 3, 'b'),  (1, 4, NULL),  (1, 5, NULL),  (1, 6, 'c'),  (2, 1, NULL),  (2, 2, 'x'),  (3, 1, 'z') ) AS t(p, i, v) WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case5" value="SELECT   (SELECT n      FROM (VALUES (1)) AS x,           (SELECT n FROM generate_series(1,10) AS n              ORDER BY n LIMIT 1 OFFSET s-1) AS y) AS z   FROM generate_series(1,10) AS s;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case10" value="SELECT   str,   interval,   date_trunc(str, ts, 'Australia/Sydney') = date_bin(interval::interval, ts, timestamp with time zone '2001-01-01+11') AS equal FROM (   VALUES   ('day', '1 d'),   ('hour', '1 h'),   ('minute', '1 m'),   ('second', '1 s'),   ('millisecond', '1 ms'),   ('microsecond', '1 us') ) intervals (str, interval), (VALUES (timestamptz '2020-02-29 15:44:17.71393+00')) ts (ts);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case11" value="SELECT  thousand   FROM onek WHERE thousand &lt; 5   ORDER BY thousand FETCH FIRST 1 ROW WITH TIES FOR UPDATE SKIP LOCKED;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case12" value="SELECT  thousand   FROM onek WHERE thousand &lt; 5   ORDER BY thousand FETCH FIRST 1 ROW WITH TIES;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case13" value="SELECT  thousand   FROM onek WHERE thousand &lt; 5   ORDER BY thousand FETCH FIRST 2 ROW ONLY;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case14" value="SELECT  thousand   FROM onek WHERE thousand &lt; 5   ORDER BY thousand FETCH FIRST 2 ROW WITH TIES;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case15" value="SELECT  thousand   FROM onek WHERE thousand &lt; 5   ORDER BY thousand FETCH FIRST ROWS WITH TIES;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case17" value="SELECT $$'' '1' '2'$$::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case19" value="SELECT $$'\\as'$$::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case21" value="SELECT '    08:00:2b:01:02:03'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case23" value="SELECT '    08:00:2b:01:02:03:04:05'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case24" value="SELECT '    true   '::text::boolean AS true,        '     FALSE'::text::boolean AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case26" value="SELECT ' 1 '::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case28" value="SELECT ' 1'::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case30" value="SELECT '!!a &amp; !!b'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case32" value="SELECT '!!b'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case34" value="SELECT '!(!1|2)'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case36" value="SELECT '!(1&amp;2)'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case38" value="SELECT '!(1|!2)'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case40" value="SELECT '!(1|2)'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case42" value="SELECT '!1&amp;2'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case44" value="SELECT '!1|!2'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case46" value="SELECT '!1|2&amp;3'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case48" value="SELECT '''1 2'''::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case50" value="SELECT ''::text AS two, unique1, unique2, stringu1   FROM onek WHERE unique1 &gt; 50   FETCH FIRST 2 ROW WITH TIES;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case52" value="SELECT '($123,456.78)'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case54" value="SELECT '(1)'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case56" value="SELECT '-12345'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case58" value="SELECT '-12345678901234567'::money::numeric;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case60" value="SELECT '-123456789012345678'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case62" value="SELECT '-92233720368547758.08'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case64" value="SELECT '-92233720368547758.09'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case66" value="SELECT '08-00-2b-01-02-03-04-05-06-07'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case67" value="SELECT '08002b01020304050607'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case68" value="SELECT '08002b010203xyza'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case69" value="SELECT '08002b:01020304050607'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case70" value="SELECT '08:00-2b:01:02:03:04:05'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case71" value="SELECT '08:00-2b:01:02:03:04:05'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case72" value="SELECT '08:00:2b:01.02:03:04:05'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case73" value="SELECT '08:00:2b:01.02:03:04:05'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case75" value="SELECT '08:00:2b:01:02:03  123'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case77" value="SELECT '08:00:2b:01:02:03:04:05  123'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case78" value="SELECT '08:00:2b:01:02:03:04:05:06:07'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case79" value="SELECT '0z002b0102030405'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case81" value="SELECT '1 '::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case83" value="SELECT '1&amp;!2'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case85" value="SELECT '1&amp;(2&amp;(4&amp;(5|!6)))'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case87" value="SELECT '1&amp;(2)'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case89" value="SELECT '1&amp;2'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case91" value="SELECT '1'::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case92" value="SELECT '123    08:00:2b:01:02:03'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case93" value="SELECT '123    08:00:2b:01:02:03:04:05'::macaddr8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case95" value="SELECT '12345678901234567'::money::numeric;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case97" value="SELECT '123456789012345678'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case99" value="SELECT '127.0.0.1'::inet + 10000000000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case101" value="SELECT '127.0.0.1'::inet - 10000000000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case103" value="SELECT '127.0.0.2'::inet  - ('127.0.0.2'::inet - 500);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case105" value="SELECT '127::1'::inet + 257;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case107" value="SELECT '127::1'::inet - '127::2'::inet;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case109" value="SELECT '127::2'::inet  - ('127::2'::inet - 500);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case111" value="SELECT '1|!2'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case113" value="SELECT '1|(2|(4|(5|6)))'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case115" value="SELECT '1|2&amp;3'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case117" value="SELECT '1|2|4|5|6'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case119" value="SELECT '878.08'::money / 11::float4;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case121" value="SELECT '878.08'::money / 11::int;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case123" value="SELECT '90000000000000099.00'::money / 10::bigint;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case125" value="SELECT '90000000000000099.00'::money / 10::smallint;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case127" value="SELECT '92233720368547758.07'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case129" value="SELECT '92233720368547758.08'::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case131" value="SELECT 'TrUe'::text::boolean AS true, 'fAlse'::text::boolean AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case133" value="SELECT 'a &amp; g' &lt;-&gt; 'b &amp; d'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case135" value="SELECT 'a &amp; g' &lt;-&gt; 'b | d'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case137" value="SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC &amp; c:*C' as &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case139" value="SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC &amp; ca' as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case141" value="SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC &amp; ca:B' as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case143" value="SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC &amp; ca:CB' as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case145" value="SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC &amp; c:*C' as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case147" value="SELECT 'a | f' &lt; 'b &amp; c'::tsquery as &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case149" value="SELECT 'a' &lt; 'b &amp; c'::tsquery as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case151" value="SELECT 'a' &gt; 'b &amp; c'::tsquery as &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case153" value="SELECT 'a:1 b:2'::tsvector @@ 'a &lt;-&gt; b'::tsquery AS &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case155" value="SELECT 'a:1 b:2'::tsvector @@ 'a &lt;1&gt; b'::tsquery AS &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case157" value="SELECT 'a:1 b:3'::tsvector @@ 'a &lt;-&gt; b'::tsquery AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case159" value="SELECT 'a:1 b:3'::tsvector @@ 'a &lt;0&gt; b'::tsquery AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case161" value="SELECT 'a:1 b:3'::tsvector @@ 'a &lt;2&gt; b'::tsquery AS &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case163" value="SELECT 'a:3A b:2a'::tsvector || 'ba:1234 a:1B';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case165" value="SELECT 'a_c'::bytea NOT LIKE 'a$__'::bytea ESCAPE '$'::bytea AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case167" value="SELECT 'abc'::bytea NOT LIKE '_b_'::bytea AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case169" value="SELECT 'abcd\efg' SIMILAR TO '_bcd\%' ESCAPE '' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case171" value="SELECT 'abcdefg' SIMILAR TO '_bcd%' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case173" value="SELECT 'abcdefg' SIMILAR TO '_bcd\%' AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case175" value="SELECT 'aⓐ' ~ U&amp;'a\24D0' AS t;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case176" value="SELECT 'aⓐ' ~ U&amp;'a\24D1' AS f;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case178" value="SELECT 'empty'::numrange &amp;&amp; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case180" value="SELECT 'empty'::numrange &amp;&lt; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case182" value="SELECT 'empty'::numrange &amp;&gt; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case184" value="SELECT 'empty'::numrange -|- nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case186" value="SELECT 'foo &amp; bar'::tsquery &amp;&amp; 'asd | fg';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case188" value="SELECT 'foo &amp; bar'::tsquery || !!'asd &amp; fg'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case190" value="SELECT 'supeanova supernova'::tsvector @@ 'super'::tsquery AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case192" value="SELECT 'supernova'::tsvector @@ 'super'::tsquery AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case194" value="SELECT 'supeznova supernova'::tsvector @@ 'super'::tsquery AS &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case196" value="SELECT 'wa:1A wb:2D'::tsvector @@ 'w:*D &lt;-&gt; w:*A'::tsquery as &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case198" value="SELECT 'wa:1A'::tsvector @@ '!w:*D'::tsquery as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case200" value="SELECT 'wa:1A'::tsvector @@ 'w:*D'::tsquery as &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case202" value="SELECT 'wa:1D wb:2A'::tsvector @@ 'w:*D &lt;-&gt; w:*A'::tsquery as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case204" value="SELECT ('127::1'::inet + 257) - 257;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case209" value="SELECT (-1234567890)::int4::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case211" value="SELECT (-12345678901234567)::int8::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case213" value="SELECT (-12345678901234567)::numeric::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case219" value="SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET g.i) FROM generate_series(0,3) g(i);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case221" value="SELECT *    FROM arrtest    WHERE a[1] &lt; 5 and          c = '{&quot;foobar&quot;}'::_name;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case222" value="SELECT * FROM (J1_TBL JOIN J2_TBL USING (i) AS x) AS xx WHERE x.i = 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case224" value="SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(10+r,13), rngfunc_mat(10+r,13) );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case226" value="SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(11,11), rngfunc_mat(10+r,13) );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case234" value="SELECT * FROM ROWS FROM(get_users(), generate_series(10,11)) WITH ORDINALITY;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case246" value="SELECT * FROM fast_emp4000     WHERE home_base &lt;@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0];" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case247" value="SELECT * FROM fast_emp4000     WHERE home_base &lt;@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0];" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case248" value="SELECT * FROM fast_emp4000     WHERE home_base &lt;@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0];" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case252" value="SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr &gt;&gt; i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case254" value="SELECT * FROM inet_tbl WHERE i &amp;&amp; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case256" value="SELECT * FROM inet_tbl WHERE i &lt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case258" value="SELECT * FROM inet_tbl WHERE i &lt;&lt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case260" value="SELECT * FROM inet_tbl WHERE i &lt;&lt;= '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case262" value="SELECT * FROM inet_tbl WHERE i &lt;= '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case264" value="SELECT * FROM inet_tbl WHERE i &lt;&gt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case266" value="SELECT * FROM inet_tbl WHERE i = '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case268" value="SELECT * FROM inet_tbl WHERE i &gt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case270" value="SELECT * FROM inet_tbl WHERE i &gt;= '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case272" value="SELECT * FROM inet_tbl WHERE i &gt;&gt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case274" value="SELECT * FROM inet_tbl WHERE i &gt;&gt;= '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case276" value="SELECT * FROM inet_tbl WHERE i&lt;&lt;'192.168.1.0/24'::cidr;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case278" value="SELECT * FROM nummultirange_test WHERE multirange_contains_range(nmr, numrange(4.0, 4.2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case280" value="SELECT * FROM nummultirange_test WHERE multirange_overlaps_range(nmr, numrange(4.0, 4.2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case282" value="SELECT * FROM nummultirange_test WHERE nmr &amp;&amp; nummultirange(numrange(6.0, 7.0));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case284" value="SELECT * FROM nummultirange_test WHERE nmr &amp;&amp; numrange(4.0, 4.2);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case286" value="SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) &lt;@ nmr;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case288" value="SELECT * FROM nummultirange_test WHERE range_overlaps_multirange(numrange(4.0, 4.2), nmr);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case290" value="SELECT * FROM numrange_test WHERE range_contains(nr, numrange(1.9,1.91));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case301" value="SELECT * FROM unnest('base hidden rebel spaceship strike'::tsvector);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case303" value="SELECT 1 LIMIT generate_series(1,3);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case305" value="SELECT 1 UNION;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case307" value="SELECT 12345678901234567::int8::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case309" value="SELECT 12345678901234567::numeric::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case311" value="SELECT 1234567890::money;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case312" value="SELECT 2 !=-- comment to be removed by psql   1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case313" value="SELECT 2 \r SELECT 3 \p UNION SELECT 4 \p UNION SELECT 5 ORDER BY 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case321" value="SELECT DATE_TRUNC('CENTURY', DATE '0002-02-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case322" value="SELECT DATE_TRUNC('CENTURY', DATE '0055-08-10 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case323" value="SELECT DATE_TRUNC('CENTURY', DATE '1970-03-20');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case324" value="SELECT DATE_TRUNC('CENTURY', DATE '2004-08-10');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case326" value="SELECT DATE_TRUNC('DECADE', DATE '0002-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case327" value="SELECT DATE_TRUNC('DECADE', DATE '0004-12-25');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case328" value="SELECT DATE_TRUNC('DECADE', DATE '1993-12-25');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case329" value="SELECT DATE_TRUNC('MILLENNIUM', DATE '1970-03-20');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case331" value="SELECT DISTINCT p1.proargtypes[0]::regtype, p2.proargtypes[0]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     p1.prosrc NOT LIKE E'range\\_constructor_' AND     p2.prosrc NOT LIKE E'range\\_constructor_' AND     p1.prosrc NOT LIKE E'multirange\\_constructor_' AND     p2.prosrc NOT LIKE E'multirange\\_constructor_' AND     (p1.proargtypes[0] &lt; p2.proargtypes[0]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case332" value="SELECT DISTINCT p1.proargtypes[1]::regtype, p2.proargtypes[1]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     p1.prosrc NOT LIKE E'range\\_constructor_' AND     p2.prosrc NOT LIKE E'range\\_constructor_' AND     p1.prosrc NOT LIKE E'multirange\\_constructor_' AND     p2.prosrc NOT LIKE E'multirange\\_constructor_' AND     (p1.proargtypes[1] &lt; p2.proargtypes[1]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case333" value="SELECT DISTINCT p1.proargtypes[2]::regtype, p2.proargtypes[2]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[2] &lt; p2.proargtypes[2]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case334" value="SELECT DISTINCT p1.proargtypes[3]::regtype, p2.proargtypes[3]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[3] &lt; p2.proargtypes[3]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case335" value="SELECT DISTINCT p1.proargtypes[4]::regtype, p2.proargtypes[4]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[4] &lt; p2.proargtypes[4]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case336" value="SELECT DISTINCT p1.proargtypes[5]::regtype, p2.proargtypes[5]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[5] &lt; p2.proargtypes[5]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case337" value="SELECT DISTINCT p1.proargtypes[6]::regtype, p2.proargtypes[6]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[6] &lt; p2.proargtypes[6]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case338" value="SELECT DISTINCT p1.proargtypes[7]::regtype, p2.proargtypes[7]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[7] &lt; p2.proargtypes[7]) ORDER BY 1, 2;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case340" value="SELECT E'''1 \\''2'' 3'::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case342" value="SELECT E'''1 \\''2'''::tsvector;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case344" value="SELECT E'1&amp;(''2''&amp;('' 4''&amp;(\\|5 | ''6 \\'' !|&amp;'')))'::tsquery;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case346" value="SELECT E'DeAdBeEf'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case348" value="SELECT E'De\\000dBeEf'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case350" value="SELECT E'De\\123dBeEf'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case352" value="SELECT E'De\\678dBeEf'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case354" value="SELECT E'\\x De Ad Be Ef '::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case356" value="SELECT E'\\xDe00BeEf'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case358" value="SELECT E'\\xDeAdBeEf'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case360" value="SELECT E'\\xDeAdBeEx'::bytea;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case362" value="SELECT EXTRACT(CENTURY    FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case363" value="SELECT EXTRACT(CENTURY FROM CURRENT_DATE)&gt;=21 AS True;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case364" value="SELECT EXTRACT(CENTURY FROM DATE '0001-01-01 AD');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case365" value="SELECT EXTRACT(CENTURY FROM DATE '0001-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case366" value="SELECT EXTRACT(CENTURY FROM DATE '0001-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case367" value="SELECT EXTRACT(CENTURY FROM DATE '0100-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case368" value="SELECT EXTRACT(CENTURY FROM DATE '0101-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case369" value="SELECT EXTRACT(CENTURY FROM DATE '1900-12-31');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case370" value="SELECT EXTRACT(CENTURY FROM DATE '1901-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case371" value="SELECT EXTRACT(CENTURY FROM DATE '2000-12-31');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case372" value="SELECT EXTRACT(CENTURY FROM DATE '2001-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case378" value="SELECT EXTRACT(DAY           FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case380" value="SELECT EXTRACT(DAY         FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case381" value="SELECT EXTRACT(DAY FROM DATE '-infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case382" value="SELECT EXTRACT(DAY FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case384" value="SELECT EXTRACT(DECADE     FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case385" value="SELECT EXTRACT(DECADE FROM DATE '0001-01-01 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case386" value="SELECT EXTRACT(DECADE FROM DATE '0002-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case387" value="SELECT EXTRACT(DECADE FROM DATE '0009-12-31');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case388" value="SELECT EXTRACT(DECADE FROM DATE '0010-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case389" value="SELECT EXTRACT(DECADE FROM DATE '0011-01-01 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case390" value="SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case391" value="SELECT EXTRACT(DECADE FROM DATE '1994-12-25');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case397" value="SELECT EXTRACT(DOW           FROM DATE '2020-08-16');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case398" value="SELECT EXTRACT(DOW           FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case400" value="SELECT EXTRACT(DOY           FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case403" value="SELECT EXTRACT(EPOCH       FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case404" value="SELECT EXTRACT(EPOCH      FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case405" value="SELECT EXTRACT(EPOCH FROM DATE        '1970-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case406" value="SELECT EXTRACT(EPOCH FROM DATE '-infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case407" value="SELECT EXTRACT(EPOCH FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case409" value="SELECT EXTRACT(FORTNIGHT   FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case413" value="SELECT EXTRACT(HOUR        FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case415" value="SELECT EXTRACT(ISODOW        FROM DATE '2020-08-16');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case416" value="SELECT EXTRACT(ISODOW        FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case418" value="SELECT EXTRACT(ISOYEAR       FROM DATE '2020-08-11');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case419" value="SELECT EXTRACT(ISOYEAR    FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case421" value="SELECT EXTRACT(JULIAN     FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case422" value="SELECT EXTRACT(MICROSEC  FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case424" value="SELECT EXTRACT(MICROSECOND FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case426" value="SELECT EXTRACT(MILLENNIUM    FROM DATE '2020-08-11');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case427" value="SELECT EXTRACT(MILLENNIUM FROM DATE '0001-01-01 AD');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case428" value="SELECT EXTRACT(MILLENNIUM FROM DATE '0001-12-31 BC');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case429" value="SELECT EXTRACT(MILLENNIUM FROM DATE '1000-12-31');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case430" value="SELECT EXTRACT(MILLENNIUM FROM DATE '1001-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case431" value="SELECT EXTRACT(MILLENNIUM FROM DATE '2000-12-31');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case432" value="SELECT EXTRACT(MILLENNIUM FROM DATE '2001-01-01');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case433" value="SELECT EXTRACT(MILLENNIUM FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case436" value="SELECT EXTRACT(MILLISECONDS  FROM DATE '2020-08-11');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case439" value="SELECT EXTRACT(MINUTE      FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case441" value="SELECT EXTRACT(MONTH         FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case443" value="SELECT EXTRACT(QUARTER       FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case446" value="SELECT EXTRACT(SECOND      FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case449" value="SELECT EXTRACT(TIMEZONE    FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case452" value="SELECT EXTRACT(TIMEZONE_HOUR   FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case454" value="SELECT EXTRACT(TIMEZONE_MINUTE FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case456" value="SELECT EXTRACT(WEEK          FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case458" value="SELECT EXTRACT(YEAR          FROM DATE '2020-08-11');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case459" value="SELECT EXTRACT(YEAR       FROM DATE 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case461" value="SELECT POSITION(B'' IN B'00001010');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case462" value="SELECT POSITION(B'0' IN B'');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case463" value="SELECT POSITION(B'0000000000011101011111010110' IN B'000000000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case464" value="SELECT POSITION(B'000000000011101011111010110' IN B'000000000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case465" value="SELECT POSITION(B'00000000011101011111010110' IN B'000000000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case466" value="SELECT POSITION(B'1010' IN B'00000101');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case467" value="SELECT POSITION(B'1010' IN B'000001010');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case468" value="SELECT POSITION(B'1010' IN B'0000101');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case469" value="SELECT POSITION(B'1010' IN B'00001010');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case470" value="SELECT POSITION(B'101101' IN B'001011011011011000');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case471" value="SELECT POSITION(B'10110110' IN B'001011011011010');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case472" value="SELECT POSITION(B'1011011011011' IN B'00001011011011011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case473" value="SELECT POSITION(B'1011011011011' IN B'001011011011011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case474" value="SELECT POSITION(B'1101' IN b),        POSITION(B'11011' IN b),        b        FROM BIT_SHIFT_TABLE ;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case475" value="SELECT POSITION(B'1101' IN v),        POSITION(B'11011' IN v),        v        FROM VARBIT_SHIFT_TABLE ;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case476" value="SELECT POSITION(B'11101011' IN B'0000011101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case477" value="SELECT POSITION(B'11101011' IN B'00011101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case478" value="SELECT POSITION(B'11101011' IN B'011101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case479" value="SELECT POSITION(B'11101011' IN B'11101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case480" value="SELECT POSITION(B'111010110' IN B'00000000001110101111101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case481" value="SELECT POSITION(B'111010110' IN B'000000000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case482" value="SELECT POSITION(B'111010110' IN B'000000001110101111101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case483" value="SELECT POSITION(B'111010110' IN B'0000000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case484" value="SELECT POSITION(B'111010110' IN B'0000001110101111101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case485" value="SELECT POSITION(B'111010110' IN B'00000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case486" value="SELECT POSITION(B'111010110' IN B'0000011101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case487" value="SELECT POSITION(B'111010110' IN B'00000111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case488" value="SELECT POSITION(B'111010110' IN B'00000111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case489" value="SELECT POSITION(B'111010110' IN B'000001110101111101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case490" value="SELECT POSITION(B'111010110' IN B'0000011101011111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case491" value="SELECT POSITION(B'111010110' IN B'00011101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case492" value="SELECT POSITION(B'111010110' IN B'000111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case493" value="SELECT POSITION(B'111010110' IN B'000111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case494" value="SELECT POSITION(B'111010110' IN B'011101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case495" value="SELECT POSITION(B'111010110' IN B'0111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case496" value="SELECT POSITION(B'111010110' IN B'0111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case497" value="SELECT POSITION(B'111010110' IN B'11101011');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case498" value="SELECT POSITION(B'111010110' IN B'111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case499" value="SELECT POSITION(B'111010110' IN B'111010110');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case501" value="SELECT SUBSTRING('01010101'::varbit FROM -10 FOR -2147483646) AS &quot;error&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case503" value="SELECT SUBSTRING('01010101'::varbit FROM 2 FOR 2147483646) AS &quot;1010101&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case505" value="SELECT SUBSTRING('1234567890'::bytea FROM 4 FOR 3) AS &quot;456&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case507" value="SELECT SUBSTRING('abcdefg' SIMILAR '%' ESCAPE NULL) IS NULL AS &quot;True&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case509" value="SELECT SUBSTRING('abcdefg' SIMILAR 'a#&quot;%#&quot;x|g' ESCAPE '#') AS &quot;bcdef&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case511" value="SELECT SUBSTRING('abcdefg' SIMILAR 'a#&quot;%|ab#&quot;g' ESCAPE '#') AS &quot;bcdef&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case513" value="SELECT SUBSTRING('abcdefg' SIMILAR 'a%g' ESCAPE '#') AS &quot;abcdefg&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case515" value="SELECT SUBSTRING('abcdefg' SIMILAR 'a*#&quot;%#&quot;g*' ESCAPE '#') AS &quot;abcdefg&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case517" value="SELECT SUBSTRING('abcdefg' SIMILAR NULL ESCAPE '#') IS NULL AS &quot;True&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case519" value="SELECT SUBSTRING('string'::bytea FROM -10 FOR 2147483646) AS &quot;string&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case521" value="SELECT SUBSTRING(NULL SIMILAR '%' ESCAPE '#') IS NULL AS &quot;True&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case523" value="SELECT U&amp;' \' UESCAPE '!' AS &quot;tricky&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case525" value="SELECT U&amp;'\00E4\24D1c' IS NORMALIZED AS test_default;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case527" value="SELECT U&amp;'d!0061t\+000061' UESCAPE '!' AS U&amp;&quot;d*0061t\+000061&quot; UESCAPE '*';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case529" value="SELECT U&amp;'d\0061t\+000061' AS U&amp;&quot;d\0061t\+000061&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case531" value="SELECT U&amp;'wrong: +0061' UESCAPE '+';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case533" value="SELECT U&amp;'wrong: +0061' UESCAPE +;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case535" value="SELECT U&amp;'wrong: \+0061';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case537" value="SELECT U&amp;'wrong: \+2FFFFF';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case539" value="SELECT U&amp;'wrong: \061';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case541" value="SELECT U&amp;'wrong: \db99\0061';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case543" value="SELECT U&amp;'wrong: \db99xy';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case544" value="SELECT a FROM (VALUES   ('0.0.0.0/0'::inet),   ('0.0.0.0/1'::inet),   ('0.0.0.0/32'::inet),   ('0.0.0.1/0'::inet),   ('0.0.0.1/1'::inet),   ('127.126.127.127/0'::inet),   ('127.127.127.127/0'::inet),   ('127.128.127.127/0'::inet),   ('192.168.1.0/24'::inet),   ('192.168.1.0/25'::inet),   ('192.168.1.1/23'::inet),   ('192.168.1.1/5'::inet),   ('192.168.1.1/6'::inet),   ('192.168.1.1/25'::inet),   ('192.168.1.2/25'::inet),   ('192.168.1.1/26'::inet),   ('192.168.1.2/26'::inet),   ('192.168.1.2/23'::inet),   ('192.168.1.255/5'::inet),   ('192.168.1.255/6'::inet),   ('192.168.1.3/1'::inet),   ('192.168.1.3/23'::inet),   ('192.168.1.4/0'::inet),   ('192.168.1.5/0'::inet),   ('255.0.0.0/0'::inet),   ('255.1.0.0/0'::inet),   ('255.2.0.0/0'::inet),   ('255.255.000.000/0'::inet),   ('255.255.000.000/0'::inet),   ('255.255.000.000/15'::inet),   ('255.255.000.000/16'::inet),   ('255.255.255.254/32'::inet),   ('255.255.255.000/32'::inet),   ('255.255.255.001/31'::inet),   ('255.255.255.002/31'::inet),   ('255.255.255.003/31'::inet),   ('255.255.255.003/32'::inet),   ('255.255.255.001/32'::inet),   ('255.255.255.255/0'::inet),   ('255.255.255.255/0'::inet),   ('255.255.255.255/0'::inet),   ('255.255.255.255/1'::inet),   ('255.255.255.255/16'::inet),   ('255.255.255.255/16'::inet),   ('255.255.255.255/31'::inet),   ('255.255.255.255/32'::inet),   ('255.255.255.253/32'::inet),   ('255.255.255.252/32'::inet),   ('255.3.0.0/0'::inet),   ('0000:0000:0000:0000:0000:0000:0000:0000/0'::inet),   ('0000:0000:0000:0000:0000:0000:0000:0000/128'::inet),   ('0000:0000:0000:0000:0000:0000:0000:0001/128'::inet),   ('10:23::f1/64'::inet),   ('10:23::f1/65'::inet),   ('10:23::ffff'::inet),   ('127::1'::inet),   ('127::2'::inet),   ('8000:0000:0000:0000:0000:0000:0000:0000/1'::inet),   ('::1:ffff:ffff:ffff:ffff/128'::inet),   ('::2:ffff:ffff:ffff:ffff/128'::inet),   ('::4:3:2:0/24'::inet),   ('::4:3:2:1/24'::inet),   ('::4:3:2:2/24'::inet),   ('ffff:83e7:f118:57dc:6093:6d92:689d:58cf/70'::inet),   ('ffff:84b0:4775:536e:c3ed:7116:a6d6:34f0/44'::inet),   ('ffff:8566:f84:5867:47f1:7867:d2ba:8a1a/69'::inet),   ('ffff:8883:f028:7d2:4d68:d510:7d6b:ac43/73'::inet),   ('ffff:8ae8:7c14:65b3:196:8e4a:89ae:fb30/89'::inet),   ('ffff:8dd0:646:694c:7c16:7e35:6a26:171/104'::inet),   ('ffff:8eef:cbf:700:eda3:ae32:f4b4:318b/121'::inet),   ('ffff:90e7:e744:664:a93:8efe:1f25:7663/122'::inet),   ('ffff:9597:c69c:8b24:57a:8639:ec78:6026/111'::inet),   ('ffff:9e86:79ea:f16e:df31:8e4d:7783:532e/88'::inet),   ('ffff:a0c7:82d3:24de:f762:6e1f:316d:3fb2/23'::inet),   ('ffff:fffa:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffb:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffc:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffd:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffe:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffa:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffb:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffc:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffd::/128'::inet),   ('ffff:ffff:ffff:fffd:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffe::/128'::inet),   ('ffff:ffff:ffff:fffe:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:ffff:4:3:2:0/24'::inet),   ('ffff:ffff:ffff:ffff:4:3:2:1/24'::inet),   ('ffff:ffff:ffff:ffff:4:3:2:2/24'::inet),   ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128'::inet) ) AS i(a) ORDER BY a;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case546" value="SELECT a, b, gcd(a, b), gcd(a, -b), gcd(-b, a), gcd(-b, -a) FROM (VALUES (0::numeric, 0::numeric),              (0::numeric, numeric 'NaN'),              (0::numeric, 46375::numeric),              (433125::numeric, 46375::numeric),              (43312.5::numeric, 4637.5::numeric),              (4331.250::numeric, 463.75000::numeric),              ('inf', '0'),              ('inf', '42'),              ('inf', 'inf')      ) AS v(a, b);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case549" value="SELECT a,b, lcm(a, b), lcm(a, -b), lcm(-b, a), lcm(-b, -a) FROM (VALUES (0::numeric, 0::numeric),              (0::numeric, numeric 'NaN'),              (0::numeric, 13272::numeric),              (13272::numeric, 13272::numeric),              (423282::numeric, 13272::numeric),              (42328.2::numeric, 1327.2::numeric),              (4232.820::numeric, 132.72000::numeric),              ('inf', '0'),              ('inf', '42'),              ('inf', 'inf')      ) AS v(a, b);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case550" value="SELECT a.aggfnoid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggcombinefn = p.oid AND     (p.pronargs != 2 OR      p.prorettype != p.proargtypes[0] OR      p.prorettype != p.proargtypes[1] OR      NOT binary_coercible(a.aggtranstype, p.proargtypes[0]));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case551" value="SELECT a.aggfnoid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggdeserialfn = p.oid AND     (p.prorettype != 'internal'::regtype OR p.pronargs != 2 OR      p.proargtypes[0] != 'bytea'::regtype OR      p.proargtypes[1] != 'internal'::regtype OR      NOT p.proisstrict);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case552" value="SELECT a.aggfnoid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggserialfn = p.oid AND     (p.prorettype != 'bytea'::regtype OR p.pronargs != 1 OR      p.proargtypes[0] != 'internal'::regtype OR      NOT p.proisstrict);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case553" value="SELECT a.aggfnoid::oid, o.oid FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND     (oprkind != 'b' OR oprresult != 'boolean'::regtype      OR oprleft != p.proargtypes[0] OR oprright != p.proargtypes[0]);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case554" value="SELECT a.aggfnoid::oid, p.proname, pfn.oid, pfn.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS pfn WHERE a.aggfnoid = p.oid AND     a.aggfinalfn = pfn.oid AND     (pfn.proretset OR      NOT binary_coercible(pfn.prorettype, p.prorettype) OR      NOT binary_coercible(a.aggtranstype, pfn.proargtypes[0]) OR      CASE WHEN a.aggfinalextra THEN pfn.pronargs != p.pronargs + 1           ELSE pfn.pronargs != a.aggnumdirectargs + 1 END      OR (pfn.pronargs &gt; 1 AND          NOT binary_coercible(p.proargtypes[0], pfn.proargtypes[1]))      OR (pfn.pronargs &gt; 2 AND          NOT binary_coercible(p.proargtypes[1], pfn.proargtypes[2]))      OR (pfn.pronargs &gt; 3 AND          NOT binary_coercible(p.proargtypes[2], pfn.proargtypes[3]))      OR (pfn.pronargs &gt; 4)     );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case555" value="SELECT a.aggfnoid::oid, p.proname, pfn.oid, pfn.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS pfn WHERE a.aggfnoid = p.oid AND     a.aggmfinalfn = pfn.oid AND     (pfn.proretset OR      NOT binary_coercible(pfn.prorettype, p.prorettype) OR      NOT binary_coercible(a.aggmtranstype, pfn.proargtypes[0]) OR      CASE WHEN a.aggmfinalextra THEN pfn.pronargs != p.pronargs + 1           ELSE pfn.pronargs != a.aggnumdirectargs + 1 END      OR (pfn.pronargs &gt; 1 AND          NOT binary_coercible(p.proargtypes[0], pfn.proargtypes[1]))      OR (pfn.pronargs &gt; 2 AND          NOT binary_coercible(p.proargtypes[1], pfn.proargtypes[2]))      OR (pfn.pronargs &gt; 3 AND          NOT binary_coercible(p.proargtypes[2], pfn.proargtypes[3]))      OR (pfn.pronargs &gt; 4)     );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case556" value="SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr WHERE a.aggfnoid = p.oid AND     a.aggminvtransfn = ptr.oid AND     (ptr.proretset      OR NOT (ptr.pronargs =              CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1              ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)      OR NOT binary_coercible(ptr.prorettype, a.aggmtranstype)      OR NOT binary_coercible(a.aggmtranstype, ptr.proargtypes[0])      OR (p.pronargs &gt; 0 AND          NOT binary_coercible(p.proargtypes[0], ptr.proargtypes[1]))      OR (p.pronargs &gt; 1 AND          NOT binary_coercible(p.proargtypes[1], ptr.proargtypes[2]))      OR (p.pronargs &gt; 2 AND          NOT binary_coercible(p.proargtypes[2], ptr.proargtypes[3]))      OR (p.pronargs &gt; 3)     );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case557" value="SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr WHERE a.aggfnoid = p.oid AND     a.aggmtransfn = ptr.oid AND     (ptr.proretset      OR NOT (ptr.pronargs =              CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1              ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)      OR NOT binary_coercible(ptr.prorettype, a.aggmtranstype)      OR NOT binary_coercible(a.aggmtranstype, ptr.proargtypes[0])      OR (p.pronargs &gt; 0 AND          NOT binary_coercible(p.proargtypes[0], ptr.proargtypes[1]))      OR (p.pronargs &gt; 1 AND          NOT binary_coercible(p.proargtypes[1], ptr.proargtypes[2]))      OR (p.pronargs &gt; 2 AND          NOT binary_coercible(p.proargtypes[2], ptr.proargtypes[3]))      OR (p.pronargs &gt; 3)     );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case558" value="SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr WHERE a.aggfnoid = p.oid AND     a.aggmtransfn = ptr.oid AND ptr.proisstrict AND     a.aggminitval IS NULL AND     NOT binary_coercible(p.proargtypes[0], a.aggmtranstype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case559" value="SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr WHERE a.aggfnoid = p.oid AND     a.aggtransfn = ptr.oid AND     (ptr.proretset      OR NOT (ptr.pronargs =              CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1              ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)      OR NOT binary_coercible(ptr.prorettype, a.aggtranstype)      OR NOT binary_coercible(a.aggtranstype, ptr.proargtypes[0])      OR (p.pronargs &gt; 0 AND          NOT binary_coercible(p.proargtypes[0], ptr.proargtypes[1]))      OR (p.pronargs &gt; 1 AND          NOT binary_coercible(p.proargtypes[1], ptr.proargtypes[2]))      OR (p.pronargs &gt; 2 AND          NOT binary_coercible(p.proargtypes[2], ptr.proargtypes[3]))      OR (p.pronargs &gt; 3)     );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case560" value="SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr WHERE a.aggfnoid = p.oid AND     a.aggtransfn = ptr.oid AND ptr.proisstrict AND     a.agginitval IS NULL AND     NOT binary_coercible(p.proargtypes[0], a.aggtranstype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case561" value="SELECT a[1:3],           b[1:1][1:2][1:2],           c[1:2],           d[1:1][1:2]    FROM arrtest;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case562" value="SELECT a[1:3],           b[1:1][1:2][1:2],           c[1:2],           d[1:1][2:2]    FROM arrtest;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case563" value="SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]    FROM arrtest;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case565" value="SELECT a[:3], b[:2][:2] FROM arrtest_s;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case567" value="SELECT abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_decreasing NULLS FIRST OFFSET 20000 - 4;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case569" value="SELECT acosh(float8 '-infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case571" value="SELECT acosh(float8 'nan');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case572" value="SELECT arrtest.a[1],           arrtest.b[1][1][1],           arrtest.c[1],           arrtest.d[1][1],           arrtest.e[0]    FROM arrtest;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case574" value="SELECT asinh(float8 '1');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case576" value="SELECT asinh(float8 'nan');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case578" value="SELECT atanh(float8 '0.5');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case580" value="SELECT atanh(float8 'nan');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case592" value="SELECT b.f1, p.f1, b.f1 * p.f1 FROM BOX_TBL b, POINT_TBL p WHERE p.f1[0] BETWEEN 1 AND 1000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case602" value="SELECT b::macaddr &lt;= '08:00:2b:01:02:04' FROM macaddr8_data WHERE a = 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case603" value="SELECT b::macaddr &lt;&gt; '08:00:2b:01:02:03'::macaddr FROM macaddr8_data WHERE a = 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case604" value="SELECT b::macaddr &lt;&gt; '08:00:2b:01:02:04'::macaddr FROM macaddr8_data WHERE a = 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case605" value="SELECT b::macaddr &gt;= '08:00:2b:01:02:04' FROM macaddr8_data WHERE a = 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case606" value="SELECT b[1:1][2][2],        d[1:1][2]    FROM arrtest;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case608" value="SELECT bit_count(B'0101011100'::bit(10));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case610" value="SELECT bool '   f           ' AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case612" value="SELECT bool '1' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case614" value="SELECT bool 'f' &lt;= bool 't' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case616" value="SELECT bool 'n' AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case618" value="SELECT bool 'of' AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case620" value="SELECT bool 'on' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case622" value="SELECT bool 't' = bool 'f' AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case624" value="SELECT bool 't' &gt;= bool 'f' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case626" value="SELECT bool 't' and bool 'f' AS false;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case628" value="SELECT bool 'true' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case630" value="SELECT bool 'yes' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case632" value="SELECT btrim(E'\\000trim\\000'::bytea, ''::bytea);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case634" value="SELECT c AS cidr, abbrev(c) FROM INET_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case635" value="SELECT c AS cidr, broadcast(c),   i AS inet, broadcast(i) FROM INET_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case636" value="SELECT c AS cidr, i AS inet FROM INET_TBL   WHERE c = i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case638" value="SELECT c AS cidr, masklen(c) AS &quot;masklen(cidr)&quot;,   i AS inet, masklen(i) AS &quot;masklen(inet)&quot; FROM INET_TBL   WHERE masklen(c) &lt;= 8;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case639" value="SELECT c AS cidr, masklen(c) AS &quot;masklen(cidr)&quot;,   i AS inet, masklen(i) AS &quot;masklen(inet)&quot; FROM INET_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case640" value="SELECT c AS cidr, network(c) AS &quot;network(cidr)&quot;,   i AS inet, network(i) AS &quot;network(inet)&quot; FROM INET_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case641" value="SELECT c.* FROM pg_cast c, pg_proc p WHERE c.castfunc = p.oid AND     ((p.pronargs &gt; 1 AND p.proargtypes[1] != 'int4'::regtype) OR      (p.pronargs &gt; 2 AND p.proargtypes[2] != 'bool'::regtype));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case642" value="SELECT c.* FROM pg_cast c, pg_proc p WHERE c.castfunc = p.oid AND     (p.pronargs &lt; 1 OR p.pronargs &gt; 3      OR NOT (binary_coercible(c.castsource, p.proargtypes[0])              OR (c.castsource = 'character'::regtype AND                  p.proargtypes[0] = 'text'::regtype))      OR NOT binary_coercible(p.prorettype, c.casttarget));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case645" value="SELECT c.f1, p.f1, c.f1 / p.f1 FROM CIRCLE_TBL c, POINT_TBL p WHERE p.f1[0] BETWEEN 1 AND 1000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case646" value="SELECT c0 FROM ONLY expr_stats_incompatible_test WHERE (   upper('x') LIKE ('x'||('[0,1]'::int4range))   AND   (c0 IN (0, 1) OR c1) );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case647" value="SELECT c1.f1 AS circle, p1.f1 AS point, (p1.f1 &lt;-&gt; c1.f1) AS distance    FROM CIRCLE_TBL c1, POINT_TBL p1    WHERE (p1.f1 &lt;-&gt; c1.f1) &gt; 0    ORDER BY distance, area(c1.f1), p1.f1[0];" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case666" value="SELECT cosh(float8 '1');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case668" value="SELECT cosh(float8 'nan');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case670" value="SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow EST';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case672" value="SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case674" value="SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case676" value="SELECT count(*) AS Three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case678" value="SELECT count(*) AS two FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case679" value="SELECT count(*) FROM dupindexcols   WHERE f1 BETWEEN 'WA' AND 'ZZZ' and id &lt; 1000 and f1 ~&lt;~ 'YX';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case751" value="SELECT count(*) FROM radix_text_tbl WHERE t ^@  'Worth';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case753" value="SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;=~ 'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case755" value="SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;=~ 'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case757" value="SELECT count(*) FROM radix_text_tbl WHERE t ~&lt;~  'Aztec                         Ct  ';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case759" value="SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;=~ 'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case761" value="SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;=~ 'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case763" value="SELECT count(*) FROM radix_text_tbl WHERE t ~&gt;~  'Worth                         St  ';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case765" value="SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 != timestamp with time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case766" value="SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 &lt; timestamp with time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case767" value="SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 &lt;= timestamp with time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case768" value="SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 = timestamp with time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case769" value="SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 &gt; timestamp with time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case770" value="SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 &gt;= timestamp with time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case771" value="SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 != timestamp without time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case772" value="SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 &lt; timestamp without time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case773" value="SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 &lt;= timestamp without time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case774" value="SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 = timestamp without time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case775" value="SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 &gt; timestamp without time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case776" value="SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 &gt;= timestamp without time zone '1997-01-02';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case777" value="SELECT d1 as &quot;timestamp&quot;,    date_part( 'isoyear', d1) AS isoyear, date_part( 'week', d1) AS week,    date_part( 'isodow', d1) AS isodow, date_part( 'dow', d1) AS dow,    date_part( 'doy', d1) AS doy    FROM TIMESTAMP_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case778" value="SELECT d1 as &quot;timestamp&quot;,    date_part( 'quarter', d1) AS quarter, date_part( 'msec', d1) AS msec,    date_part( 'usec', d1) AS usec    FROM TIMESTAMP_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case779" value="SELECT d1 as timestamptz,    date_part( 'isoyear', d1) AS isoyear, date_part( 'week', d1) AS week,    date_part( 'isodow', d1) AS isodow, date_part( 'dow', d1) AS dow,    date_part( 'doy', d1) AS doy    FROM TIMESTAMPTZ_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case780" value="SELECT d1 as timestamptz,    date_part( 'quarter', d1) AS quarter, date_part( 'msec', d1) AS msec,    date_part( 'usec', d1) AS usec    FROM TIMESTAMPTZ_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case784" value="SELECT date_bin('0 days'::interval, timestamp with time zone '1970-01-01 01:00:00+00' , timestamp with time zone '1970-01-01 00:00:00+00');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case789" value="SELECT date_bin('5 years'::interval,  timestamp with time zone '2020-02-01 01:01:01+00', timestamp with time zone '2001-01-01+00');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case793" value="SELECT date_part('microsecond', TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case797" value="SELECT date_part('second',      TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case800" value="SELECT date_trunc('day', timestamp with time zone '2001-02-16 20:38:40+00', 'Australia/Sydney') as sydney_trunc;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case801" value="SELECT date_trunc('day', timestamp with time zone '2001-02-16 20:38:40+00', 'GMT') as gmt_trunc;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case802" value="SELECT date_trunc('day', timestamp with time zone '2001-02-16 20:38:40+00', 'VET') as vet_trunc;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case803" value="SELECT decode(encode(('\x' || repeat('1234567890abcdef0001', 7))::bytea,                      'base64'), 'base64');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case805" value="SELECT dup(numrange(4,7));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case807" value="SELECT encode(overlay(E'Th\\000omas'::bytea placing E'Th\\001omas'::bytea from 2),'escape');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case809" value="SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 8),'escape');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case811" value="SELECT f.f1, @f.f1 AS abs_f1    FROM FLOAT8_TBL f;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case813" value="SELECT f.f1, |/f.f1 AS sqrt_f1    FROM FLOAT8_TBL f    WHERE f.f1 &gt; '0.0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case816" value="SELECT f1 + time with time zone '00:01' AS &quot;Illegal&quot; FROM TIMETZ_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case818" value="SELECT f1 as &quot;date&quot;,     date_part('year', f1) AS year,     date_part('month', f1) AS month,     date_part('day', f1) AS day,     date_part('quarter', f1) AS quarter,     date_part('decade', f1) AS decade,     date_part('century', f1) AS century,     date_part('millennium', f1) AS millennium,     date_part('isoyear', f1) AS isoyear,     date_part('week', f1) AS week,     date_part('dow', f1) AS dow,     date_part('isodow', f1) AS isodow,     date_part('doy', f1) AS doy,     date_part('julian', f1) AS julian,     date_part('epoch', f1) AS epoch     FROM date_tbl;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case819" value="SELECT f1,     EXTRACT(MICROSECOND FROM f1) AS MICROSECOND,     EXTRACT(MILLISECOND FROM f1) AS MILLISECOND,     EXTRACT(SECOND FROM f1) AS SECOND,     EXTRACT(MINUTE FROM f1) AS MINUTE,     EXTRACT(HOUR FROM f1) AS HOUR,     EXTRACT(DAY FROM f1) AS DAY,     EXTRACT(MONTH FROM f1) AS MONTH,     EXTRACT(QUARTER FROM f1) AS QUARTER,     EXTRACT(YEAR FROM f1) AS YEAR,     EXTRACT(DECADE FROM f1) AS DECADE,     EXTRACT(CENTURY FROM f1) AS CENTURY,     EXTRACT(MILLENNIUM FROM f1) AS MILLENNIUM,     EXTRACT(EPOCH FROM f1) AS EPOCH     FROM INTERVAL_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case820" value="SELECT f1,     date_part('microsecond', f1) AS microsecond,     date_part('millisecond', f1) AS millisecond,     date_part('second', f1) AS second,     date_part('epoch', f1) AS epoch     FROM INTERVAL_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case833" value="SELECT f1[0:] FROM POINT_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case835" value="SELECT f1[:] FROM POINT_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case839" value="SELECT get_bit('\x1234567890abcdef00'::bytea, 43);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case840" value="SELECT get_bit('\x1234567890abcdef00'::bytea, 99);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case842" value="SELECT get_byte('\x1234567890abcdef00'::bytea, 3);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case843" value="SELECT get_byte('\x1234567890abcdef00'::bytea, 99);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case844" value="SELECT has_function_privilege('regress_log_memory',   'pg_log_backend_memory_contexts(integer)', 'EXECUTE' GRANT EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer)   TO regress_log_memory;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case845" value="SELECT has_function_privilege('regress_log_memory',   'pg_log_backend_memory_contexts(integer)', 'EXECUTE' SET ROLE regress_log_memory;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case847" value="SELECT i FROM inet_tbl WHERE i &lt;&lt; '192.168.1.0/24'::cidr ORDER BY i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case851" value="SELECT i, ~i AS &quot;~i&quot; FROM inet_tbl;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case852" value="SELECT i,SUM(v::money) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,'1.10'),(2,'2.20'),(3,NULL),(4,NULL)) t(i,v);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case854" value="SELECT i.* FROM INT2_TBL i WHERE (i.f1 % int4 '2') = int2 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case856" value="SELECT i.* FROM INT2_TBL i WHERE i.f1 &lt; int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case858" value="SELECT i.* FROM INT2_TBL i WHERE i.f1 &lt;= int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case860" value="SELECT i.* FROM INT2_TBL i WHERE i.f1 &lt;&gt; int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case862" value="SELECT i.* FROM INT2_TBL i WHERE i.f1 = int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case864" value="SELECT i.* FROM INT2_TBL i WHERE i.f1 &gt; int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case866" value="SELECT i.* FROM INT2_TBL i WHERE i.f1 &gt;= int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case868" value="SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case870" value="SELECT i.* FROM INT4_TBL i WHERE i.f1 &lt; int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case872" value="SELECT i.* FROM INT4_TBL i WHERE i.f1 &lt;= int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case874" value="SELECT i.* FROM INT4_TBL i WHERE i.f1 &lt;&gt; int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case876" value="SELECT i.* FROM INT4_TBL i WHERE i.f1 = int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case878" value="SELECT i.* FROM INT4_TBL i WHERE i.f1 &gt; int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case880" value="SELECT i.* FROM INT4_TBL i WHERE i.f1 &gt;= int4 '0';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case881" value="SELECT i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i WHERE abs(f1) &lt; 16384;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case883" value="SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i WHERE abs(f1) &lt; 1073741824;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case885" value="SELECT i.f1, i.f1 * int4 '2' AS x FROM INT2_TBL i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case886" value="SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i WHERE abs(f1) &lt; 1073741824;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case888" value="SELECT i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i WHERE f1 &lt; 32766;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case890" value="SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i WHERE f1 &lt; 2147483646;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case892" value="SELECT i.f1, i.f1 + int4 '2' AS x FROM INT2_TBL i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case893" value="SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i WHERE f1 &lt; 2147483646;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case895" value="SELECT i.f1, i.f1 / int2 '2' AS x FROM INT2_TBL i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case897" value="SELECT i.f1, i.f1 / int4 '2' AS x FROM INT2_TBL i;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case899" value="SELECT jsonb_path_exists('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, {&quot;a&quot;: 3}, {&quot;a&quot;: 5}]', '$[*] ? (@.a &gt; $min &amp;&amp; @.a &lt; $max)', vars =&gt; '{&quot;min&quot;: 1, &quot;max&quot;: 4}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case901" value="SELECT jsonb_path_match('&quot;a&quot;', '$', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case903" value="SELECT jsonb_path_match('1', '$', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case905" value="SELECT jsonb_path_match('[true]', '$', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case907" value="SELECT jsonb_path_match('null', '$', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case909" value="SELECT jsonb_path_match('{}', '$', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case911" value="SELECT jsonb_path_match('{}', 'strict $.a', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case913" value="SELECT jsonb_path_query_array('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, {&quot;a&quot;: 3}, {&quot;a&quot;: 5}]', '$[*].a ? (@ &gt; $min &amp;&amp; @ &lt; $max)', vars =&gt; '{&quot;min&quot;: 1, &quot;max&quot;: 4}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case915" value="SELECT jsonb_path_query_first('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, {&quot;a&quot;: 3}, {&quot;a&quot;: 5}]', '$[*].a ? (@ &gt; $min &amp;&amp; @ &lt; $max)', vars =&gt; '{&quot;min&quot;: 1, &quot;max&quot;: 4}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case917" value="SELECT jsonb_path_query_first('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, {}]', 'strict $[*].a', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case933" value="SELECT lexeme, positions[1] from unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case935" value="SELECT macaddr8_set7bit('00:08:2b:01:02:03'::macaddr8);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case938" value="SELECT noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_increasing OFFSET 20000 - 4;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case940" value="SELECT normalize(U&amp;'\0061\0308\24D1c', NFC) = U&amp;'\00E4\24D1c' COLLATE &quot;C&quot; AS test_nfc;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case942" value="SELECT normalize(U&amp;'\00E4\24D1c', NFD) = U&amp;'\0061\0308\24D1c' COLLATE &quot;C&quot; AS test_nfd;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case944" value="SELECT normalize(U&amp;'\00E4bc', NFC) = U&amp;'\00E4bc' COLLATE &quot;C&quot; AS test_nfc_idem;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case947" value="SELECT num, val,     val IS NFC NORMALIZED AS NFC,     val IS NFD NORMALIZED AS NFD,     val IS NFKC NORMALIZED AS NFKC,     val IS NFKD NORMALIZED AS NFKD FROM   (VALUES (1, U&amp;'\00E4bc'),           (2, U&amp;'\0061\0308bc'),           (3, U&amp;'\00E4\24D1c'),           (4, U&amp;'\0061\0308\24D1c'),           (5, '')) vals (num, val) ORDER BY num;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case949" value="SELECT num_nulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case951" value="SELECT nummultirange() &amp;&amp; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case954" value="SELECT nummultirange() &amp;&lt; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case957" value="SELECT nummultirange() &amp;&gt; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case959" value="SELECT nummultirange() + nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case961" value="SELECT nummultirange() -|- 'empty'::numrange;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case963" value="SELECT nummultirange() @&gt; 'empty'::numrange;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case965" value="SELECT nummultirange(numrange(-4,-2), numrange(1,5)) @&gt; numrange(1,5);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case967" value="SELECT nummultirange(numrange(1,2)) &amp;&amp; nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case969" value="SELECT nummultirange(numrange(1,2)) &amp;&lt; nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case971" value="SELECT nummultirange(numrange(1,2)) &amp;&lt; numrange(3,4);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case973" value="SELECT nummultirange(numrange(1,2)) &amp;&gt; nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case975" value="SELECT nummultirange(numrange(1,2)) + nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case977" value="SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(2,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case979" value="SELECT nummultirange(numrange(1,2)) - nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case981" value="SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(2,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case983" value="SELECT nummultirange(numrange(1,2)) -|- 'empty'::numrange;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case985" value="SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(2,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case987" value="SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(3,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case989" value="SELECT nummultirange(numrange(1,2)) -|- numrange(3,4);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case991" value="SELECT nummultirange(numrange(1,2), numrange(3,4)) - nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case993" value="SELECT nummultirange(numrange(1,2), numrange(3.5,8)) &amp;&amp; numrange(3,4);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case995" value="SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(2,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case997" value="SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(-2,0));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case999" value="SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(0,9));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1001" value="SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(3,5));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1003" value="SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(3,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1005" value="SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(8,9));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1007" value="SELECT nummultirange(numrange(1,3), numrange(4,5)) - nummultirange(numrange(2,9));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1009" value="SELECT nummultirange(numrange(1,4)) &amp;&lt; numrange(3,4);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1011" value="SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(0,8));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1013" value="SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(2,3));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1015" value="SELECT nummultirange(numrange(1,5)) &lt;@ numrange(1,5);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1017" value="SELECT nummultirange(numrange(1,5)) @&gt; numrange(1,5);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1019" value="SELECT nummultirange(numrange(1,5)) @&gt; numrange(8,9);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1021" value="SELECT nummultirange(numrange(1,5), numrange(6,9)) &lt;@ numrange(1,9);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1023" value="SELECT nummultirange(numrange(1,5), numrange(8,9)) &lt;@ numrange(1,9);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1025" value="SELECT nummultirange(numrange(1,5), numrange(8,9)) @&gt; numrange(6,7);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1027" value="SELECT nummultirange(numrange(1,6)) &amp;&lt; numrange(3,4);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1029" value="SELECT nummultirange(numrange(1,8)) - nummultirange(numrange(2,3), numrange(5,null));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1031" value="SELECT nummultirange(numrange(3,4)) &amp;&amp; nummultirange(numrange(1,2), numrange(3.5,8));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1033" value="SELECT nummultirange(numrange(3,4)) &amp;&gt; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1035" value="SELECT nummultirange(numrange(3,4)) &amp;&gt; nummultirange(numrange(1,6));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1037" value="SELECT nummultirange(numrange(3,4)) &amp;&gt; nummultirange(numrange(6,7));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1039" value="SELECT nummultirange(numrange(3,4)) &amp;&gt; numrange(1,4);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1041" value="SELECT nummultirange(numrange(3,4)) &amp;&gt; numrange(3.5,6);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1043" value="SELECT nummultirange(numrange(3,9)) &lt;@ numrange(1,5);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1045" value="SELECT nummultirange(numrange(3.5,6)) &amp;&lt; nummultirange(numrange(3,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1047" value="SELECT nummultirange(numrange(5,null)) @&gt; numrange(3,null);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1049" value="SELECT nummultirange(numrange(6,7)) &amp;&lt; nummultirange(numrange(3,4));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1051" value="SELECT nummultirange(numrange(8,9)) &lt;@ numrange(1,5);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1053" value="SELECT nummultirange(numrange(null,2)) &lt;@ numrange(null,null);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1055" value="SELECT nummultirange(numrange(null,5)) @&gt; numrange(null,3);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1057" value="SELECT nummultirange(numrange(null,8)) &lt;@ numrange(null,5);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1059" value="SELECT nummultirange(numrange(null,null)) @&gt; numrange(2,null);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1061" value="SELECT numnode( 'new &amp; york | qwery'::tsquery );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1063" value="SELECT numnode( 'new'::tsquery );" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1064" value="SELECT oid::regprocedure, provariadic::regtype, proargtypes::regtype[] FROM pg_proc WHERE provariadic != 0 AND case proargtypes[array_length(proargtypes, 1)-1]  WHEN '&quot;any&quot;'::regtype THEN '&quot;any&quot;'::regtype  WHEN 'anyarray'::regtype THEN 'anyelement'::regtype  WHEN 'anycompatiblearray'::regtype THEN 'anycompatible'::regtype  ELSE (SELECT t.oid     FROM pg_type t     WHERE t.typarray = proargtypes[array_length(proargtypes, 1)-1])  END  != provariadic;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1066" value="SELECT overlay(B'0101011100' placing '001' from 20);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1081" value="SELECT p.f1, p1.f1, p.f1 / p1.f1 FROM PATH_TBL p, POINT_TBL p1 WHERE p1.f1[0] BETWEEN 1 AND 1000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1082" value="SELECT p.oid, p.proname, c.oid, c.conname FROM pg_proc p, pg_conversion c WHERE p.oid = c.conproc AND     (p.prorettype != 'int4'::regtype OR p.proretset OR      p.pronargs != 6 OR      p.proargtypes[0] != 'int4'::regtype OR      p.proargtypes[1] != 'int4'::regtype OR      p.proargtypes[2] != 'cstring'::regtype OR      p.proargtypes[3] != 'internal'::regtype OR      p.proargtypes[4] != 'int4'::regtype OR      p.proargtypes[5] != 'bool'::regtype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1085" value="SELECT p1.f1 AS point1, p2.f1 AS point2, (p1.f1 &lt;-&gt; p2.f1) AS distance    FROM POINT_TBL p1, POINT_TBL p2    WHERE (p1.f1 &lt;-&gt; p2.f1) &gt; 3 and p1.f1 &lt;&lt; p2.f1    ORDER BY distance, p1.f1[0], p2.f1[0];" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1087" value="SELECT p1.f1 AS point1, p2.f1 AS point2, p1.f1 &lt;-&gt; p2.f1 AS dist    FROM POINT_TBL p1, POINT_TBL p2    ORDER BY dist, p1.f1[0], p2.f1[0];" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1097" value="SELECT p1.f1, p2.f1, line(p1.f1, p2.f1)   FROM POINT_TBL p1, POINT_TBL p2 WHERE p1.f1 &lt;&gt; p2.f1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1099" value="SELECT p1.f1, p2.f1, p1.f1 * p2.f1 FROM POINT_TBL p1, POINT_TBL p2 WHERE p1.f1[0] BETWEEN 1 AND 1000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1102" value="SELECT p1.f1, p2.f1, p1.f1 / p2.f1 FROM POINT_TBL p1, POINT_TBL p2 WHERE p2.f1[0] BETWEEN 1 AND 1000;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1103" value="SELECT p1.oid, p1.amname, p2.oid, p2.proname FROM pg_am AS p1, pg_proc AS p2 WHERE p2.oid = p1.amhandler AND p1.amtype = 'i' AND     (p2.prorettype != 'index_am_handler'::regtype      OR p2.proretset      OR p2.pronargs != 1      OR p2.proargtypes[0] != 'internal'::regtype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1104" value="SELECT p1.oid, p1.amname, p2.oid, p2.proname FROM pg_am AS p1, pg_proc AS p2 WHERE p2.oid = p1.amhandler AND p1.amtype = 's' AND     (p2.prorettype != 'table_am_handler'::regtype      OR p2.proretset      OR p2.pronargs != 1      OR p2.proargtypes[0] != 'internal'::regtype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1105" value="SELECT p1.oid, p1.conname FROM pg_conversion as p1 WHERE condefault AND     convert('ABC'::bytea, pg_encoding_to_char(conforencoding),             pg_encoding_to_char(contoencoding)) != 'ABC';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1106" value="SELECT p1.oid, p1.oprname, p2.oid, p2.proname FROM pg_operator AS p1, pg_proc AS p2 WHERE p1.oprcode = p2.oid AND     p1.oprkind = 'b' AND     (p2.pronargs != 2      OR NOT binary_coercible(p2.prorettype, p1.oprresult)      OR NOT binary_coercible(p1.oprleft, p2.proargtypes[0])      OR NOT binary_coercible(p1.oprright, p2.proargtypes[1]));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1107" value="SELECT p1.oid, p1.oprname, p2.oid, p2.proname FROM pg_operator AS p1, pg_proc AS p2 WHERE p1.oprcode = p2.oid AND     p1.oprkind = 'l' AND     (p2.pronargs != 1      OR NOT binary_coercible(p2.prorettype, p1.oprresult)      OR NOT binary_coercible(p1.oprright, p2.proargtypes[0])      OR p1.oprleft != 0);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1108" value="SELECT p1.oid, p1.oprname, p2.oid, p2.proname FROM pg_operator AS p1, pg_proc AS p2 WHERE p1.oprjoin = p2.oid AND     (p1.oprkind != 'b' OR p1.oprresult != 'bool'::regtype OR      p2.prorettype != 'float8'::regtype OR p2.proretset OR      p2.pronargs != 5 OR      p2.proargtypes[0] != 'internal'::regtype OR      p2.proargtypes[1] != 'oid'::regtype OR      p2.proargtypes[2] != 'internal'::regtype OR      p2.proargtypes[3] != 'int2'::regtype OR      p2.proargtypes[4] != 'internal'::regtype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1109" value="SELECT p1.oid, p1.oprname, p2.oid, p2.proname FROM pg_operator AS p1, pg_proc AS p2 WHERE p1.oprrest = p2.oid AND     (p1.oprresult != 'bool'::regtype OR      p2.prorettype != 'float8'::regtype OR p2.proretset OR      p2.pronargs != 4 OR      p2.proargtypes[0] != 'internal'::regtype OR      p2.proargtypes[1] != 'oid'::regtype OR      p2.proargtypes[2] != 'internal'::regtype OR      p2.proargtypes[3] != 'int4'::regtype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1110" value="SELECT p1.oid, p1.proname, p1.proargtypes, p1.proallargtypes, p1.proargmodes FROM pg_proc as p1 WHERE proallargtypes IS NOT NULL AND   ARRAY(SELECT unnest(proargtypes)) &lt;&gt;   ARRAY(SELECT proallargtypes[i]         FROM generate_series(1, array_length(proallargtypes, 1)) g(i)         WHERE proargmodes IS NULL OR proargmodes[i] IN ('i', 'b', 'v'));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1111" value="SELECT p1.oid, p1.proname, p2.oid, p2.proname FROM pg_proc AS p1, pg_proc AS p2 WHERE p2.oid = p1.prosupport AND     (p2.prorettype != 'internal'::regtype OR p2.proretset OR p2.pronargs != 1      OR p2.proargtypes[0] != 'internal'::regtype);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1112" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typanalyze = p2.oid AND NOT     (p2.pronargs = 1 AND      p2.proargtypes[0] = 'internal'::regtype AND      p2.prorettype = 'bool'::regtype AND NOT p2.proretset);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1113" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typinput = p2.oid AND NOT     ((p2.pronargs = 1 AND p2.proargtypes[0] = 'cstring'::regtype) OR      (p2.pronargs = 2 AND p2.proargtypes[0] = 'cstring'::regtype AND       p2.proargtypes[1] = 'oid'::regtype) OR      (p2.pronargs = 3 AND p2.proargtypes[0] = 'cstring'::regtype AND       p2.proargtypes[1] = 'oid'::regtype AND       p2.proargtypes[2] = 'int4'::regtype));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1114" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typmodin = p2.oid AND NOT     (p2.pronargs = 1 AND      p2.proargtypes[0] = 'cstring[]'::regtype AND      p2.prorettype = 'int4'::regtype AND NOT p2.proretset);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1115" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typmodout = p2.oid AND NOT     (p2.pronargs = 1 AND      p2.proargtypes[0] = 'int4'::regtype AND      p2.prorettype = 'cstring'::regtype AND NOT p2.proretset);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1116" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typoutput = p2.oid AND p1.typtype in ('b', 'p') AND NOT     (p2.pronargs = 1 AND      (p2.proargtypes[0] = p1.oid OR       (p2.oid = 'array_out'::regproc AND        p1.typelem != 0 AND p1.typlen = -1))) ORDER BY 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1117" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typreceive = p2.oid AND NOT     ((p2.pronargs = 1 AND p2.proargtypes[0] = 'internal'::regtype) OR      (p2.pronargs = 2 AND p2.proargtypes[0] = 'internal'::regtype AND       p2.proargtypes[1] = 'oid'::regtype) OR      (p2.pronargs = 3 AND p2.proargtypes[0] = 'internal'::regtype AND       p2.proargtypes[1] = 'oid'::regtype AND       p2.proargtypes[2] = 'int4'::regtype));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1118" value="SELECT p1.oid, p1.typname, p2.oid, p2.proname FROM pg_type AS p1, pg_proc AS p2 WHERE p1.typsend = p2.oid AND p1.typtype in ('b', 'p') AND NOT     (p2.pronargs = 1 AND      (p2.proargtypes[0] = p1.oid OR       (p2.oid = 'array_send'::regproc AND        p1.typelem != 0 AND p1.typlen = -1))) ORDER BY 1;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1119" value="SELECT p1.rngtypid, p1.rngsubtype, p.proname FROM pg_range p1 JOIN pg_proc p ON p.oid = p1.rngcanonical WHERE pronargs != 1 OR proargtypes[0] != rngtypid OR prorettype != rngtypid;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1120" value="SELECT p1.rngtypid, p1.rngsubtype, p.proname FROM pg_range p1 JOIN pg_proc p ON p.oid = p1.rngsubdiff WHERE pronargs != 2     OR proargtypes[0] != rngsubtype OR proargtypes[1] != rngsubtype     OR prorettype != 'pg_catalog.float8'::regtype;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1121" value="SELECT parse_ident('foo.boo[]', strict =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1122" value="SELECT pg_current_xact_id() \gset SELECT pg_current_xact_id_if_assigned() IS NOT DISTINCT FROM xid8 :'pg_current_xact_id';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1124" value="SELECT pg_xact_status(:rolledback::text::xid8) AS rolledback;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1126" value="SELECT power(float8 '-0.1', float8 '-inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1128" value="SELECT power(float8 '-1', float8 '-inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1130" value="SELECT power(float8 '-1', float8 'inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1132" value="SELECT power(float8 '-1.1', float8 'inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1134" value="SELECT power(float8 '-inf', float8 '-3');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1136" value="SELECT power(float8 '-inf', float8 '0');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1138" value="SELECT power(float8 '-inf', float8 '3');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1140" value="SELECT power(float8 '-inf', float8 'inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1142" value="SELECT power(float8 '0', float8 'inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1144" value="SELECT power(float8 '0.1', float8 'inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1146" value="SELECT power(float8 '1', float8 'NaN');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1148" value="SELECT power(float8 '1.1', float8 '-inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1150" value="SELECT power(float8 '144', float8 '0.5');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1152" value="SELECT power(float8 'NaN', float8 '0');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1154" value="SELECT power(float8 'NaN', float8 'NaN');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1156" value="SELECT power(float8 'inf', float8 '-inf');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1158" value="SELECT power(float8 'inf', float8 '2');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1160" value="SELECT q1, float8(q1) FROM INT8_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1164" value="SELECT q2, float8(q2) FROM INT8_TBL;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1166" value="SELECT range_merge(nummultirange(numrange(1,2), numrange(7,8)));" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1180" value="SELECT relname, nspname  FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = relnamespace JOIN pg_attribute a ON (attrelid = c.oid AND attname = 'oid')  WHERE relkind = 'r' and c.oid &lt; 16384      AND ((nspname ~ '^pg_') IS NOT FALSE)      AND NOT EXISTS (SELECT 1 FROM pg_index i WHERE indrelid = c.oid                      AND indkey[0] = a.attnum AND indnatts = 1                      AND indisunique AND indimmediate);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1182" value="SELECT reloptions FROM pg_class WHERE oid = :toast_oid;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1183" value="SELECT reltoastrelid as toast_oid  FROM pg_class WHERE oid = 'reloptions_test'::regclass \gset SELECT reloptions FROM pg_class WHERE oid = :toast_oid;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1187" value="SELECT set_bit('\x1234567890abcdef00'::bytea, 43, 0);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1188" value="SELECT set_bit('\x1234567890abcdef00'::bytea, 99, 0);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1190" value="SELECT set_bit(B'0101011000100100', 16, 1); -- fail SELECT overlay(B'0101011100' placing '001' from 2 for 3);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1192" value="SELECT set_byte('\x1234567890abcdef00'::bytea, 99, 11);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1194" value="SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', ARRAY['a', 'zxc', '', NULL]);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1196" value="SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a,zxc}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1198" value="SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1200" value="SELECT sinh(float8 '-infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1202" value="SELECT sinh(float8 'infinity');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1204" value="SELECT sqrt(float8 '64') AS eight;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1206" value="SELECT strip('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1208" value="SELECT strip('wa:1A'::tsvector) @@ '!w:*A'::tsquery as &quot;false&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1210" value="SELECT strip('wa:1A'::tsvector) @@ 'w:*A'::tsquery as &quot;true&quot;;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1212" value="SELECT t.f[1][3][1] AS &quot;131&quot;, t.f[2][2][1] AS &quot;221&quot; FROM (   SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f ) AS t;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1214" value="SELECT tanh(float8 '1');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1216" value="SELECT tanh(float8 'nan');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1218" value="SELECT test_future_xid_status(:inprogress + 10000);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1220" value="SELECT text 'this is a text string' = text 'this is a text string' AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1222" value="SELECT trim(leading E'\\000'::bytea from E'\\000Tom\\000'::bytea);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1224" value="SELECT true AS true;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1226" value="SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, 'spaceship');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1228" value="SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel','rebel']);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1230" value="SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bas');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1232" value="SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bases');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1234" value="SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceshi','rebel']);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1236" value="SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship','rebel']);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1238" value="SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a,b,NULL}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1240" value="SELECT ts_filter('base:7A empir:17 evil:15 first:11 galact:16 hidden:6A rebel:1A spaceship:2A strike:3A victori:12 won:9'::tsvector, '{a}');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1242" value="SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a | s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1244" value="SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a | s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1246" value="SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a | s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1248" value="SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s:*');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1250" value="SELECT ts_rank_cd(' a:1 b:2 s:3A d:2A g'::tsvector, 'a &lt;2&gt; s:A');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1252" value="SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a &lt;-&gt; s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1254" value="SELECT ts_rank_cd(' a:1 s:2 d:2A g'::tsvector, 'a &lt;-&gt; s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1256" value="SELECT ts_rank_cd(' a:1 s:2A d g'::tsvector, 'a &lt;-&gt; s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1258" value="SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a | s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1260" value="SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a &lt;-&gt; s');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1262" value="SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a &lt;-&gt; s:* &lt;-&gt; sa:A');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1264" value="SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a &lt;-&gt; s:*');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1266" value="SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s:*');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1268" value="SELECT ts_rank_cd(' a:1 sa:2D sb:2A g'::tsvector, 'a &lt;-&gt; s:*');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1270" value="SELECT ts_rewrite('foo &amp; bar &amp; qq &amp; new &amp; york',  'new &amp; york'::tsquery, 'big &amp; apple | nyc | new &amp; york &amp; city');" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1272" value="SELECT tsvector_to_array('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1274" value="SELECT txid_current() \gset SELECT txid_current_if_assigned() IS NOT DISTINCT FROM BIGINT :'txid_current';" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1276" value="SELECT txid_status(:rolledback) AS rolledback;" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1278" value="SELECT unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1279" value="SELECT v as value, hash_aclitem(v)::bit(32) as standard,        hash_aclitem_extended(v, 0)::bit(32) as extended0,        hash_aclitem_extended(v, 1)::bit(32) as extended1 FROM   (SELECT DISTINCT(relacl[1]) FROM pg_class LIMIT 10) x(v) WHERE  hash_aclitem(v)::bit(32) != hash_aclitem_extended(v, 0)::bit(32)        OR hash_aclitem(v)::bit(32) = hash_aclitem_extended(v, 1)::bit(32);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1280" value="SELECT v as value, hash_array(v)::bit(32) as standard FROM   (VALUES ('{0}'::money[])) x(v);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1281" value="SELECT v as value, hash_array_extended(v, 0)::bit(32) as extended0 FROM   (VALUES ('{0}'::money[])) x(v);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1282" value="SELECT v as value, hash_range(v)::bit(32) as standard,        hash_range_extended(v, 0)::bit(32) as extended0,        hash_range_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (int4range(10, 20)), (int4range(23, 43)),         (int4range(5675, 550273)),         (int4range(550274, 1550274)), (int4range(1550275, 208112489))) x(v) WHERE  hash_range(v)::bit(32) != hash_range_extended(v, 0)::bit(32)        OR hash_range(v)::bit(32) = hash_range_extended(v, 1)::bit(32);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1283" value="SELECT v as value, hashinet(v)::bit(32) as standard,        hashinetextended(v, 0)::bit(32) as extended0,        hashinetextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::inet), ('192.168.100.128/25'), ('192.168.100.0/8'),         ('172.168.10.126/16'), ('172.18.103.126/24'), ('192.188.13.16/32')) x(v) WHERE  hashinet(v)::bit(32) != hashinetextended(v, 0)::bit(32)        OR hashinet(v)::bit(32) = hashinetextended(v, 1)::bit(32);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1284" value="SELECT v as value, hashmacaddr(v)::bit(32) as standard,        hashmacaddrextended(v, 0)::bit(32) as extended0,        hashmacaddrextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::macaddr), ('08:00:2b:01:02:04'), ('08:00:2b:01:02:04'),         ('e2:7f:51:3e:70:49'), ('d6:a9:4a:78:1c:d5'),         ('ea:29:b1:5e:1f:a5')) x(v) WHERE  hashmacaddr(v)::bit(32) != hashmacaddrextended(v, 0)::bit(32)        OR hashmacaddr(v)::bit(32) = hashmacaddrextended(v, 1)::bit(32);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1285" value="SELECT v as value, hashmacaddr8(v)::bit(32) as standard,        hashmacaddr8extended(v, 0)::bit(32) as extended0,        hashmacaddr8extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::macaddr8), ('08:00:2b:01:02:04:36:49'),         ('08:00:2b:01:02:04:f0:e8'), ('e2:7f:51:3e:70:49:16:29'),         ('d6:a9:4a:78:1c:d5:47:32'), ('ea:29:b1:5e:1f:a5')) x(v) WHERE  hashmacaddr8(v)::bit(32) != hashmacaddr8extended(v, 0)::bit(32)        OR hashmacaddr8(v)::bit(32) = hashmacaddr8extended(v, 1)::bit(32);" db-types="PostgreSQL"/>
    <sql-case id="select_by_postgresql_source_test_case1289" value="SELECT xmlelement(name foo, bytea 'bar');" db-types="PostgreSQL"/>
    <sql-case id="true null false null_by_postgresql_source_test_case1" value="TRUE null FALSE null FALSE TRUE null null null TRUE FALSE null SELECT   BOOL_AND(b1)     AS &quot;f&quot;,   BOOL_AND(b2)     AS &quot;t&quot;,   BOOL_AND(b3)     AS &quot;f&quot;,   BOOL_AND(b4)     AS &quot;n&quot;,   BOOL_AND(NOT b2) AS &quot;f&quot;,   BOOL_AND(NOT b3) AS &quot;t&quot; FROM bool_test;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case1" value="UPDATE arrtest   SET a[1:2] = '{16,25}'   WHERE NOT a = '{}'::_int2;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case2" value="UPDATE arrtest   SET b[1:1][1:1][1:2] = '{113, 117}',       b[1:1][1:2][2:2] = '{142, 147}'   WHERE array_dims(b) = '[1:1][1:2][1:2]';" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case3" value="UPDATE arrtest   SET c[1:NULL] = '{&quot;can''t assign&quot;}'   WHERE array_dims(c) is not null;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case4" value="UPDATE arrtest   SET c[2:2] = '{&quot;new_word&quot;}'   WHERE array_dims(c) is not null;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case5" value="UPDATE arrtest   SET c[NULL:1] = '{&quot;can''t assign&quot;}'   WHERE array_dims(c) is not null;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case6" value="UPDATE arrtest   SET c[NULL] = '{&quot;can''t assign&quot;}'   WHERE array_dims(c) is not null;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case8" value="UPDATE arrtest SET e[0] = '1.1';" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case10" value="UPDATE arrtest_s SET a[3:] = '{23, 24, 25}', b[2:][2:] = '{{25,26}, {28,29}}';" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case11" value="UPDATE arrtest_s SET a[:3] = '{11, 12, 13}', b[:2][:2] = '{{11,12}, {14,15}}'   WHERE array_lower(a,1) = 1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case13" value="UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case14" value="UPDATE arrtest_s SET a[:] = '{23, 24, 25}';" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case16" value="UPDATE current_check SET payload = payload || '_new' WHERE CURRENT OF current_check_cursor RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case18" value="UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case20" value="UPDATE point_tbl SET f1[3] = 10 WHERE f1::text = '(-10,-10)'::point::text RETURNING *;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case21" value="UPDATE price     SET active = true, price = input_prices.price     FROM unnest(ARRAY[(10, 123.00), (11, 99.99)]::price_input[]) input_prices     WHERE price_key_from_table(price.*) = price_key_from_input(input_prices.*);" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case23" value="UPDATE rw_view1 SET b[1] = -b[1] WHERE a = 1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case24" value="UPDATE rw_view1 SET b[2] = -b[2] WHERE a = 1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case26" value="UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case28" value="UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case30" value="UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case32" value="UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case34" value="UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case36" value="UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case38" value="UPDATE update_test   SET (b,a) = (select a,b from update_test where b = 41 and c = 'car')   WHERE a = 100 AND b = 20;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case39" value="UPDATE update_test SET (a,b) = (v.*) FROM (VALUES(21, 101)) AS v(i, j)   WHERE update_test.a = v.i;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case40" value="UPDATE update_test SET (a,b) = ROW(v.*) FROM (VALUES(21, 100)) AS v(i, j)   WHERE update_test.a = v.i;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case41" value="UPDATE update_test SET (b,a) = (select a+1,b from update_test where a = 1000)   WHERE a = 11;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case43" value="UPDATE update_test SET (c,b) = ('car', a+b), a = a + 1 WHERE a = 10;" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case45" value="UPDATE update_test SET (c,b,a) = ('bugle', b+11, DEFAULT) WHERE c = 'foo';" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case46" value="UPDATE update_test o   SET (b,a) = (select a+1,b from update_test i                where i.a=o.a and i.b=o.b and i.c is not distinct from o.c);" db-types="PostgreSQL"/>
    <sql-case id="update_by_postgresql_source_test_case47" value="UPDATE update_test t   SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)   WHERE CURRENT_USER = SESSION_USER;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case1" value="WITH RECURSIVE outermost(x) AS (   WITH innermost as (SELECT 2 FROM outermos     SELECT * FROM innermost     UNION SELECT * from outermost ) SELECT * FROM outermost ORDER BY 1;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case2" value="WITH RECURSIVE t(id, path) AS (     VALUES(1,ARRAY[]::integer[]) UNION ALL     SELECT tree.id, t.path || tree.id     FROM tree JOIN t ON (tree.parent_id = t.id) ) SELECT t1.*, t2.* FROM t AS t1 JOIN t AS t2 ON  (t1.path[1] = t2.path[1] AND  array_upper(t1.path,1) = 1 AND  array_upper(t2.path,1) &gt; 1)  ORDER BY t1.id, t2.id;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case3" value="WITH RECURSIVE t(id, path) AS (     VALUES(1,ARRAY[]::integer[]) UNION ALL     SELECT tree.id, t.path || tree.id     FROM tree JOIN t ON (tree.parent_id = t.id) ) SELECT t1.id, count(t2.*) FROM t AS t1 JOIN t AS t2 ON  (t1.path[1] = t2.path[1] AND  array_upper(t1.path,1) = 1 AND  array_upper(t2.path,1) &gt; 1)  GROUP BY t1.id  ORDER BY t1.id;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case5" value="WITH RECURSIVE t(n) AS (     VALUES (1::money) UNION     SELECT n+1::money FROM t WHERE n &lt; 100::money ) SELECT sum(n) FROM t;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case7" value="WITH objects (classid, objid, objsubid) AS (VALUES     ('pg_class'::regclass, 0,     ('pg_class'::regclass, 'pg_class'::regclass, 1     ('pg_proc'::regclass, 0,     ('pg_type'::regclass, 0,     ('pg_cast'::regclass, 0,     ('pg_collation'::regclass, 0,     ('pg_constraint'::regclass, 0,     ('pg_conversion'::regclass, 0,     ('pg_attrdef'::regclass, 0,     ('pg_language'::regclass, 0,     ('pg_largeobject'::regclass, 0,     ('pg_operator'::regclass, 0,     ('pg_opclass'::regclass, 0,     ('pg_opfamily'::regclass, 0,     ('pg_am'::regclass, 0,     ('pg_amop'::regclass, 0,     ('pg_amproc'::regclass, 0,     ('pg_rewrite'::regclass, 0,     ('pg_trigger'::regclass, 0,     ('pg_namespace'::regclass, 0,     ('pg_statistic_ext'::regclass, 0,     ('pg_ts_parser'::regclass, 0,     ('pg_ts_dict'::regclass, 0,     ('pg_ts_template'::regclass, 0,     ('pg_ts_config'::regclass, 0,     ('pg_authid'::regclass, 0,     ('pg_database'::regclass, 0,     ('pg_tablespace'::regclass, 0,     ('pg_foreign_data_wrapper'::regclass, 0,     ('pg_foreign_server'::regclass, 0,     ('pg_user_mapping'::regclass, 0,     ('pg_default_acl'::regclass, 0,     ('pg_extension'::regclass, 0,     ('pg_event_trigger'::regclass, 0,     ('pg_policy'::regclass, 0,     ('pg_publication'::regclass, 0,     ('pg_publication_rel'::regclass, 0,     ('pg_subscription'::regclass, 0,     ('pg_transform'::regclass, 0   ) SELECT ROW(pg_identify_object(objects.classid, objects.objid, objects.objsubid))          AS ident,        ROW(pg_identify_object_as_address(objects.classid, objects.objid, objects.objsubid))          AS addr,        pg_describe_object(objects.classid, objects.objid, objects.objsubid)          AS descr FROM objects ORDER BY objects.classid, objects.objid, objects.objsubid;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case8" value="WITH objects (type, name, args) AS (VALUES     ('table', '{addr_nsp, gentable}'::text[], '{}'::text[]),     ('table', '{addr_nsp, parttable}'::text[], '{}'::text[]),     ('index', '{addr_nsp, gentable_pkey}', '{}'),     ('index', '{addr_nsp, parttable_pkey}', '{}'),     ('sequence', '{addr_nsp, gentable_a_seq}', '{}'),     ('view', '{addr_nsp, genview}', '{}'),     ('materialized view', '{addr_nsp, genmatview}', '{}'),     ('foreign table', '{addr_nsp, genftable}', '{}'),     ('table column', '{addr_nsp, gentable, b}', '{}'),     ('foreign table column', '{addr_nsp, genftable, a}', '{}'),     ('aggregate', '{addr_nsp, genaggr}', '{int4}'),     ('function', '{pg_catalog, pg_identify_object}', '{pg_catalog.oid, pg_catalog.oid, int4}'),     ('procedure', '{addr_nsp, proc}', '{int4}'),     ('type', '{pg_catalog._int4}', '{}'),     ('type', '{addr_nsp.gendomain}', '{}'),     ('type', '{addr_nsp.gencomptype}', '{}'),     ('type', '{addr_nsp.genenum}', '{}'),     ('cast', '{int8}', '{int4}'),     ('collation', '{default}', '{}'),     ('table constraint', '{addr_nsp, gentable, a_chk}', '{}'),     ('domain constraint', '{addr_nsp.gendomain}', '{domconstr}'),     ('conversion', '{pg_catalog, koi8_r_to_mic}', '{}'),     ('default value', '{addr_nsp, gentable, b}', '{}'),     ('language', '{plpgsql}', '{}'),     ('operator', '{+}', '{int4, int4}'),     ('operator class', '{btree, int4_ops}', '{}'),     ('operator family', '{btree, integer_ops}', '{}'),     ('operator of access method', '{btree,integer_ops,1}', '{integer,integer}'),     ('function of access method', '{btree,integer_ops,2}', '{integer,integer}'),     ('rule', '{addr_nsp, genview, _RETURN}', '{}'),     ('trigger', '{addr_nsp, gentable, t}', '{}'),     ('schema', '{addr_nsp}', '{}'),     ('text search parser', '{addr_ts_prs}', '{}'),     ('text search dictionary', '{addr_ts_dict}', '{}'),     ('text search template', '{addr_ts_temp}', '{}'),     ('text search configuration', '{addr_ts_conf}', '{}'),     ('role', '{regress_addr_user}', '{}'),     ('foreign-data wrapper', '{addr_fdw}', '{}'),     ('server', '{addr_fserv}', '{}'),     ('user mapping', '{regress_addr_user}', '{integer}'),     ('default acl', '{regress_addr_user,public}', '{r}'),     ('default acl', '{regress_addr_user}', '{r}'),     ('policy', '{addr_nsp, gentable, genpol}', '{}'),     ('transform', '{int}', '{sql}'),     ('access method', '{btree}', '{}'),     ('publication', '{addr_pub}', '{}'),     ('publication namespace', '{addr_nsp}', '{addr_pub_schema}'),     ('publication relation', '{addr_nsp, gentable}', '{addr_pub}'),     ('subscription', '{regress_addr_sub}', '{}'),     ('statistics object', '{addr_nsp, gentable_stat}', '{}')         ) SELECT (pg_identify_object(addr1.classid, addr1.objid, addr1.objsubid)).*,  ROW(pg_identify_object(addr1.classid, addr1.objid, addr1.objsubid)) =  ROW(pg_identify_object(addr2.classid, addr2.objid, addr2.objsubid))    FROM objects, pg_get_object_address(type, name, args) addr1,    pg_identify_object_as_address(classid, objid, objsubid) ioa(typ,nms,args),    pg_get_object_address(typ, nms, ioa.args) as addr2  ORDER BY addr1.classid, addr1.objid, addr1.objsubid;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case11" value="WITH str(j, num) AS (  SELECT jsonb_build_object('s', s), num  FROM unnest('{&quot;&quot;, &quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;abcd&quot;, &quot;b&quot;, &quot;A&quot;, &quot;AB&quot;, &quot;ABC&quot;, &quot;ABc&quot;, &quot;ABcD&quot;, &quot;B&quot;}'::text[]) WITH ORDINALITY AS a(s, num) ) SELECT  s1.j, s2.j,  jsonb_path_query_first(s1.j, '$.s &lt; $s', vars =&gt; s2.j) lt,  jsonb_path_query_first(s1.j, '$.s &lt;= $s', vars =&gt; s2.j) le,  jsonb_path_query_first(s1.j, '$.s == $s', vars =&gt; s2.j) eq,  jsonb_path_query_first(s1.j, '$.s &gt;= $s', vars =&gt; s2.j) ge,  jsonb_path_query_first(s1.j, '$.s &gt; $s', vars =&gt; s2.j) gt FROM str s1, str s2 ORDER BY s1.num, s2.num;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case18" value="WITH v(exp) AS   (VALUES(-16379),(-16378),(-1234),(-789),(-45),(-5),(-4),(-3),(-2),(-1),(0),          (1),(2),(3),(4),(5),(38),(275),(2345),(45678),(131070),(131071)) SELECT exp,   to_char(('1.2345e'||exp)::numeric, '9.999EEEE') as numeric FROM v;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case19" value="WITH v(val) AS   (VALUES('0'::numeric),('-4.2'),('4.2e9'),('1.2e-5'),('inf'),('-inf'),('nan')) SELECT val,   to_char(val, '9.999EEEE') as numeric,   to_char(val::float8, '9.999EEEE') as float8,   to_char(val::float4, '9.999EEEE') as float4 FROM v;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case20" value="WITH v(val) AS   (VALUES('0'::numeric),('-4.2'),('4.2e9'),('1.2e-5'),('inf'),('-inf'),('nan')) SELECT val,   to_char(val, 'MI99.99') as numeric,   to_char(val::float8, 'MI99.99') as float8,   to_char(val::float4, 'MI99.99') as float4 FROM v;" db-types="PostgreSQL"/>
    <sql-case id="with_by_postgresql_source_test_case21" value="WITH v(val) AS   (VALUES('0'::numeric),('-4.2'),('4.2e9'),('1.2e-5'),('inf'),('-inf'),('nan')) SELECT val,   to_char(val, 'MI9999999999.99') as numeric,   to_char(val::float8, 'MI9999999999.99') as float8,   to_char(val::float4, 'MI9999999999.99') as float4 FROM v;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case42" value="alter event trigger regress_event_trigger disable;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case44" value="alter event trigger regress_event_trigger enable replica;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case46" value="alter event trigger regress_event_trigger owner to regress_evt_user;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case48" value="alter event trigger regress_event_trigger rename to regress_event_trigger2;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case51" value="alter operator class alter1.ctype_hash_ops using hash set schema alter2;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case53" value="alter operator family integer_ops using btree add   function 1 int8alias1cmp (int8, int8alias1);" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case54" value="alter operator family integer_ops using btree add   operator 1 &lt; (int8alias1, int8alias1);" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case55" value="alter operator family integer_ops using btree add   operator 3 = (int8, int8alias1);" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case56" value="alter operator family integer_ops using btree add   operator 3 = (int8alias1, int8alias1);" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case57" value="alter operator family integer_ops using btree add   operator 3 = (int8alias1, int8alias2);" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case58" value="alter operator family integer_ops using btree add   operator 3 = (int8alias2, int8alias2);" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case60" value="alter table anothertab alter column atcol1 type boolean         using case when atcol1 % 2 = 0 then true else fa alter table anothertab alter column atcol1 drop default;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case61" value="alter table anothertab alter column atcol1 type boolean         using case when atcol1 % 2 = 0 then true else fa alter table anothertab drop constraint anothertab_chk;" db-types="PostgreSQL"/>
    <sql-case id="low_alter_by_postgresql_source_test_case63" value="alter table rename;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case40" value="create constraint trigger parted_trig after insert on parted_constr_ancestor   deferrable   for each row execute procedure trigger_notice_ab();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case41" value="create constraint trigger parted_trig_two after insert on parted_constr   deferrable initially deferred   for each row when (bark(new.b) AND new.a % 2 = 1)   execute procedure trigger_notice_ab();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case42" value="create constraint trigger parted_trigger after update on parted_trigger   from parted_referenced   for each row execute procedure trigger_notice_ab();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case43" value="create constraint trigger parted_trigger after update on unparted_trigger   from parted_referenced   for each row execute procedure trigger_notice_ab();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case62" value="create function add_group(grp anyarray, ad anyelement, size integer)   returns anyarray   as $$ begin   if grp is null then     return array[ad];   end if;   if array_upper(grp, 1) &lt; size then     return grp || ad;   end if;   return grp; end; $$   language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case63" value="create function anyctest(a anyelement, b anyarray,                          c anycompatible, d anycompatible) returns anycompatiblearray as $$   select array[c, d] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case64" value="create function anyctest(anycompatible) returns anycompatiblemultirange as $$   select $1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case65" value="create function anyctest(anycompatible) returns anycompatiblerange as $$   select $1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case66" value="create function anyctest(anycompatible, anycompatible) returns anycompatible as $$   select greatest($1, $2) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case67" value="create function anyctest(anycompatible, anycompatible) returns anycompatiblearray as $$   select array[$1, $2] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case68" value="create function anyctest(anycompatible, anycompatiblearray) returns anycompatiblearray as $$   select array[$1] || $2 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case69" value="create function anyctest(anycompatible, anycompatiblemultirange) returns anycompatiblemultirange as $$   select $2 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case70" value="create function anyctest(anycompatible, anycompatiblerange) returns anycompatiblerange as $$   select $2 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case71" value="create function anyctest(anycompatiblemultirange, anycompatiblemultirange) returns anycompatible as $$   select lower($1) + upper($2) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case72" value="create function anyctest(anycompatiblenonarray, anycompatiblenonarray) returns anycompatiblearray as $$   select array[$1, $2] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case73" value="create function anyctest(anycompatiblerange, anycompatiblerange) returns anycompatible as $$   select lower($1) + upper($2) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case74" value="create function anyctest(variadic anycompatiblearray) returns anycompatiblearray as $$   select $1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case75" value="create function array_to_set(anyarray) returns setof record as $$   select i AS &quot;index&quot;, $1[i] AS &quot;value&quot; from generate_subscripts($1, 1) i $$ language sql strict immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case76" value="create function arrayassign1() returns text[] language plpgsql as $$ declare  r record; begin   r := row(12, '{foo,bar,baz}')::rtype;   r.ar[2] := 'replace';   return r.ar; end$$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case77" value="create function avg_finalfn(state avg_state) returns int4 as $$ begin  if state is null then   return NULL;  else   return state.total / state.count;  end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case78" value="create function bad_sql1() returns int as $$ declare a int; begin     a := 5;     Johnny Yuma;     a := 10;     return a; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case79" value="create function bad_sql2() returns int as $$ declare r record; begin     for r in select I fought the law, the law won LOOP         raise notice 'in loop';     end loop;     return 5; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case80" value="create function bark(text) returns bool language plpgsql immutable   as $$ begin raise notice '% &lt;- woof!', $1; return true; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case81" value="create function bleat(int) returns int as $$ begin   raise notice 'bleat %', $1;   return $1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case82" value="create function cache_test(int) returns int as $$ declare total int; begin  create temp table t1(f1 int);  insert into t1 values($1);  insert into t1 values(11);  insert into t1 values(12);  insert into t1 values(13);  select sum(f1) into total from t1;  drop table t1;  return total; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case83" value="create function cache_test_2() returns int as $$ begin  return f1 from v1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case84" value="create function cachebug() returns void as $$ declare r int; begin   drop table if exists temptable cascade;   create temp table temptable as select * from generate_series(1,3) as f1;   create temp view vv as select * from temptable;   for r in select * from vv loop     raise notice '%', r;   end loop; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case85" value="create function cast_invoker(integer) returns date as $$ begin   return $1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case86" value="create function check_con_function(check_con_tbl) returns bool as $$ begin   raise notice 'input = %', row_to_json($1);   return $1.f1 &gt; 0; end $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case87" value="create function check_estimated_rows(text) returns table (estimated int, actual int) language plpgsql as $$ declare     ln text;     tmp text[];     first_row bool := true; begin     for ln in         execute format('explain analyze %s', $1)     loop         if first_row then             first_row := false;             tmp := regexp_match(ln, 'rows=(\d*) .* rows=(\d*)');             return query select tmp[1]::int, tmp[2]::int;         end if;     end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case88" value="create function child_del_func()   returns trigger language plpgsql as $$ begin   update parent set bcnt = bcnt - 1 where aid = old.aid;   return old; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case89" value="create function child_ins_func()   returns trigger language plpgsql as $$ begin   update parent set bcnt = bcnt + 1 where aid = new.aid;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case90" value="create function concat(text, variadic anyarray) returns text as $$   select array_to_string($2, $1); $$ language sql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case91" value="create function conflict_test() returns setof int8_tbl as $$ declare r record;   q1 bigint := 42; begin   for r in select q1,q2 from int8_tbl loop     return next r;   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case92" value="create function consumes_rw_array(int[]) returns int language plpgsql as $$   begin return $1[1]; end; $$ stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case93" value="create function depth_a_tf() returns trigger   language plpgsql as $$ begin   raise notice '%: depth = %', tg_name, pg_trigger_depth();   insert into depth_b values (new.id);   raise notice '%: depth = %', tg_name, pg_trigger_depth();   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case94" value="create function depth_b_tf() returns trigger   language plpgsql as $$ begin   raise notice '%: depth = %', tg_name, pg_trigger_depth();   begin     execute 'insert into depth_c values (' || new.id::text || ')';   exception     when sqlstate 'U9999' then       raise notice 'SQLSTATE = U9999: depth = %', pg_trigger_depth();   end;   raise notice '%: depth = %', tg_name, pg_trigger_depth();   if new.id = 1 then     execute 'insert into depth_c values (' || new.id::text || ')';   end if;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case95" value="create function depth_c_tf() returns trigger   language plpgsql as $$ begin   raise notice '%: depth = %', tg_name, pg_trigger_depth();   if new.id = 1 then     raise exception sqlstate 'U9999';   end if;   raise notice '%: depth = %', tg_name, pg_trigger_depth();   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case96" value="create function dfunc(a anyelement, b anyelement = null, flag bool = true) returns anyelement as $$   select case when $3 then $1 else $2 end; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case97" value="create function dfunc(a int = 1, b int) returns int as $$   select $1 + $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case98" value="create function dfunc(a int = 1, int = 2) returns int as $$   select $1 + $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case99" value="create function dfunc(a int = 1, out sum int, b int = 2) as $$   select $1 + $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case100" value="create function dfunc(a int DEFAULT 1.0, int DEFAULT '-1') returns int as $$   select $1 + $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case101" value="create function dfunc(a int, b int, c int = 0, d int = 0)   returns table (a int, b int, c int, d int) as $$   select $1, $2, $3, $4; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case102" value="create function dfunc(a text DEFAULT 'Hello', b text DEFAULT 'World') returns text as $$   select $1 || ', ' || $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case103" value="create function dfunc(a varchar = 'def a', out _a varchar, c numeric = NULL, out _c numeric) returns record as $$   select $1, $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case104" value="create function dfunc(a varchar, b numeric, c date = current_date)   returns table (a varchar, b numeric, c date) as $$   select $1, $2, $3; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case105" value="create function dfunc(a variadic int[]) returns int as $$ select array_upper($1, 1) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case106" value="create function dfunc(anyelement = 'World'::text) returns text as $$   select 'Hello, ' || $1::text; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case107" value="create function dfunc(int = 1, int = 2) returns int as $$   select 2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case108" value="create function dfunc(int = 1, int = 2) returns int as $$   select 2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case109" value="create function dfunc(int = 1, int = 2, int = 3) returns int as $$   select 3; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case110" value="create function dfunc(int = 1, int = 2, int = 3, int = 4) returns int as $$   select 4; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case111" value="create function dfunc(out int = 20) returns int as $$   select 1; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case112" value="create function dfunc(text) returns text as $$   select $1; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case113" value="create function dom_check(int) returns di as $$ declare d di; begin   d := $1::di;   return d; end $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case114" value="create function doubledecrement(p1 pos_int) returns pos_int as $$ declare v pos_int; begin     return p1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case115" value="create function duplic(in i anycompatiblerange, out j anycompatible, out k anycompatiblearray) as $$ begin   j := lower(i);   k := array[lower(i),upper(i)];   return; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case116" value="create function duplic(in i anyelement, out j anyelement, out k anyarray) as $$ begin   j := i;   k := array[j,j];   return; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case117" value="create function error1(text) returns text language sql as $$ SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case118" value="create function error2(p_name_table text) returns text language plpgsql as $$ begin   return error1(p_name_table); end$$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case119" value="create function exc_using(int, text) returns int as $$ declare i int; begin   for i in execute 'select * from generate_series(1,$1)' using $1+1 loop     raise notice '%', i;   end loop;   execute 'select $2 + $2*3 + length($1)' into i using $2,$1;   return i; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case120" value="create function excpt_test1() returns void as $$ begin     raise notice '% %', sqlstate, sqlerrm; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case121" value="create function excpt_test2() returns void as $$ begin     begin         begin             raise notice '% %', sqlstate, sqlerrm;         end;     end; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case122" value="create function excpt_test3() returns void as $$ begin     begin         raise exception 'user exception';     exception when others then      raise notice 'caught exception % %', sqlstate, sqlerrm;      begin          raise notice '% %', sqlstate, sqlerrm;          perform 10/0;         exception             when substring_error then                 raise notice 'unexpected exception: % %', sqlstate, sqlerrm;          when division_by_zero then              raise notice 'caught exception % %', sqlstate, sqlerrm;      end;      raise notice '% %', sqlstate, sqlerrm;     end; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case123" value="create function excpt_test4() returns text as $$ begin  begin perform 1/0;  exception when others then return sqlerrm; end; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case124" value="create function execute_text_query_heap(query_sql text) returns setof text language plpgsql as $$ begin   set enable_seqscan = on;   set enable_bitmapscan = off;   return query execute query_sql; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case125" value="create function execute_text_query_index(query_sql text) returns setof text language plpgsql as $$ begin   set enable_seqscan = off;   set enable_bitmapscan = on;   return query execute query_sql; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case126" value="create function expensivefunc(int) returns int language plpgsql immutable strict cost 10000 as $$begin return $1; end$$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case127" value="create function explain_filter(text) returns setof text language plpgsql as $$ declare     ln text; begin     for ln in execute $1     loop         ln := regexp_replace(ln, '-?\m\d+\M', 'N', 'g');         ln := regexp_replace(ln, '\m\d+kB', 'NkB', 'g');         CONTINUE WHEN (ln ~ ' +Buffers: .*');         CONTINUE WHEN (ln = 'Planning:');         return next ln;     end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case128" value="create function explain_filter_to_json(text) returns jsonb language plpgsql as $$ declare     data text := '';     ln text; begin     for ln in execute $1     loop         ln := regexp_replace(ln, '\m\d+\M', '0', 'g');         data := data || ln;     end loop;     return data::jsonb; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case129" value="create function explain_memoize(query text, hide_hitmiss bool) returns setof text language plpgsql as $$ declare     ln text; begin     for ln in         execute format('explain (analyze, costs off, summary off, timing off) %s',             query)     loop         if hide_hitmiss = true then                 ln := regexp_replace(ln, 'Hits: 0', 'Hits: Zero');                 ln := regexp_replace(ln, 'Hits: \d+', 'Hits: N');                 ln := regexp_replace(ln, 'Misses: 0', 'Misses: Zero');                 ln := regexp_replace(ln, 'Misses: \d+', 'Misses: N');         end if;         ln := regexp_replace(ln, 'Evictions: 0', 'Evictions: Zero');         ln := regexp_replace(ln, 'Evictions: \d+', 'Evictions: N');         ln := regexp_replace(ln, 'Memory Usage: \d+', 'Memory Usage: N');  ln := regexp_replace(ln, 'Heap Fetches: \d+', 'Heap Fetches: N');  ln := regexp_replace(ln, 'loops=\d+', 'loops=N');         return next ln;     end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case130" value="create function explain_parallel_append(text) returns setof text language plpgsql as $$ declare     ln text; begin     for ln in         execute format('explain (analyze, costs off, summary off, timing off) %s',             $1)     loop         ln := regexp_replace(ln, 'Workers Launched: \d+', 'Workers Launched: N');         ln := regexp_replace(ln, 'actual rows=\d+ loops=\d+', 'actual rows=N loops=N');         ln := regexp_replace(ln, 'Rows Removed by Filter: \d+', 'Rows Removed by Filter: N');         return next ln;     end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case131" value="create function explain_parallel_sort_stats() returns setof text language plpgsql as $$ declare ln text; begin     for ln in         explain (analyze, timing off, summary off, costs off)           select * from           (select ten from tenk1 where ten &lt; 100 order by ten) ss           right join (values (1),(2),(3)) v(x) on true     loop         ln := regexp_replace(ln, 'Memory: \S*',  'Memory: xxx');         return next ln;     end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case132" value="create function explain_query_json(query_sql text) returns table (explain_line json) language plpgsql as $$ begin   set enable_seqscan = off;   set enable_bitmapscan = on;   return query execute 'EXPLAIN (ANALYZE, FORMAT json) ' || query_sql; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case133" value="create function explain_sq_limit() returns setof text language plpgsql as $$ declare ln text; begin     for ln in         explain (analyze, summary off, timing off, costs off)         select * from (select pk,c2 from sq_limit order by c1,pk) as x limit 3     loop         ln := regexp_replace(ln, 'Memory: \S*',  'Memory: xxx');         return next ln;     end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case134" value="create function extractq2(t int8_tbl) returns int8 as $$   select t.q2 $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case135" value="create function extractq2_2(t int8_tbl) returns table(ret1 int8) as $$   select extractq2(t) offset 0 $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case136" value="create function extractq2_2_opt(t int8_tbl) returns table(ret1 int8) as $$   select extractq2(t) $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case137" value="create function f () returns trigger as $$ begin return new; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case138" value="create function f1() returns int language plpgsql as $$ begin   create table event_trigger_fire6 (a int);   return 0; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case139" value="create function f1(a anyelement, b anyarray,                    c anycompatible, d anycompatible,                    OUT x anyarray, OUT y anycompatiblearray) as $$ begin   x := a || b;   y := array[c, d]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case140" value="create function f1(in i int, out j int) as $$ begin   j := i+1;   return; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case141" value="create function f1(in i int, out j int) returns int as $$ begin   return i+1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case142" value="create function f1(in i int, out j int) returns setof int as $$ begin   j := i+1;   return next;   j := i+2;   return next;   return; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case143" value="create function f1(in i int, out j int, out k text) as $$ begin   j := i;   j := j+1;   k := 'foo'; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case144" value="create function f1(in i int, out j int, out k text) returns setof record as $$ begin   j := i+1;   k := 'foo';   return next;   j := j+1;   k := 'foot';   return next; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case145" value="create function f1(x anyarray) returns anyarray as $$ begin   return x; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case146" value="create function f1(x anyarray) returns anyelement as $$ begin   return x[1]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case147" value="create function f1(x anycompatible) returns anycompatiblerange as $$ begin   return array[x + 1, x + 2]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case148" value="create function f1(x anycompatible, y anycompatible) returns anycompatiblearray as $$ begin   return array[x, y]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case149" value="create function f1(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$ begin   return array[lower(x), upper(x), y, z]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case150" value="create function f1(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$ begin   return x; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case151" value="create function f1(x anyelement) returns anyarray as $$ begin   return array[x + 1, x + 2]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case152" value="create function f1(x anyelement) returns anyelement as $$ begin   return x + 1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case153" value="create function f1(x anyelement) returns anyrange as $$ begin   return array[x + 1, x + 2]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case154" value="create function f1(x anyrange) returns anyarray as $$ begin   return array[lower(x), upper(x)]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case155" value="create function f1_times_10() returns trigger as $$ begin new.f1 := new.f1 * 10; return new; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case156" value="create function f_immutable_int4(i integer) returns integer as $$ begin return i; end; $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case157" value="create function fail() returns int language plpgsql as $$ begin   return 1/0; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case158" value="create function fcompos1(v compos) returns void as $$ insert into compos values (v);  $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case159" value="create function fcompos1(v compos) returns void as $$ insert into compos values (v.*); $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case160" value="create function fcompos2(v compos) returns void as $$ select fcompos1(v); $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case161" value="create function fcompos3(v compos) returns void as $$ select fcompos1(fcompos3.v.*); $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case162" value="create function foreach_test(anyarray) returns void as $$ declare x int; begin   foreach x in array $1   loop     raise notice '%', x;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case163" value="create function formarray(anyelement, variadic anyarray) returns anyarray as $$   select array_prepend($1, $2); $$ language sql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case164" value="create function funcA() returns trigger as $$ begin   raise notice 'hello from funcA';   return null; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case165" value="create function funcB() returns trigger as $$ begin   raise notice 'hello from funcB';   return null; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case166" value="create function func_with_bad_set() returns int as $$ select 1 $$ language sql set default_text_search_config = no_such_config;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case167" value="create function func_with_bad_set() returns int as $$ select 1 $$ language sql set default_text_search_config = no_such_config;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case168" value="create function gstest_data(v integer, out a integer, out b integer)   returns setof record   as $f$     begin       return query select v, i from generate_series(1,3) i;     end;   $f$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case169" value="create function halfsum_finalfn(state int4) returns int4 as $$ begin  if state is null then   return NULL;  else   return state / 2;  end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case170" value="create function inner_func(int) returns int as $$ declare   _context text;   sx int := 5; begin   begin     perform sx / 0;   exception     when division_by_zero then       get diagnostics _context = pg_context;       raise notice '***%***', _context;   end;   get diagnostics _context = pg_context;   raise notice '***%***', _context;   raise notice 'lets make sure we didnt break anything';   return 2 * $1; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case171" value="create function inner_func(int) returns int as $$ declare _context text; begin   get diagnostics _context = pg_context;   raise notice '***%***', _context;   get diagnostics _context = pg_context;   raise notice '***%***', _context;   raise notice 'lets make sure we didnt break anything';   return 2 * $1; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case172" value="create function inoutparam_fail(inout i anyelement, out r anyrange)   as $$ select $1, '[1,10]' $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case173" value="create function inoutparam_succeed(out i anyelement, inout r anyrange)   as $$ select upper($1), $1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case174" value="create function insert_tt(text) returns int as $$ insert into tt(data) values($1) returning f1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case176" value="create function longname(fullname) returns text language sql as $$select $1.first || ' ' || $1.last$$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case177" value="create function missing_return_expr() returns int as $$ begin     perform 2+2; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case178" value="create function missing_return_expr() returns int as $$ begin     return ; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case179" value="create function mki4(int) returns int4_tbl as $$select row($1)::int4_tbl$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case180" value="create function mki8(bigint, bigint) returns int8_tbl as $$select row($1,$2)::int8_tbl$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case181" value="create function mlparted11_trig_fn() returns trigger AS $$ begin   NEW.b := 4;   return NEW; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case183" value="create function mr_inoutparam_fail(inout i anyelement, out r anymultirange)   as $$ select $1, '[1,10]' $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case184" value="create function mr_inoutparam_succeed(out i anyelement, inout r anymultirange)   as $$ select upper($1), $1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case185" value="create function mr_outparam_fail(i anyelement, out r anymultirange, out t text)   as $$ select '[1,10]', 'foo' $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case186" value="create function mr_outparam_succeed(i anymultirange, out r anymultirange, out t text)   as $$ select $1, 'foo'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case187" value="create function mr_outparam_succeed2(i anymultirange, out r anyarray, out t text)   as $$ select ARRAY[upper($1)], 'foo'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case188" value="create function mr_outparam_succeed3(i anymultirange, out r anyrange, out t text)   as $$ select range_merge($1), 'foo'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case189" value="create function mr_outparam_succeed4(i anyrange, out r anymultirange, out t text)   as $$ select multirange($1), 'foo'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case190" value="create function mr_polymorphic(i anyrange) returns anymultirange   as $$ begin return multirange($1); end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case191" value="create function mr_table_fail(i anyelement) returns table(i anyelement, r anymultirange)   as $$ select $1, '[1,10]' $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case192" value="create function mr_table_succeed(i anyelement, r anymultirange) returns table(i anyelement, r anymultirange)   as $$ select $1, $2 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case193" value="create function multi_datum_use(p1 int) returns bool as $$ declare   x int;   y int; begin   select into x,y unique1/p1, unique1/$1 from tenk1 group by unique1/p1;   return x = y; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case194" value="create function multirangetypes_sql(q anymultirange, b anyarray, out c anyelement)   as $$ select upper($1) + $2[1] $$   language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case196" value="create function myinteq(myint, myint) returns bool as $$ begin   if $1 is null and $2 is null then     return true;   else     return $1::int = $2::int;   end if; end; $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case197" value="create function myintne(myint, myint) returns bool as $$ begin   return not myinteq($1, $2); end; $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case198" value="create function myleast(variadic anyarray) returns anyelement as $$   select min($1[i]) from generate_subscripts($1,1) g(i) $$ language sql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case199" value="create function namedparmcursor_test1(int, int) returns boolean as $$ declare     c1 cursor (param1 int, param12 int) for select * from rc_test where a &gt; param1 and b &gt; param12;     nonsense record; begin     open c1(param12 := $2, param1 := $1);     fetch c1 into nonsense;     close c1;     if found then         return true;     else         return false;     end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case200" value="create function namedparmcursor_test2(int, int) returns boolean as $$ declare     c1 cursor (param1 int, param2 int) for select * from rc_test where a &gt; param1 and b &gt; param2;     nonsense record; begin     open c1(param1 := $1, $2);     fetch c1 into nonsense;     close c1;     if found then         return true;     else         return false;     end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case201" value="create function namedparmcursor_test3() returns void as $$ declare     c1 cursor (param1 int, param2 int) for select * from rc_test where a &gt; param1 and b &gt; param2; begin     open c1(param2 := 20, 21); end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case202" value="create function namedparmcursor_test4() returns void as $$ declare     c1 cursor (param1 int, param2 int) for select * from rc_test where a &gt; param1 and b &gt; param2; begin     open c1(20, param1 := 21); end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case203" value="create function namedparmcursor_test5() returns void as $$ declare   c1 cursor (p1 int, p2 int) for     select * from tenk1 where thousand = p1 and tenthous = p2; begin   open c1 (p2 := 77, p2 := 42); end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case204" value="create function namedparmcursor_test6() returns void as $$ declare   c1 cursor (p1 int, p2 int) for     select * from tenk1 where thousand = p1 and tenthous = p2; begin   open c1 (p2 := 77); end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case205" value="create function namedparmcursor_test7() returns void as $$ declare   c1 cursor (p1 int, p2 int) for     select * from tenk1 where thousand = p1 and tenthous = p2; begin   open c1 (p2 := 77, p1 := 42/0); end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case206" value="create function namedparmcursor_test8() returns int4 as $$ declare   c1 cursor (p1 int, p2 int) for     select count(*) from tenk1 where thousand = p1 and tenthous = p2;   n int4; begin   open c1 (   , 42);   fetch c1 into n;   return n; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case207" value="create function namedparmcursor_test9(p1 int) returns int4 as $$ declare   c1 cursor (p1 int, p2 int, debug int) for     select count(*) from tenk1 where thousand = p1 and tenthous = p2       and four = debug;   p2 int4 := 1006;   n int4; begin   open c1 (p1 := p1, p2 := p2, debug := 2);   fetch c1 into n;   return n; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case208" value="create function noticetrigger() returns trigger as $$ begin   raise notice 'noticetrigger % %', new.f1, new.data;   return null; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case209" value="create function outparam2_succeed(r anyrange, out lu anyarray, out ul anyarray)   as $$ select array[lower($1), upper($1)], array[upper($1), lower($1)] $$   language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case210" value="create function outparam_fail(i anyelement, out r anyrange, out t text)   as $$ select '[1,10]', 'foo' $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case211" value="create function outparam_succeed(i anyrange, out r anyrange, out t text)   as $$ select $1, 'foo'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case212" value="create function outparam_succeed2(i anyrange, out r anyarray, out t text)   as $$ select ARRAY[upper($1)], 'foo'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case213" value="create function parent_del_func()   returns trigger language plpgsql as $$ begin   delete from child where aid = old.aid;   return old; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case214" value="create function parent_upd_func()   returns trigger language plpgsql as $$ begin   if old.val1 &lt;&gt; new.val1 then     new.val2 = new.val1;     delete from child where child.aid = new.aid and child.val1 = new.val1;   end if;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case215" value="create function parted_trigfunc() returns trigger language plpgsql as $$ begin   new.a = new.a + 1;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case216" value="create function pg_temp.twophase_func() returns void as   $$ select '2pc_func'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case217" value="create function pg_temp.twophase_func() returns void as   $$ select '2pc_func'::text $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case218" value="create function pg_temp.whoami() returns text   as $$select 'temp'::text$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case219" value="create function pl_qual_names (param1 int) returns void as $$ &lt;&lt;outerblock&gt;&gt; declare   param1 int := 1; begin   &lt;&lt;innerblock&gt;&gt;   declare     param1 int := 2;   begin     raise notice 'param1 = %', param1;     raise notice 'pl_qual_names.param1 = %', pl_qual_names.param1;     raise notice 'outerblock.param1 = %', outerblock.param1;     raise notice 'innerblock.param1 = %', innerblock.param1;   end; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case220" value="create function plpgsql_arr_domain_check(val int[]) returns boolean as $$ begin return val[1] &gt; 0; end $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case221" value="create function plpgsql_domain_check(val int) returns boolean as $$ begin return val &gt; 0; end $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case222" value="create function polyf(a anyelement, b anyarray,                       c anycompatible, d anycompatible,                       OUT x anyarray, OUT y anycompatiblearray) as $$   select a || b, array[c, d] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case223" value="create function polyf(x anyarray) returns anyarray as $$   select x $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case224" value="create function polyf(x anyarray) returns anyelement as $$   select x[1] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case225" value="create function polyf(x anycompatible) returns anycompatiblemultirange as $$   select array[x + 1, x + 2] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case226" value="create function polyf(x anycompatible) returns anycompatiblerange as $$   select array[x + 1, x + 2] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case227" value="create function polyf(x anycompatible, y anycompatible) returns anycompatiblearray as $$   select array[x, y] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case228" value="create function polyf(x anycompatiblemultirange, y anycompatible, z anycompatible) returns anycompatiblearray as $$   select array[lower(x), upper(x), y, z] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case229" value="create function polyf(x anycompatiblemultirange, y anycompatiblearray) returns anycompatiblemultirange as $$   select x $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case230" value="create function polyf(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$   select array[lower(x), upper(x), y, z] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case231" value="create function polyf(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$   select x $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case232" value="create function polyf(x anyelement) returns anyarray as $$   select array[x + 1, x + 2] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case233" value="create function polyf(x anyelement) returns anyelement as $$   select x + 1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case234" value="create function polyf(x anyelement) returns anyrange as $$   select array[x + 1, x + 2] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case235" value="create function polyf(x anyrange) returns anyarray as $$   select array[lower(x), upper(x)] $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case236" value="create function public.whoami() returns text   as $$select 'public'::text$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case237" value="create function qqq_trig() returns trigger as $$ begin if tg_op in ('INSERT', 'UPDATE') then     raise notice '% % %', tg_when, tg_op, new.id;     return new; else     raise notice '% % %', tg_when, tg_op, old.id;     return old; end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case238" value="create function raise_exprs() returns void as $$ declare     a integer[] = '{10,20,30}';     c varchar = 'xyz';     i integer; begin     i := 2;     raise notice '%; %; %; %; %; %', a, a[i], c, (select c || 'abc'), row(10,'aaa',NULL,30), NULL; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case239" value="create function raise_test1(int) returns int as $$ begin     raise notice 'This message has too many parameters!', $1;     return $1; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case240" value="create function raise_test2(int) returns int as $$ begin     raise notice 'This message has too few parameters: %, %, %', $1, $1;     return $1; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case241" value="create function raise_test3(int) returns int as $$ begin     raise notice 'This message has no parameters (despite having %% signs in it)!';     return $1; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case242" value="create function rangetypes_sql(q anyrange, b anyarray, out c anyelement)   as $$ select upper($1) + $2[1] $$   language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case243" value="create function recurse(float8) returns float8 as $$ begin   if ($1 &gt; 0) then     return sql_recurse($1 - 1);   else     return $1;   end if; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case244" value="create function refcursor_test1(refcursor) returns refcursor as $$ begin     perform return_refcursor($1);     return $1; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case245" value="create function refcursor_test2(int, int) returns boolean as $$ declare     c1 cursor (param1 int, param2 int) for select * from rc_test where a &gt; param1 and b &gt; param2;     nonsense record; begin     open c1($1, $2);     fetch c1 into nonsense;     close c1;     if found then         return true;     else         return false;     end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case246" value="create function report_guc(text) returns text as $$ select current_setting($1) $$ language sql set work_mem = '1MB';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case247" value="create function ret_query1(out int, out int) returns setof record as $$ begin     $1 := -1;     $2 := -2;     return next;     return query select x + 1, x * 10 from generate_series(0, 10) s (x);     return next; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case248" value="create function return_int_input(int) returns int as $$ begin  return $1; end; $$ language plpgsql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case249" value="create function return_refcursor(rc refcursor) returns refcursor as $$ begin     open rc for select a from rc_test;     return rc; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case250" value="create function return_text_input(text) returns text as $$ begin  return $1; end; $$ language plpgsql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case251" value="create function returns_rw_array(int) returns int[] language plpgsql as $$   declare r int[];   begin r := array[$1, $1]; return r; end; $$ stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case252" value="create function rngfunc1(n integer, out a text, out b text)   returns setof record   language sql   as $$ select 'foo ' || i, 'bar ' || i from generate_series(1,$1) i $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case253" value="create function rttest() returns setof int as $$ declare rc int; begin   return query values(10),(20);   get diagnostics rc = row_count;   raise notice '% %', found, rc;   return query select * from (values(10),(20)) f(a) where false;   get diagnostics rc = row_count;   raise notice '% %', found, rc;   return query execute 'values(10),(20)';   get diagnostics rc = row_count;   raise notice '% %', found, rc;   return query execute 'select * from (values(10),(20)) f(a) where false';   get diagnostics rc = row_count;   raise notice '% %', found, rc; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case254" value="create function sc_test() returns setof integer as $$ declare   c scroll cursor for select f1 from int4_tbl;   x integer; begin   open c;   fetch last from c into x;   while found loop     return next x;     fetch prior from c into x;   end loop;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case255" value="create function self_ref_trigger_del_func()   returns trigger language plpgsql as $$ begin   if old.parent is not null then     update self_ref_trigger set nchildren = nchildren - 1       where id = old.parent;   end if;   return old; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case256" value="create function self_ref_trigger_ins_func()   returns trigger language plpgsql as $$ begin   if new.parent is not null then     update self_ref_trigger set nchildren = nchildren + 1       where id = new.parent;   end if;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case257" value="create function sp_add_user(a_login text) returns int as $$ declare my_id_user int; begin   my_id_user = sp_id_user( a_login );   IF  my_id_user &gt; 0 THEN     RETURN    END IF;   INSERT INTO users ( login ) VALUES ( a_login );   my_id_user = sp_id_user( a_login );   IF  my_id_user = 0 THEN     RETURN    END IF;   RETURN my_id_user; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case258" value="create function sp_id_user(a_login text) returns int as $$ declare x int; begin   select into x id from users where login = a_login;   if found then return x; end if;   return 0; end$$ language plpgsql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case259" value="create function sp_parallel_restricted(int) returns int as   $$begin return $1; end$$ language plpgsql parallel restricted;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case260" value="create function sp_simple_func(var1 integer) returns integer as $$ begin         return var1 + 10; end; $$ language plpgsql PARALLEL SAFE;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case261" value="create function sp_test_func() returns setof text as $$ select 'foo'::varchar union all select 'bar'::varchar $$ language sql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case262" value="create function sql_if(bool, anyelement, anyelement) returns anyelement as $$ select case when $1 then $2 else $3 end $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case263" value="create function sql_recurse(float8) returns float8 as $$ select recurse($1) limit 1; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case264" value="create function sql_to_date(integer) returns date as $$ select $1::text::date $$ language sql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case265" value="create function stacked_diagnostics_test() returns void as $$ declare _sqlstate text;         _message text;         _context text; begin   perform zero_divide(); exception when others then   get stacked diagnostics         _sqlstate = returned_sqlstate,         _message = message_text,         _context = pg_exception_context;   raise notice 'sqlstate: %, message: %, context: [%]',     _sqlstate, _message, replace(_context, E'\n', ' &lt;- '); end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case266" value="create function sum_finalfn(state avg_state) returns int4 as $$ begin  if state is null then   return NULL;  else   return state.total;  end if; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case267" value="create function table_fail(i anyelement) returns table(i anyelement, r anyrange)   as $$ select $1, '[1,10]' $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case268" value="create function table_succeed(r anyrange)   returns table(l anyelement, u anyelement)   as $$ select lower($1), upper($1) $$   language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case269" value="create function tattle(x int, y int) returns bool volatile language plpgsql as $$ begin   raise notice 'x = %, y = %', x, y;   return x &gt; y; end$$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case270" value="create function test_event_trigger() returns event_trigger as $$ BEGIN     RAISE NOTICE 'test_event_trigger: % %', tg_event, tg_tag; END $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case271" value="create function test_event_trigger_arg(name text) returns event_trigger as $$ BEGIN RETURN 1; END $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case272" value="create function test_event_trigger_sql() returns event_trigger as $$ SELECT 1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case273" value="create function testoa(x1 int, x2 int, x3 int) returns orderedarray language plpgsql as $$ declare res orderedarray; begin   res := array[x1, x2];   res[2] := x3;   return res; end$$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case275" value="create function testpolym(a int, a int) returns int as $$ select 1;$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case277" value="create function testpolym(a int, out a int) returns int as $$ select $1;$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case279" value="create function testpolym(out a int, inout a int) returns int as $$ select 1;$$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case280" value="create function testrngfunc() returns record as $$   insert into rngfunc values (1,2) returning *; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case281" value="create function testrngfunc() returns rngfunc_type as $$   select 7.136178319899999964, 7.136178319899999964; $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case282" value="create function testrngfunc() returns setof record as $$   insert into rngfunc values (1,2), (3,4) returning *; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case283" value="create function testrngfunc() returns setof rngfunc_type as $$   select 7.136178319899999964, 7.136178319899999964; $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case284" value="create function tftest(int) returns table(a int, b int) as $$ begin   return query select $1, $1+i from generate_series(1,5) g(i); end; $$ language plpgsql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case285" value="create function tg_iface_biu() returns trigger as $$ declare     sname text;     sysrec record; begin     select into sysrec * from system where name = new.sysname;     if not found then         raise exception $q$system &quot;%&quot; does not exist$q$, new.sysname;     end if;     sname := 'IF.' || new.sysname;     sname := sname || '.';     sname := sname || new.ifname;     if length(sname) &gt; 20 then         raise exception 'IFace slotname &quot;%&quot; too long (20 char max)', sname;     end if;     new.slotname := sname;     return new; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case286" value="create function tg_pslot_biu() returns trigger as $proc$ declare     pfrec record;     ps          alias for new; begin     select into pfrec * from PField where name = ps.pfname;     if not found then         raise exception $$Patchfield &quot;%&quot; does not exist$$, ps.pfname;     end if;     return ps; end; $proc$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case287" value="create function tg_wslot_biu() returns trigger as $$ begin     if count(*) = 0 from Room where roomno = new.roomno then         raise exception 'Room % does not exist', new.roomno;     end if;     return new; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case288" value="create function trig_nothing() returns trigger language plpgsql   as $$ begin return null; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case289" value="create function trigger_ddl_func() returns trigger as $$ begin   alter table trigger_ddl_table add primary key (col1);   return new; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case290" value="create function trigger_nothing() returns trigger   language plpgsql as $$ begin end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case291" value="create function trigger_parted_trigfunc() returns trigger language plpgsql as   $$ begin end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case292" value="create function trigtest() returns trigger as $$ begin  raise notice '% % % %', TG_TABLE_NAME, TG_OP, TG_WHEN, TG_LEVEL;  return new; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case293" value="create function tt14f() returns setof tt14t as $$ declare     rec1 record; begin     for rec1 in select * from tt14t     loop         return next rec1;     end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case294" value="create function unreserved_test() returns int as $$ declare   forward int := 21; begin   forward := forward * 2;   return forward; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case295" value="create function update_stmt_notice() returns trigger as $$ begin  raise notice 'updating %', TG_TABLE_NAME;  return null; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case296" value="create function upsert_after_func()   returns trigger language plpgsql as $$ begin   if (TG_OP = 'UPDATE') then     raise warning 'after update (old): %', old.*::text;     raise warning 'after update (new): %', new.*::text;   elsif (TG_OP = 'INSERT') then     raise warning 'after insert (new): %', new.*::text;   end if;   return null; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case297" value="create function upsert_before_func()   returns trigger language plpgsql as $$ begin   if (TG_OP = 'UPDATE') then     raise warning 'before update (old): %', old.*::text;     raise warning 'before update (new): %', new.*::text;   elsif (TG_OP = 'INSERT') then     raise warning 'before insert (new): %', new.*::text;     if new.key % 2 = 0 then       new.key := new.key + 1;       new.color := new.color || ' trig modified';       raise warning 'before insert (new, modified): %', new.*::text;     end if;   end if;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case298" value="create function use_refcursor(rc refcursor) returns int as $$ declare     rc refcursor;     x record; begin     rc := return_unnamed_refcursor();     fetch next from rc into x;     return x.a; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case299" value="create function void_return_expr() returns void as $$ begin     perform 2+2; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case300" value="create function void_return_expr() returns void as $$ begin     return 5; end;$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case301" value="create function wait_for_stats() returns void as $$ declare   start_time timestamptz := clock_timestamp();   updated1 bool;   updated2 bool;   updated3 bool;   updated4 bool; begin   for i in 1 .. 300 loop     SELECT (st.seq_scan &gt;= pr.seq_scan + 1) INTO updated1       FROM pg_stat_user_tables AS st, pg_class AS cl, prevstats AS pr      WHERE st.relname='tenk2' AND cl.relname='tenk2';     SELECT (st.idx_scan &gt;= pr.idx_scan + 1) INTO updated2       FROM pg_stat_user_tables AS st, pg_class AS cl, prevstats AS pr      WHERE st.relname='tenk2' AND cl.relname='tenk2';     SELECT (n_tup_ins &gt; 0) INTO updated3       FROM pg_stat_user_tables WHERE relname='trunc_stats_test4';     SELECT (pr.snap_ts &lt; pg_stat_get_snapshot_timestamp()) INTO updated4       FROM prevstats AS pr;     exit when updated1 and updated2 and updated3 and updated4;     perform pg_sleep_for('100 milliseconds');     perform pg_stat_clear_snapshot();   end loop;   raise log 'wait_for_stats delayed % seconds',     extract(epoch from clock_timestamp() - start_time); end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case302" value="create function zero_divide() returns int as $$ declare v int := 0; begin   return 10 / v; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case317" value="create operator class alter1.ctype_hash_ops default for type alter1.ctype using hash as   operator 1 alter1.=(alter1.ctype, alter1.ctype);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case318" value="create operator class custom_opclass for type int4 using hash as operator 1 = , function 2 dummy_hashint4(int4, int8);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case319" value="create operator class myint_ops default for type myint using hash as   operator    1   =  (myint, myint),   function    1   myinthash(myint);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case320" value="create operator class part_test_int4_ops for type int4 using hash as operator 1 =, function 2 part_hashint4_noop(int4, int8);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case321" value="create operator class part_test_int4_ops2 for type int4 using hash as operator 1 ===, function 2 part_hashint4_noop(int4, int8);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case322" value="create operator class part_test_text_ops for type text using hash as operator 1 =, function 2 part_hashtext_length(text, int8);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case324" value="create or replace function array_elem_check(int) returns int as $$ declare   x orderedpair := '{1,2}'; begin   x[2] := $1;   return x[2]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case325" value="create or replace function array_elem_check(numeric) returns numeric as $$ declare   x mynums2; begin   x[1] := $1;   return x[1]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case326" value="create or replace function array_elem_check(numeric) returns numeric as $$ declare   x mynums; begin   x[1] := $1;   return x[1]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case327" value="create or replace function array_elem_check(numeric) returns numeric as $$ declare   x numeric(4,2)[1]; begin   x[1] := $1;   return x[1]; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case328" value="create or replace function array_to_set(anyarray) returns setof record as $$   select i AS &quot;index&quot;, $1[i] AS &quot;value&quot; from generate_subscripts($1, 1) i $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case329" value="create or replace function avg_transfn(state avg_state, n int) returns avg_state as $$ declare new_state avg_state; begin  raise notice 'avg_transfn called with %', n;  if state is null then   if n is not null then    new_state.total := n;    new_state.count := 1;    return new_state;   end if;   return null;  elsif n is not null then   state.total := state.total + n;   state.count := state.count + 1;   return state;  end if;  return null; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case331" value="create or replace function compos() returns compostype as $$ begin   return (1, 'hello')::compostype; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case332" value="create or replace function compos() returns compostype as $$ begin   return (1, 'hello'); end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case333" value="create or replace function compos() returns compostype as $$ begin   return (1, 'hello'::varchar); end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case334" value="create or replace function compos() returns compostype as $$ begin   return 1 + 1; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case335" value="create or replace function compos() returns compostype as $$ declare   v compostype; begin   v := (1, 'hello');   return v; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case336" value="create or replace function compos() returns compostype as $$ declare   v record; begin   v := (1, 'hello'::varchar);   return v; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case337" value="create or replace function compos() returns compostype as $$ declare x int := 42; begin   return x; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case338" value="create or replace function compos() returns int as $$ begin   return (1, 'hello')::compostype; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case339" value="create or replace function compos() returns int as $$ declare   v compostype; begin   v := (1, 'hello');   return v; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case340" value="create or replace function compos() returns setof compostype as $$ begin   for i in 1..3   loop     return next (1, 'hello'::varchar);   end loop;   return next null::compostype;   return next (2, 'goodbye')::compostype; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case341" value="create or replace function composrec() returns record as $$ begin   return (1, 'hello'); end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case342" value="create or replace function composrec() returns record as $$ declare   v record; begin   v := (1, 'hello');   return v; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case343" value="create or replace function conflict_test() returns setof int8_tbl as $$ declare r record;   q1 bigint := 42; begin   for r in select q1,q2 from int8_tbl loop     return next r;   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case344" value="create or replace function conflict_test() returns setof int8_tbl as $$ declare r record;   q1 bigint := 42; begin   for r in select q1,q2 from int8_tbl loop     return next r;   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case345" value="create or replace function dfunc(a varchar = 'def a', out _a varchar, numeric = NULL, out _c numeric) returns record as $$   select $1, $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case346" value="create or replace function dfunc(a varchar = 'def a', out _a varchar, x numeric = NULL, out _c numeric) returns record as $$   select $1, $2; $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case347" value="create or replace function dfunc(a variadic int[] default array[]::int[]) returns int as $$ select array_upper($1, 1) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case348" value="create or replace function dfunc(a variadic int[]) returns int as $$ select array_upper($1, 1) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case349" value="create or replace function dom_check(int) returns di as $$ declare d di; begin   d := $1;   return d; end $$ language plpgsql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case351" value="create or replace function doubledecrement(p1 pos_int) returns pos_int as $$ declare v pos_int := 0; begin     return p1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case352" value="create or replace function doubledecrement(p1 pos_int) returns pos_int as $$ declare v pos_int := 1; begin     v := p1 - 1;     return v - 1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case353" value="create or replace function dummy_hashint4(a int4, seed int8) returns int8 as $$ begin return (a + seed); end; $$ language 'plpgsql' immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case354" value="create or replace function dump_delete() returns trigger language plpgsql as $$   begin     raise notice 'trigger = %, old table = %',                  TG_NAME,                  (select string_agg(old_table::text, ', ' order by a) from old_table);     return null;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case355" value="create or replace function dump_insert() returns trigger language plpgsql as $$   begin     raise notice 'trigger = %, new table = %',                  TG_NAME,                  (select string_agg(new_table::text, ', ' order by a) from new_table);     return null;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case356" value="create or replace function dump_update() returns trigger language plpgsql as $$   begin     raise notice 'trigger = %, old table = %, new table = %',                  TG_NAME,                  (select string_agg(old_table::text, ', ' order by a) from old_table),                  (select string_agg(new_table::text, ', ' order by a) from new_table);     return null;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case357" value="create or replace function exc_using(int) returns void as $$ declare   c refcursor;   i int; begin   open c for execute 'select * from generate_series(1,$1)' using $1+1;   loop     fetch c into i;     exit when not found;     raise notice '%', i;   end loop;   close c;   return; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case358" value="create or replace function execute_into_test(varchar) returns record as $$ declare     _r record;     _rt eifoo%rowtype;     _v eitype;     i int;     j int;     k int; begin     execute 'insert into '||$1||' values(10,15)';     execute 'select (row).* from (select row(10,1)::eifoo) s' into _r;     raise notice '% %', _r.i, _r.y;     execute 'select * from '||$1||' limit 1' into _rt;     raise notice '% %', _rt.i, _rt.y;     execute 'select *, 20 from '||$1||' limit 1' into i, j, k;     raise notice '% % %', i, j, k;     execute 'select 1,2' into _v;     return _v; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case359" value="create or replace function explain_analyze_inc_sort_nodes(query text) returns jsonb language plpgsql as $$ declare   elements jsonb;   element jsonb;   matching_nodes jsonb := '[]'::jsonb; begin   execute 'explain (analyze, costs off, summary off, timing off, format ''json'') ' || query into strict elements;   while jsonb_array_length(elements) &gt; 0 loop     element := elements-&gt;0;     elements := elements - 0;     case jsonb_typeof(element)     when 'array' then       if jsonb_array_length(element) &gt; 0 then         elements := elements || element;       end if;     when 'object' then       if element ? 'Plan' then         elements := elements || jsonb_build_array(element-&gt;'Plan');         element := element - 'Plan';       else         if element ? 'Plans' then           elements := elements || jsonb_build_array(element-&gt;'Plans');           element := element - 'Plans';         end if;         if (element-&gt;&gt;'Node Type')::text = 'Incremental Sort' then           matching_nodes := matching_nodes || element;         end if;       end if;     end case;   end loop;   return matching_nodes; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case360" value="create or replace function explain_analyze_inc_sort_nodes_verify_invariants(query text) returns bool language plpgsql as $$ declare   node jsonb;   group_stats jsonb;   group_key text;   space_key text; begin   for node in select * from jsonb_array_elements(explain_analyze_inc_sort_nodes(query)) t loop     for group_key in select unnest(array['Full-sort Groups', 'Pre-sorted Groups']::text[]) t loop       group_stats := node-&gt;group_key;       for space_key in select unnest(array['Sort Space Memory', 'Sort Space Disk']::text[]) t loop         if (group_stats-&gt;space_key-&gt;'Peak Sort Space Used')::bigint &lt; (group_stats-&gt;space_key-&gt;'Peak Sort Space Used')::bigint then           raise exception '% has invalid max space &lt; average space', group_key;         end if;       end loop;     end loop;   end loop;   return true; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case361" value="create or replace function explain_analyze_inc_sort_nodes_without_memory(query text) returns jsonb language plpgsql as $$ declare   nodes jsonb := '[]'::jsonb;   node jsonb;   group_key text;   space_key text; begin   for node in select * from jsonb_array_elements(explain_analyze_inc_sort_nodes(query)) t loop     for group_key in select unnest(array['Full-sort Groups', 'Pre-sorted Groups']::text[]) t loop       for space_key in select unnest(array['Sort Space Memory', 'Sort Space Disk']::text[]) t loop         node := jsonb_set(node, array[group_key, space_key, 'Average Sort Space Used'], '&quot;NN&quot;', false);         node := jsonb_set(node, array[group_key, space_key, 'Peak Sort Space Used'], '&quot;NN&quot;', false);       end loop;     end loop;     nodes := nodes || node;   end loop;   return nodes; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case362" value="create or replace function explain_analyze_without_memory(query text) returns table (out_line text) language plpgsql as $$ declare   line text; begin   for line in     execute 'explain (analyze, costs off, summary off, timing off) ' || query   loop     out_line := regexp_replace(line, '\d+kB', 'NNkB', 'g');     return next;   end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case363" value="create or replace function f1(inout i int) as $$ begin   i := i+1; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case364" value="create or replace function find_hash(node json) returns json language plpgsql as $$ declare   x json;   child json; begin   if node-&gt;&gt;'Node Type' = 'Hash' then     return node;   else     for child in select json_array_elements(node-&gt;'Plans')     loop       x := find_hash(child);       if x is not null then         return x;       end if;     end loop;     return null;   end if; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case365" value="create or replace function forc01() returns void as $$ declare   c cursor for select * from forc_test; begin   for r in c loop     raise notice '%, %', r.i, r.j;     update forc_test set i = i * 100, j = r.j * 2 where current of c;   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case366" value="create or replace function forc01() returns void as $$ declare   c cursor(r1 integer, r2 integer)        for select * from generate_series(r1,r2) i;   c2 cursor        for select * from generate_series(41,43) i; begin   for r in c(5,7) loop     raise notice '% from %', r.i, c;   end loop;   for r in c(9,10) loop     raise notice '% from %', r.i, c;   end loop;   for r in c2 loop     raise notice '% from %', r.i, c2;   end loop;   raise notice 'after loop, c2 = %', c2;   c2 := 'special_name';   for r in c2 loop     raise notice '% from %', r.i, c2;   end loop;   raise notice 'after loop, c2 = %', c2;   c2 := null;   for r in c2 loop     raise notice '%', r.i;   end loop;   raise notice 'after loop, c2 = %', c2;   return; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case367" value="create or replace function forc01() returns void as $$ declare   c refcursor := 'fooled_ya';   r record; begin   open c for select * from forc_test;   loop     fetch c into r;     exit when not found;     raise notice '%, %', r.i, r.j;     update forc_test set i = i * 100, j = r.j * 2 where current of c;   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case368" value="create or replace function forc_bad() returns void as $$ declare   c refcursor; begin   for r in c loop     raise notice '%', r.i;   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case369" value="create or replace function foreach_test(anyarray) returns void as $$ declare r record; begin   foreach r in array $1   loop     raise notice '%', r;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case370" value="create or replace function foreach_test(anyarray) returns void as $$ declare x int; begin   foreach x slice 1 in array $1   loop     raise notice '%', x;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case371" value="create or replace function foreach_test(anyarray) returns void as $$ declare x int; y int; begin   foreach x, y in array $1   loop     raise notice 'x = %, y = %', x, y;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case372" value="create or replace function foreach_test(anyarray) returns void as $$ declare x int[]; begin   foreach x slice 1 in array $1   loop     raise notice '%', x;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case373" value="create or replace function foreach_test(anyarray) returns void as $$ declare x int[]; begin   foreach x slice 2 in array $1   loop     raise notice '%', x;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case374" value="create or replace function foreach_test(anyarray) returns void as $$ declare x xy_tuple[]; begin   foreach x slice 1 in array $1   loop     raise notice '%', x;   end loop;   end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case375" value="create or replace function func_part_create() returns trigger   language plpgsql as $$   begin     execute 'create table tab_part_create_1 partition of tab_part_create for values in (1)';     return null;   end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case376" value="create or replace function get_first_user() returns users as $$ SELECT * FROM users ORDER BY userid LIMIT 1; $$ language sql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case377" value="create or replace function get_users() returns setof users as $$ SELECT * FROM users ORDER BY userid; $$ language sql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case378" value="create or replace function hash_join_batches(query text) returns table (original int, final int) language plpgsql as $$ declare   whole_plan json;   hash_node json; begin   for whole_plan in     execute 'explain (analyze, format ''json'') ' || query   loop     hash_node := find_hash(json_extract_path(whole_plan, '0', 'Plan'));     original := hash_node-&gt;&gt;'Original Hash Batches';     final := hash_node-&gt;&gt;'Hash Batches';     return next;   end loop; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case379" value="create or replace function insert_tt(text) returns int as $$ insert into tt(data) values($1),($1||$1) returning f1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case380" value="create or replace function insert_tt2(text,text) returns setof int as $$ insert into tt(data) values($1),($2) returning f1 $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case381" value="create or replace function myfunc(int) returns text as $$ begin   set local work_mem = '2MB';   return current_setting('work_mem'); end $$ language plpgsql set work_mem = '1MB';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case382" value="create or replace function myfunc(int) returns text as $$ begin   set work_mem = '2MB';   perform 1/$1;   return current_setting('work_mem'); end $$ language plpgsql set work_mem = '1MB';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case383" value="create or replace function myfunc(int) returns text as $$ begin   set work_mem = '2MB';   return current_setting('work_mem'); end $$ language plpgsql set work_mem = '1MB';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case384" value="create or replace function outer_func(int) returns int as $$ declare   myresult int; begin   raise notice 'calling down into inner_func()';   myresult := inner_func($1);   raise notice 'inner_func() done';   return myresult; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case385" value="create or replace function outer_func(int) returns int as $$ declare   myresult int; begin   raise notice 'calling down into inner_func()';   myresult := inner_func($1);   raise notice 'inner_func() done';   return myresult; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case386" value="create or replace function outer_outer_func(int) returns int as $$ declare   myresult int; begin   raise notice 'calling down into outer_func()';   myresult := outer_func($1);   raise notice 'outer_func() done';   return myresult; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case387" value="create or replace function outer_outer_func(int) returns int as $$ declare   myresult int; begin   raise notice 'calling down into outer_func()';   myresult := outer_func($1);   raise notice 'outer_func() done';   return myresult; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case388" value="create or replace function parent_del_func()   returns trigger language plpgsql as $$ begin   delete from child where aid = old.aid;   if found then     delete from parent where aid = old.aid;     return n   end if;   return old; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case389" value="create or replace function part_hashint4_noop(value int4, seed int8) returns int8 as $$ select value + seed; $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case390" value="create or replace function part_hashtext_length(value text, seed int8) RETURNS int8 AS $$ select length(coalesce(value, ''))::int8 $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case391" value="create or replace function parted_conflict_update_func() returns trigger as $$ declare     r record; begin  for r in select * from inserted loop  raise notice 'a = %, b = %, c = %', r.a, r.b, r.c;  end loop;  return new; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case392" value="create or replace function parted_trigfunc() returns trigger language plpgsql as $$ begin   new.a = new.a + new.b;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case393" value="create or replace function parted_trigfunc() returns trigger language plpgsql as $$ begin   new.b = new.b + 1;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case394" value="create or replace function parted_trigfunc() returns trigger language plpgsql as $$ begin   new.c = new.c || ' did '|| TG_OP;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case395" value="create or replace function parted_trigfunc2() returns trigger language plpgsql as $$ begin   new.a = new.a + 1;   return new; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case396" value="create or replace function pleast(numeric) returns numeric as $$ begin   raise notice 'non-variadic function called';   return $1; end; $$ language plpgsql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case397" value="create or replace function pleast(variadic numeric[]) returns numeric as $$ declare aux numeric = $1[array_lower($1,1)]; begin   for i in array_lower($1,1)+1..array_upper($1,1) loop     if $1[i] &lt; aux then aux := $1[i]; end if;   end loop;   return aux; end; $$ language plpgsql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case398" value="create or replace function raise_test() returns void as $$ begin   perform 1/0; exception   when sqlstate '22012' then     raise notice using message = sqlstate;     raise sqlstate '22012' using message = 'substitute message'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case399" value="create or replace function raise_test() returns void as $$ begin   raise 'check me'      using errcode = '1234F', detail = 'some detail info';   exception     when others then       raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;       raise; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case400" value="create or replace function raise_test() returns void as $$ begin   raise 'check me'      using errcode = '1234F', detail = 'some detail info';   exception     when sqlstate '1234F' then       raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;       raise; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case401" value="create or replace function raise_test() returns void as $$ begin   raise 'check me'      using errcode = 'division_by_zero', detail = 'some detail info';   exception     when others then       raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;       raise; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case402" value="create or replace function raise_test() returns void as $$ begin   raise division_by_zero using detail = 'some detail info';   exception     when others then       raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;       raise; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case403" value="create or replace function raise_test() returns void as $$ begin   raise division_by_zero using message = 'custom' || ' message', errcode = '22012'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case404" value="create or replace function raise_test() returns void as $$ begin   raise division_by_zero using message = 'custom' || ' message'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case405" value="create or replace function raise_test() returns void as $$ begin   raise division_by_zero; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case406" value="create or replace function raise_test() returns void as $$ begin   raise exception 'custom exception'      using detail = 'some detail of custom exception',            hint = 'some hint related to custom exception'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case407" value="create or replace function raise_test() returns void as $$ begin   raise notice '% % %', 1, 2, 3      using errcode = '55001', detail = 'some detail info', hint = 'some hint';   raise '% % %', 1, 2, 3      using errcode = 'division_by_zero', detail = 'some detail info'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case408" value="create or replace function raise_test() returns void as $$ begin   raise notice 'some message' using message = 'custom' || ' message', errcode = '22012'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case409" value="create or replace function raise_test() returns void as $$ begin   raise sqlstate '1234F'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case410" value="create or replace function raise_test() returns void as $$ begin   raise using message = 'custom' || ' message', errcode = '22012'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case411" value="create or replace function raise_test() returns void as $$ begin   raise; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case412" value="create or replace function ret_query2(lim int) returns setof record_type as $$ begin     return query select md5(s.x::text), s.x, s.x &gt; 0                  from generate_series(-8, lim) s (x) where s.x % 2 = 0; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case413" value="create or replace function return_dquery() returns setof int as $$ begin   return query execute 'select * from (values(10),(20)) f';   return query execute 'select * from (values($1),($2)) f' using 40,50; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case414" value="create or replace function returnqueryf() returns setof tabwithcols as $$ begin   return query select * from tabwithcols;   return query execute 'select * from tabwithcols'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case415" value="create or replace function rngfuncbar() returns setof text as $$ select 'foo'::varchar union all select 'bar'::varchar ; $$ language sql stable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case416" value="create or replace function rngfuncbar(out integer, out numeric) as $$ select (1, 2) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case417" value="create or replace function rngfuncbar(out integer, out numeric) as $$ select (1, 2.1) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case418" value="create or replace function rngfuncbar(out integer, out numeric) as $$ select (1, 2.1, 3) $$ language sql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case419" value="create or replace function rttest() returns setof int as $$ begin   return query execute 'select 10 into no_such_table'; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case420" value="create or replace function rttest() returns setof int as $$ begin   return query select 10 into no_such_table; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case421" value="create or replace function sc_test() returns setof integer as $$ declare   c cursor for select * from generate_series(1, 10);   x integer; begin   open c;   loop       move relative 2 in c;       if not found then           exit;       end if;       fetch next from c into x;       if found then           return next x;       end if;   end loop;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case422" value="create or replace function sc_test() returns setof integer as $$ declare   c cursor for select * from generate_series(1, 10);   x integer; begin   open c;   move forward all in c;   fetch backward from c into x;   if found then     return next x;   end if;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case423" value="create or replace function sc_test() returns setof integer as $$ declare   c no scroll cursor for select f1 from int4_tbl;   x integer; begin   open c;   fetch last from c into x;   while found loop     return next x;     fetch prior from c into x;   end loop;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case424" value="create or replace function sc_test() returns setof integer as $$ declare   c refcursor;   x integer; begin   open c scroll for execute 'select f1 from int4_tbl';   fetch last from c into x;   while found loop     return next x;     fetch relative -2 from c into x;   end loop;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case425" value="create or replace function sc_test() returns setof integer as $$ declare   c refcursor;   x integer; begin   open c scroll for execute 'select f1 from int4_tbl';   fetch last from c into x;   while found loop     return next x;     move backward 2 from c;     fetch relative -1 from c into x;   end loop;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case426" value="create or replace function sc_test() returns setof integer as $$ declare   c refcursor;   x integer; begin   open c scroll for select f1 from int4_tbl;   fetch last from c into x;   while found loop     return next x;     fetch prior from c into x;   end loop;   close c; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case427" value="create or replace function shadowtest()  returns void as $$ declare f1 int; begin  declare  f1 int;  begin  end; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case428" value="create or replace function shadowtest()  returns void as $$ declare f1 int; c1 cursor (f1 int) for select 1; begin end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case429" value="create or replace function shadowtest(f1 int)  returns boolean as $$ declare f1 int; begin return 1; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case430" value="create or replace function shadowtest(f1 int)  returns boolean as $$ declare f1 int; begin return 1; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case431" value="create or replace function shadowtest(in1 int)  returns table (out1 int) as $$ declare in1 int; out1 int; begin end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case432" value="create or replace function shadowtest(in1 int)  returns table (out1 int) as $$ declare in1 int; out1 int; begin end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case433" value="create or replace function shadowtest(in1 int)  returns void as $$ declare in1 int; begin  declare  in1 int;  begin  end; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case434" value="create or replace function stacked_diagnostics_test() returns void as $$ declare _column_name text;         _constraint_name text;         _datatype_name text;         _table_name text;         _schema_name text; begin   raise exception using     column = '&gt;&gt;some column name&lt;&lt;',     constraint = '&gt;&gt;some constraint name&lt;&lt;',     datatype = '&gt;&gt;some datatype name&lt;&lt;',     table = '&gt;&gt;some table name&lt;&lt;',     schema = '&gt;&gt;some schema name&lt;&lt;'; exception when others then   get stacked diagnostics         _column_name = column_name,         _constraint_name = constraint_name,         _datatype_name = pg_datatype_name,         _table_name = table_name,         _schema_name = schema_name;   raise notice 'column %, constraint %, type %, table %, schema %',     _column_name, _constraint_name, _datatype_name, _table_name, _schema_name; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case435" value="create or replace function stacked_diagnostics_test() returns void as $$ declare _detail text;         _hint text;         _message text; begin   get stacked diagnostics         _message = message_text,         _detail = pg_exception_detail,         _hint = pg_exception_hint;   raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case436" value="create or replace function stacked_diagnostics_test() returns void as $$ declare _detail text;         _hint text;         _message text; begin   perform raise_test(); exception when others then   get stacked diagnostics         _message = message_text,         _detail = pg_exception_detail,         _hint = pg_exception_hint;   raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case437" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'insert into foo values(5,6) returning *' into x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case438" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'insert into foo values(7,8),(9,10) returning *' into x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case439" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'select * from foo where f1 = $1 or f1::text = $2' using 0, 'foo' into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case440" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'select * from foo where f1 = 0' into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case441" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'select * from foo where f1 = 3' into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case442" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'select * from foo where f1 &gt; $1' using 1 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case443" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'select * from foo where f1 &gt; 3' into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case444" value="create or replace function stricttest() returns void as $$ declare x record; begin   execute 'select * from foo where f1 &gt; 3' into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case445" value="create or replace function stricttest() returns void as $$ declare x record; begin   insert into foo values(5,6) returning * into x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case446" value="create or replace function stricttest() returns void as $$ declare x record; begin   insert into foo values(7,8),(9,10) returning * into x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case447" value="create or replace function stricttest() returns void as $$ declare x record; begin   select * from foo where f1 = 0 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case448" value="create or replace function stricttest() returns void as $$ declare x record; begin   select * from foo where f1 = 3 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case449" value="create or replace function stricttest() returns void as $$ declare x record; begin   select * from foo where f1 &gt; 3 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case450" value="create or replace function stricttest() returns void as $$ declare x record; begin   select * from foo where f1 &gt; 3 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case451" value="create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := $a$'Valame Dios!' dijo Sancho; 'no le dije yo a vuestra merced que mirase bien lo que hacia?'$a$; begin   select * from foo where f1 = p1 and f1::text = p3 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case452" value="create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := 'foo'; begin   select * from foo where f1 = p1 and f1::text = p3 into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case453" value="create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := 'foo'; begin   select * from foo where f1 &gt; p1 or f1::text = p3  into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case454" value="create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := 'foo'; begin   select * from foo where f1 &gt; p1 or f1::text = p3  into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case455" value="create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := 'foo'; begin   select * from foo where f1 &gt; p1 or f1::text = p3  into strict x;   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case456" value="create or replace function strtest() returns text as $$ begin   raise notice 'foo\\bar\041baz';   return 'foo\\bar\041baz'; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case457" value="create or replace function strtest() returns text as $$ begin   raise notice 'foo\\bar\041baz\';   return 'foo\\bar\041baz\'; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case458" value="create or replace function strtest() returns text as $$ begin   raise notice E'foo\\bar\041baz';   return E'foo\\bar\041baz'; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case459" value="create or replace function strtest() returns text as $$ begin   raise notice E'foo\\bar\041baz';   return E'foo\\bar\041baz'; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case460" value="create or replace function sum_transfn(state int4, n int4) returns int4 as $$ declare new_state int4; begin  raise notice 'sum_transfn called with %', n;  if state is null then   if n is not null then    new_state := n;    return new_state;   end if;   return null;  elsif n is not null then   state := state + n;   return state;  end if;  return null; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case461" value="create or replace function test_conv(   input IN bytea,   src_encoding IN text,   dst_encoding IN text,   result OUT bytea,   errorat OUT bytea,   error OUT text) language plpgsql as $$ declare   validlen int; begin   begin     select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, false);     errorat = NULL;     error := NULL;   exception when others then     error := sqlerrm;     select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, true);     errorat = substr(input, validlen + 1);   end;   return; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case462" value="create or replace function testrngfunc() returns rngfunc_type as $$   select 7.136178319899999964, 7.136178319899999964; $$ language sql volatile;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case463" value="create or replace function testrngfunc() returns setof rngfunc_type as $$   select 1, 2 union select 3, 4 order by 1; $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case464" value="create or replace function testrngfunc() returns setof rngfunc_type as $$   select 7.136178319899999964, 7.136178319899999964; $$ language sql volatile;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case465" value="create or replace function tftest(a1 int) returns table(a int, b int) as $$ begin   a := a1; b := a1 + 1;   return next;   a := a1 * 10; b := a1 * 10 + 1;   return next; end; $$ language plpgsql immutable strict;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case466" value="create or replace function trigger_ddl_func() returns trigger as $$ begin   create index on trigger_ddl_table (col2);   return new; end$$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case467" value="create or replace function trigger_function1() returns trigger language plpgsql AS $$ begin raise notice 'trigger = %, old_table = %',           TG_NAME,           (select string_agg(old_table::text, ', ' order by col1) from old_table); return null; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case468" value="create or replace function trigger_function2() returns trigger language plpgsql AS $$ begin raise notice 'trigger = %, new table = %',           TG_NAME,           (select string_agg(new_table::text, ', ' order by col1) from new_table); return null; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case469" value="create or replace function trigger_function3() returns trigger language plpgsql AS $$ begin raise notice 'trigger = %, old_table = %, new table = %',           TG_NAME,           (select string_agg(old_table::text, ', ' order by col1) from old_table),           (select string_agg(new_table::text, ', ' order by col1) from new_table); return null; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case470" value="create or replace function trigger_notice() returns trigger as $$   begin     raise notice 'trigger % on % % % for %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL;     if TG_LEVEL = 'ROW' then        return NEW;     end if;     return null;   end;   $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case471" value="create or replace function trigger_notice() returns trigger as $$   declare     arg1 text = TG_ARGV[0];     arg2 integer = TG_ARGV[1];   begin     raise notice 'trigger % on % % % for % args % %',   TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, arg1, arg2;     return null;   end;   $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case472" value="create or replace function trigger_notice_ab() returns trigger as $$   begin     raise notice 'trigger % on % % % for %: (a,b)=(%,%)',   TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL,   NEW.a, NEW.b;     if TG_LEVEL = 'ROW' then        return NEW;     end if;     return null;   end;   $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case473" value="create or replace function unnest1(anyarray) returns setof anyelement as $$ select $1[s] from generate_subscripts($1,1) g(s); $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case474" value="create or replace function unnest2(anyarray) returns setof anyelement as $$ select $1[s1][s2] from generate_subscripts($1,1) g1(s1),                    generate_subscripts($1,2) g2(s2); $$ language sql immutable;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case475" value="create or replace function unreserved_test() returns int as $$ declare   comment int := 21; begin   comment := comment * 2;   comment on function unreserved_test() is 'this is a test';   return comment; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case476" value="create or replace function unreserved_test() returns int as $$ declare   return int := 42; begin   return := return + 1;   return return; end $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case477" value="create or replace function vari(variadic int[]) returns void as $$ begin   for i in array_lower($1,1)..array_upper($1,1) loop     raise notice '%', $1[i];   end loop; end; $$ language plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case478" value="create or replace trigger my_trig   after insert on parted_trig   for each row execute procedure funcA();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case479" value="create or replace trigger my_trig   after insert on parted_trig   for each row execute procedure funcA();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case480" value="create or replace trigger my_trig   after insert on parted_trig   for each row execute procedure funcB();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case481" value="create or replace trigger my_trig   after insert on parted_trig   for each row execute procedure funcB();" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case482" value="create or replace trigger my_trig   after insert on parted_trig_1   for each row execute procedure funcB() insert into parted_trig (a) values (50);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case483" value="create or replace trigger my_trig   before insert on my_table   for each row execute procedure funcB() insert into my_table values (2);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case485" value="create procedure p1() language plpgsql as $$ begin   create table event_trigger_fire7 (a int); end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case486" value="create rule insert_tt_rule as on insert to tt do also   insert into tt_log values(new.*);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case487" value="create rule r1 as on update to rules_src do also   insert into rules_log values(old.*, 'old'), (new.*, 'new');" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case488" value="create rule r2 as on update to rules_src do also   values(old.*, 'old'), (new.*, 'new');" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case489" value="create rule rr as on update to rule_t1 do instead UPDATE rule_dest trgt   SET (f2[1], f1, tag) = (SELECT new.f2, new.f1, 'updated'::varchar)   WHERE trgt.f1 = new.f1 RETURNING new.*;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case490" value="create rule rrule as   on update to vview do instead (   insert into cchild (pid, descrip)     select old.pid, new.descrip where old.descrip isnull;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case491" value="create rule rtest_sys_del as on delete to rtest_system do also (  delete from rtest_interface where sysname = old.sysname;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case492" value="create rule rtest_sys_upd as on update to rtest_system do also (  update rtest_interface set sysname = new.sysname   where sysname = old.sysname;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case493" value="create rule silly as on delete to dcomptable do instead   update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case494" value="create rule silly as on delete to dcomptable do instead   update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1     where d1[1].i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case496" value="create statistics stts_1 (ndistinct) on a, b from stts_t1;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case497" value="create statistics stts_2 (ndistinct, dependencies) on a, b from stts_t1;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case498" value="create statistics stts_3 (ndistinct, dependencies, mcv) on a, b from stts_t1;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case499" value="create statistics stts_4 on b, c from stts_t2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case501" value="create statistics stts_s1.stts_foo on col1, col2 from stts_t3;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case503" value="create table agg_data_20k as select g from generate_series(0, 19999) g;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case504" value="create table agg_data_2k as select g from generate_series(0, 1999) g;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case505" value="create table agg_group_1 as select g%10000 as c1, sum(g::numeric) as c2, count(*) as c3   from agg_data_20k group by g%10000;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case506" value="create table agg_group_2 as select * from   (values (100), (300), (500)) as r(a),   lateral (     select (g/2)::numeric as c1,            array_agg(g::numeric) as c2,     count(*) as c3     from agg_data_2k     where g &lt; r.a     group by g/2) as s;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case507" value="create table agg_group_3 as select (g/2)::numeric as c1, sum(7::int4) as c2, count(*) as c3   from agg_data_2k group by g/2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case508" value="create table agg_group_4 as select (g/2)::numeric as c1, array_agg(g::numeric) as c2, count(*) as c3   from agg_data_2k group by g/2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case509" value="create table agg_hash_1 as select g%10000 as c1, sum(g::numeric) as c2, count(*) as c3   from agg_data_20k group by g%10000;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case510" value="create table agg_hash_2 as select * from   (values (100), (300), (500)) as r(a),   lateral (     select (g/2)::numeric as c1,            array_agg(g::numeric) as c2,     count(*) as c3     from agg_data_2k     where g &lt; r.a     group by g/2) as s;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case511" value="create table agg_hash_3 as select (g/2)::numeric as c1, sum(7::int4) as c2, count(*) as c3   from agg_data_2k group by g/2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case512" value="create table agg_hash_4 as select (g/2)::numeric as c1, array_agg(g::numeric) as c2, count(*) as c3   from agg_data_2k group by g/2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case514" value="create table bigger_than_it_looks as   select generate_series(1, 20000) as id, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case515" value="create table cities (  name  text,  population float8,  altitude int  -- (in ft) );" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case517" value="create table failpart partition of idxpart (b primary key) for values from (0) to (100);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case518" value="create table foo (with baz);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case519" value="create table foo (with ordinality);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case520" value="create table gs_data_1 as select g%1000 as g1000, g%100 as g100, g%10 as g10, g    from generate_series(0,1999) g;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case521" value="create table gs_group_1 as select g100, g10, sum(g::numeric), count(*), max(g::text) from gs_data_1 group by cube (g1000, g100,g10);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case522" value="create table gs_hash_1 as select g100, g10, sum(g::numeric), count(*), max(g::text) from gs_data_1 group by cube (g1000, g100,g10);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case524" value="create table idxpart1pk partition of idxpart (a primary key) for values from (0) to (100);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case526" value="create table join_bar as select generate_series(1, 10000) as id, 'xxxxx'::text as t;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case528" value="create table nv_parent (d date, check (false) no inherit not valid);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case529" value="create table parallel_write as     select length(stringu1) from tenk1 group by length(stringu1);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case531" value="create table parted_conflict_test_1 partition of parted_conflict_test (b unique) for values in (1, 2);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case532" value="create table pktable(ptest1 inet, ptest2 inet[], primary key(base1, ptest1), foreign key(base2, ptest2) references                                              pktable(base1, ptest1)) inherits (pktable_base);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case533" value="create table simple as   select generate_series(1, 20000) AS id, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case535" value="create temp table forc_test as   select n as i, n as j from generate_series(1,10) n;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case536" value="create temp table old_oids as   select relname, oid as oldoid, relfilenode as oldfilenode   from pg_class where relname like 'at_partitioned%';" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case537" value="create temp table patest0 (id, x) as   select x, x from generate_series(0,1000) x;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case539" value="create temp table q2 as select 0 as q2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case541" value="create temp table tt1 as select * from int8_tbl limit 2;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case543" value="create temp view usersview as SELECT * FROM ROWS FROM(get_users(), generate_series(10,11)) WITH ORDINALITY;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case544" value="create temp view v_cycle1 as with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle using path select f, t, label from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case545" value="create temp view v_cycle2 as with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle to 'Y' default 'N' using path select f, t, label from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case546" value="create temp view v_search as with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t set seq select f, t, label from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case548" value="create temporary view vw_ord as select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(1,2)) as z(a,b,c);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case550" value="create temporary view vw_rngfunc as   select * from rows from(getrngfunc9(1),                       getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),                       getrngfunc1(1))                 with ordinality as t1(a,b,c,d,e,f,g,n);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case553" value="create type ct1 as (f1 money);" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case558" value="create view insertconflictv as   select * from insertconflict with cascaded check option;" db-types="PostgreSQL"/>
    <sql-case id="low_create_by_postgresql_source_test_case559" value="create view tt201v as select   extract(day from now()) as extr,   (now(), '1 day'::interval) overlaps     (current_timestamp(2), '1 day'::interval) as o,   'foo' is normalized isn,   'foo' is nfkc normalized isnn,   normalize('foo') as n,   normalize('foo', nfkd) as nfkd,   overlay('foo' placing 'bar' from 2) as ovl,   overlay('foo' placing 'bar' from 2 for 3) as ovl2,   position('foo' in 'foobar') as p,   substring('foo' from 2 for 3) as s,   substring('foo' similar 'f' escape '#') as ss,   substring('foo' from 'oo') as ssf   trim(' ' from ' foo ') as bt,   trim(leading ' ' from ' foo ') as lt,   trim(trailing ' foo ') as rt,   trim(E'\\000'::bytea from E'\\000Tom\\000'::bytea) as btb,   trim(leading E'\\000'::bytea from E'\\000Tom\\000'::bytea) as ltb,   trim(trailing E'\\000'::bytea from E'\\000Tom\\000'::bytea) as rtb;" db-types="PostgreSQL"/>
    <sql-case id="low_delete_by_postgresql_source_test_case1" value="delete from;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case1" value="do $$   declare r integer;   begin     select dfunc(a=&gt;-- comment       1) into r;     raise info 'r = %', r;   end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case2" value="do $$ BEGIN   EXECUTE 'CREATE COLLATION test0 (provider = icu, locale = ' ||           quote_literal(current_setting('lc_collate')) || ');'; END $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case3" value="do $$ BEGIN   EXECUTE 'CREATE COLLATION test1 (provider = icu, lc_collate = ' ||           quote_literal(current_setting('lc_collate')) ||           ', lc_ctype = ' ||           quote_literal(current_setting('lc_ctype')) || ');'; END $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case4" value="do $$ begin   assert 1=0 end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case5" value="do $$ begin   assert 1=0 end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case6" value="do $$ begin   assert 1=0, 'unhandled assertion'; exception when others then   nul end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case7" value="do $$ begin   assert 1=1 end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case8" value="do $$ begin   assert NULL end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case9" value="do $$ begin   raise notice 'foo';   raise exception 'bar'; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case10" value="do $$ begin   raise notice 'foo';   raise exception 'bar'; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case11" value="do $$ begin   raise notice 'foo';   raise exception 'bar'; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case12" value="do $$ declare   t test_01; begin   select 1 into  end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case13" value="do $$ declare   t test_01; begin   select 1, 2 into t   raise notice 'ok';   select 1, 2, 3 into  end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case14" value="do $$ declare   x int;   y int; begin   select * from test_01 into x,    raise notice 'ok';   select * from test_01 into x;  end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case15" value="do $$ declare   x int;   y int; begin   select 1 into x, y;   select 1,2 into x, y;   select 1,2,3 into x, y; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case16" value="do $$ declare   x int;   y int; begin   select 1 into x, y;   select 1,2 into x, y;   select 1,2,3 into x, y; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case17" value="do $$ declare a int[] := array[1,2]; begin   a := a || 3;   raise notice 'a = %', a; end$$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case18" value="do $$ declare v_test plpgsql_arr_domain := array[1]; begin   v_test := 0 || v_test end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case19" value="do $$ declare v_test plpgsql_arr_domain; begin   v_test := array[1];   v_test := v_test || 2; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case20" value="do $$ declare v_test plpgsql_domain := 1; begin   v_test := 0 end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case21" value="do $$ declare v_test plpgsql_domain; begin   v_test := 1; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case22" value="do $$ declare var text := 'some value'; begin   assert 1=0, format('assertion failed, var = &quot;%s&quot;', var); end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case23" value="do $$ declare x int := 42;         y int := x + 1; begin   raise notice 'x = %, y = %', x, y; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case24" value="do $$ declare x int := 42; begin   declare y int := x + 1;           x int := x + 2;           z int := x * 10;   begin     raise notice 'x = %, y = %, z = %', x, y, z;   end; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case25" value="do $$ declare x int := x + 1;  begin   raise notice 'x = %', x; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case26" value="do $$ declare x int; begin   select v from generate_series(1,2) g(v) into x; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case27" value="do $$ declare x int; begin   select v from generate_series(1,2) g(v) into x; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case29" value="do $$ declare x text[]; begin x := '{1.23, 4.56}'::numeric[]; end $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case30" value="do $$ declare y int := x + 1;          x int := 42; begin   raise notice 'x = %, y = %', x, y; end; $$;" db-types="PostgreSQL"/>
    <sql-case id="low_do_by_postgresql_source_test_case31" value="do $outer$ begin   for i in 1..10 loop    begin     execute $ex$       do $$       declare x int = 0;       begin         x := 1 / x;       end;       $$;     $ex$;   exception when division_by_zero then     raise notice 'caught division by zero';   end;   end loop; end; $outer$;" db-types="PostgreSQL"/>
    <sql-case id="low_drop_by_postgresql_source_test_case14" value="drop function 314159();" db-types="PostgreSQL"/>
    <sql-case id="low_drop_by_postgresql_source_test_case17" value="drop index;" db-types="PostgreSQL"/>
    <sql-case id="low_drop_by_postgresql_source_test_case37" value="drop rewrite rule nonesuch;" db-types="PostgreSQL"/>
    <sql-case id="low_drop_by_postgresql_source_test_case86" value="drop tuple rule nonesuch;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case2" value="execute p1;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case4" value="execute p2;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case6" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case8" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case10" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case12" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case14" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case16" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case18" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case20" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case22" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case24" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case26" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case28" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case30" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case32" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case34" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case36" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case38" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case40" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case42" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case44" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case46" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case48" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case50" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case52" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case54" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case56" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case58" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case60" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case62" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case64" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case66" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case68" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case70" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case72" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case74" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case76" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case78" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case80" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case82" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case84" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case86" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case88" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case90" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case92" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case94" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case96" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case98" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case100" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case102" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case104" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case106" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case108" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case110" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case112" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case114" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case116" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case118" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case120" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case122" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_execute_by_postgresql_source_test_case124" value="execute q;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case2" value="explain (costs off) create table parallel_write as     select length(stringu1) from tenk1 group by length(stringu1);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case4" value="explain (costs off) select * from hp_contradict_test where a === 1 and b === 1 and a is null;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case6" value="explain (costs off) select * from int4_tbl o where exists   (select 1 from int4_tbl i where i.f1=o.f1 limit null);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case8" value="explain (costs off) select * from pp_intrangepart where a = '[1,2]'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case9" value="explain (costs off) select count(*) from test_range_elem where int4range(i,i+10) &lt;@ int4range(10,30);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case10" value="explain (costs off) select ir from test_range_spgist where ir -|- int4range(10,20) order by ir;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case11" value="explain (costs off) select p from   (values (box(point(0,0), point(0.5,0.5))),           (box(point(0.5,0.5), point(0.75,0.75))),           (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb) cross join lateral   (select p from gist_tbl where p &lt;@ bb order by p &lt;-&gt; bb[0] limit 2) ss;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case12" value="explain (costs off) select x from (values (100::money), (200::money)) _(x) union select x from (values (100::money), (300::money)) _(x);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case13" value="explain (costs off) select x from (values (100::money), (200::money)) _(x) union select x from (values (100::money), (300::money)) _(x);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case14" value="explain (costs off) select x from (values (array[100::money]), (array[200::money])) _(x) union select x from (values (array[100::money]), (array[300::money])) _(x);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case15" value="explain (costs off) select x from (values (row(100::money)), (row(200::money))) _(x) union select x from (values (row(100::money)), (row(300::money))) _(x);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case16" value="explain (costs off) select x from (values (row(100::money)::ct1), (row(200::money)::ct1)) _(x) union select x from (values (row(100::money)::ct1), (row(300::money)::ct1)) _(x);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case17" value="explain (verbose, costs off)   update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case18" value="explain (verbose, costs off)   update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1     where d1[1].i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case19" value="explain (verbose, costs off) select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null),              (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b);" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case20" value="explain (verbose, costs off) with r(a,b) as materialized   (values (1,row(1,2)), (1,row(null,null)), (1,null),           (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case21" value="explain (verbose, costs off) with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case22" value="explain (verbose, costs off) with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search breadth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_explain_by_postgresql_source_test_case23" value="explain (verbose, costs off) with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case1" value="insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)   do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]   returning pk, f1;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case2" value="insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)   do update set f1[1] = excluded.f1[1],     f1[2] = excluded.f1[2],     f1[3] = excluded.f1[3]   returning pk, f1;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case8" value="insert into dcomptable (d1[1]) values(row(9,10));" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case10" value="insert into def_test default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case12" value="insert into def_test default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case14" value="insert into def_view_test default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case16" value="insert into defaulttest default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case18" value="insert into defaulttest default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case21" value="insert into domdeftest default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case23" value="insert into domnotnull default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case38" value="insert into gstest4 values (1,1,b'0000','1'), (2,2,b'0001','1'),        (3,4,b'0010','2'), (4,8,b'0011','2'),        (5,16,b'0000','2'), (6,32,b'0001','2'),        (7,64,b'0010','1'), (8,128,b'0011','1');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case40" value="insert into i8r_array values (42, array[int8range(1,10), int8range(2,20)]);" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case43" value="insert into inserttest (f2[1], f2[2]) select 7,8;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case45" value="insert into inserttest (f2[1], f2[2]) values (1,default);" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case48" value="insert into inserttest (f3.if2[1], f3.if2[2]) select 'bear', 'beer';" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case50" value="insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case52" value="insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar'), ('baz', 'quux');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case59" value="insert into onerow default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case61" value="insert into parted_conflict values (50, 'cincuenta', 2)   on conflict (a, b) do update set (a, b, c) = row(excluded.*)   where parted_conflict = (50, text 'cincuenta', 1) and         excluded = (50, text 'cincuenta', 2);" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case69" value="insert into public.brintest_multi (float8col) values (real 'nan');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case70" value="insert into reservations values (1, daterange('2018-07-01', '2018-07-07')), (1, daterange('2018-07-07', '2018-07-14')), (1, daterange('2018-07-20', '2018-07-22')), (2, daterange('2018-07-01', '2018-07-03')), (3, NULL), (4, NULL), (4, NULL), (5, NULL), (5, daterange('2018-07-01', '2018-07-03')), (6, daterange('2018-07-01', '2018-07-07')), (6, daterange('2018-07-05', '2018-07-10')), (7, daterange('2018-07-01', '2018-07-07')), (7, daterange('2018-07-07', '2018-07-14')), (8, 'empty'::daterange) ;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case94" value="insert into spgist_text_tbl (id, t) select g, 'f' || repeat('o', 100) || g from generate_series(1, 10000) g union all select g, 'baaaaaaaaaaaaaar' || g from generate_series(1, 1000) g;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case107" value="insert into test_multirange_gist select int4multirange(int4range(NULL, g*10, '(]'), int4range(g*10, g*20, '(]')) from generate_series(1,100) g;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case109" value="insert into test_multirange_gist select int4multirange(int4range(g, g+10),int4range(g+20, g+30),int4range(g+40, g+50)) from generate_series(1,2000) g;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case112" value="insert into test_range_excl   values(int4range(123, 123, '[]'), int4range(1, 1, '[]'), '[2010-01-02 10:00, 2010-01-02 11:00)');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case113" value="insert into test_range_excl   values(int4range(123, 123, '[]'), int4range(2, 2, '[]'), '[2010-01-02 11:00, 2010-01-02 12:00)');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case114" value="insert into test_range_excl   values(int4range(123, 123, '[]'), int4range(3, 3, '[]'), '[2010-01-02 10:10, 2010-01-02 11:00)');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case115" value="insert into test_range_excl   values(int4range(124, 124, '[]'), int4range(3, 3, '[]'), '[2010-01-02 10:10, 2010-01-02 11:10)');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case116" value="insert into test_range_excl   values(int4range(125, 125, '[]'), int4range(1, 1, '[]'), '[2010-01-02 10:10, 2010-01-02 11:00)');" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case118" value="insert into test_range_gist select 'empty'::int4range from generate_series(1,500) g;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case125" value="insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case133" value="insert into trigtest default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case135" value="insert into trigtest default values;" db-types="PostgreSQL"/>
    <sql-case id="low_insert_by_postgresql_source_test_case137" value="insert into trigtest default values;" db-types="PostgreSQL"/>
    <sql-case id="low_prepare_by_postgresql_source_test_case1" value="prepare q as   select 'some&quot;text' as &quot;a&amp;title&quot;, E'  &lt;foo&gt;\n&lt;bar&gt;' as &quot;junk&quot;,          '   ' as &quot;empty&quot;, n as int   from generate_series(1,2) as n;" db-types="PostgreSQL"/>
    <sql-case id="low_prepare_by_postgresql_source_test_case2" value="prepare q as   select 'some\more_text' as &quot;a$title&quot;, E'  #&lt;foo&gt;%&amp;^~|\n{bar}' as &quot;junk&quot;,          '   ' as &quot;empty&quot;, n as int   from generate_series(1,2) as n;" db-types="PostgreSQL"/>
    <sql-case id="low_prepare_by_postgresql_source_test_case3" value="prepare q as   select 'some\more_text' as &quot;a$title&quot;, E'  #&lt;foo&gt;%&amp;^~|\n{bar}' as &quot;junk&quot;,          '   ' as &quot;empty&quot;, n as int   from generate_series(1,2) as n;" db-types="PostgreSQL"/>
    <sql-case id="low_prepare_by_postgresql_source_test_case4" value="prepare q as   select 'some\text' as &quot;a\title&quot;, E'  &lt;foo&gt;\n&lt;bar&gt;' as &quot;junk&quot;,          '   ' as &quot;empty&quot;, n as int   from generate_series(1,2) as n;" db-types="PostgreSQL"/>
    <sql-case id="low_prepare_by_postgresql_source_test_case5" value="prepare q as   select 'some|text' as &quot;a|title&quot;, '        ' as &quot;empty &quot;, n as int   from generate_series(1,2) as n;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case3" value="select '[2010-01-01 01:00:00 -05, 2010-01-01 02:00:00 -08)'::tstzrange;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case5" value="select '\' as d1, '' as d2;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case7" value="select 'empty'::numrange &lt;&lt; nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case9" value="select 'foo' ilike all (array['F%', '%O']);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case10" value="select 'foo' ilike any (array['%A', '%O']);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case12" value="select '{(10,20),(30,40),(50,60)}'::nummultirange @&gt; '(52,56)'::numrange;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case13" value="select '{nan, 1, nan}'::line = '{nan, 1, nan}'::line as true,     '{nan, 1, nan}'::line = '{nan, 2, nan}'::line as false;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case15" value="select (dfunc('Hello World', 20, '2009-07-25'::date)).*;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case17" value="select (dfunc(10,20,30)).*;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case19" value="select (r).* from (select row(1, 2.0) as r) ss;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case21" value="select (select (a.*)::text) from view_a a;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case22" value="select (w).size = :segsize as ok from (select pg_ls_waldir() w) ss where length((w).name) = 24 limit 1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case30" value="select * from inoutparam_succeed(int4range(1,2));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case32" value="select * from int8_tbl i, lateral(values(i.*::int8_tbl)) ss;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case34" value="select * from int8_tbl offset (case when random() &lt; 0.5 then null::bigint end);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case36" value="select * from mr_outparam_succeed(int4multirange(int4range(1,2)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case38" value="select * from mr_outparam_succeed3(int4multirange(int4range(1,2)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case40" value="select * from mr_table_succeed(123, int4multirange(int4range(1,11)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case42" value="select * from nummultirange_test2 where nmr = nummultirange(numrange(1.1, 2.3));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case44" value="select * from numrange_test where nr &lt; numrange(0.0, 1.0,'[]');" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case46" value="select * from numrange_test where nr &gt; numrange(-1001.0, -1000.0,'[]');" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case48" value="select * from numrange_test where nr &gt; numrange(1000.0, 1000.0,'[]');" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case50" value="select * from numrange_test2 where nr = numrange(1.1, 2.2);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case52" value="select * from outparam2_succeed(int4range(1,11));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case54" value="select * from outparam_succeed2(int4range(int4range(1,2)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case56" value="select * from pendtest where 'ips:*'::tsquery @@ ts;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case58" value="select * from pendtest where 'ipsu:*'::tsquery @@ ts;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case60" value="select * from rows from(getrngfunc1(1),getrngfunc2(1),getrngfunc3(1),getrngfunc4(1),getrngfunc5(1),                     getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),                     getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),                     getrngfunc8(1),getrngfunc9(1))               with ordinality as t1(a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case61" value="select * from rows from(getrngfunc9(1),getrngfunc8(1),                     getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),                     getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),                     getrngfunc5(1),getrngfunc4(1),getrngfunc3(1),getrngfunc2(1),getrngfunc1(1))               with ordinality as t1(a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case63" value="select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(101,102)) with ordinality as z(a,b,c,ord);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case65" value="select * from table_succeed(int4range(1,11));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case66" value="select 0\; copy test3 from stdin\; copy test3 from stdin\; select 1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case68" value="select ARRAY[numrange(1.1, 1.2), numrange(12.3, 155.5)];" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case70" value="select ROW('ABC','DEF') ~&gt;=~ ROW('DEF','ABC') as false;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case72" value="select ROW(1,2) &lt; ROW(1,3) as true;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case74" value="select ROW(1,2,3) &lt; ROW(1,3,NULL) as true;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case76" value="select ROW(1,2,3) &lt;&gt; ROW(1,NULL,4) as true;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case78" value="select ROW(11,'ABC') &lt; ROW(11,'DEF') as true;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case80" value="select ROW(12,'ABC') &gt; ROW(11,'DEF') as true;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case81" value="select a, b, c from (values (1, 2, 3), (4, null, 6), (7, 8, 9)) as t (a, b, c) group by all rollup(a, b), rollup(a, c) order by a, b, c;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case82" value="select a, b, c from (values (1, 2, 3), (4, null, 6), (7, 8, 9)) as t (a, b, c) group by distinct rollup(a, b), rollup(a, c) order by a, b, c;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case84" value="select anyarray_anymultirange_func(ARRAY[1,2], nummultirange(numrange(10,20)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case86" value="select anyarray_anyrange_func(ARRAY[1,2], numrange(10,20));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case88" value="select anycompatiblearray_anycompatiblemultirange_func(ARRAY[1,2], multirange(numrange(10,20)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case90" value="select anycompatiblearray_anycompatiblerange_func(ARRAY[1,2], int4range(10,20));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case92" value="select anycompatiblearray_anycompatiblerange_func(ARRAY[1.1,2], int4range(10,20));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case94" value="select anycompatiblerange_anycompatiblemultirange_func(numrange(1,2), multirange(int4range(10,20)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case96" value="select array(select row(v.a,s1.*) from (select two,four, count(*) from onek group by cube(two,four) order by two,four) s1) from (values (1),(2)) v(a);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case98" value="select conname, obj_description(oid, 'pg_constraint') as desc   from pg_constraint where conname like 'at_partitioned%'   order by conname;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case99" value="select conname, obj_description(oid, 'pg_constraint') as desc   from pg_constraint where conname like 'at_partitioned%'   order by conname;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case102" value="select count(*) from test_multirange_gist where mr &amp;&amp; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case104" value="select count(*) from test_multirange_gist where mr &amp;&amp; int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case106" value="select count(*) from test_multirange_gist where mr &amp;&lt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case110" value="select count(*) from test_multirange_gist where mr &amp;&lt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case112" value="select count(*) from test_multirange_gist where mr &amp;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case114" value="select count(*) from test_multirange_gist where mr &amp;&gt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case118" value="select count(*) from test_multirange_gist where mr &amp;&gt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case120" value="select count(*) from test_multirange_gist where mr &amp;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case122" value="select count(*) from test_multirange_gist where mr -|- 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case124" value="select count(*) from test_multirange_gist where mr -|- int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case126" value="select count(*) from test_multirange_gist where mr -|- int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case128" value="select count(*) from test_multirange_gist where mr &lt;&lt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case132" value="select count(*) from test_multirange_gist where mr &lt;&lt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case134" value="select count(*) from test_multirange_gist where mr &lt;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case136" value="select count(*) from test_multirange_gist where mr &lt;@ 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case138" value="select count(*) from test_multirange_gist where mr = int4multirange(int4range(10,20), int4range(30,40), int4range(50,60));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case140" value="select count(*) from test_multirange_gist where mr &gt;&gt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case144" value="select count(*) from test_multirange_gist where mr &gt;&gt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case146" value="select count(*) from test_multirange_gist where mr &gt;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case148" value="select count(*) from test_multirange_gist where mr @&gt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case150" value="select count(*) from test_multirange_gist where mr @&gt; int4multirange(int4range(10,20), int4range(30,40));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case152" value="select count(*) from test_range_elem where int4range(i,i+10) &lt;@ int4range(10,30);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case154" value="select count(*) from test_range_gist where ir &amp;&amp; int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case156" value="select count(*) from test_range_gist where ir &amp;&lt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case158" value="select count(*) from test_range_gist where ir &amp;&lt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case160" value="select count(*) from test_range_gist where ir &amp;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case162" value="select count(*) from test_range_gist where ir &amp;&gt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case164" value="select count(*) from test_range_gist where ir &amp;&gt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case166" value="select count(*) from test_range_gist where ir &amp;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case168" value="select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case170" value="select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case172" value="select count(*) from test_range_gist where ir -|- int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case174" value="select count(*) from test_range_gist where ir &lt;&lt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case176" value="select count(*) from test_range_gist where ir &lt;&lt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case178" value="select count(*) from test_range_gist where ir &lt;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case180" value="select count(*) from test_range_gist where ir = int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case182" value="select count(*) from test_range_gist where ir = int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case184" value="select count(*) from test_range_gist where ir &gt;&gt; int4multirange(int4range(100,200), int4range(400,500));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case186" value="select count(*) from test_range_gist where ir &gt;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case188" value="select count(*) from test_range_gist where ir &gt;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case190" value="select count(*) from test_range_gist where ir @&gt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case192" value="select count(*) from test_range_gist where ir @&gt; int4multirange(int4range(10,20), int4range(30,40));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case194" value="select count(*) from test_range_gist where ir @&gt; int4multirange(int4range(10,20), int4range(30,40));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case196" value="select count(*) from test_range_spgist where ir &amp;&amp; int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case198" value="select count(*) from test_range_spgist where ir &amp;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case200" value="select count(*) from test_range_spgist where ir &amp;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case202" value="select count(*) from test_range_spgist where ir &amp;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case204" value="select count(*) from test_range_spgist where ir -|- int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case206" value="select count(*) from test_range_spgist where ir -|- int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case208" value="select count(*) from test_range_spgist where ir &lt;&lt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case210" value="select count(*) from test_range_spgist where ir = int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case212" value="select count(*) from test_range_spgist where ir = int4range(10,20);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case214" value="select count(*) from test_range_spgist where ir &gt;&gt; int4range(100,500);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case216" value="select count(*) from test_range_spgist where ir @&gt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case218" value="select count(*) from test_range_spgist where ir @&gt; 'empty'::int4range;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case220" value="select description, (test_conv(inbytes, 'utf8', 'utf8')).* from utf8_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case222" value="select description, inbytes, (test_conv(inbytes, 'big5', 'mule_internal')).* from big5_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case224" value="select description, inbytes, (test_conv(inbytes, 'euc_jis_2004', 'euc_jis_2004')).* from euc_jis_2004_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case226" value="select description, inbytes, (test_conv(inbytes, 'gb18030', 'gb18030')).* from gb18030_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case228" value="select description, inbytes, (test_conv(inbytes, 'iso8859-5', 'iso8859-5')).* from iso8859_5_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case230" value="select description, inbytes, (test_conv(inbytes, 'iso8859-5', 'utf8')).* from iso8859_5_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case232" value="select description, inbytes, (test_conv(inbytes, 'mule_internal', 'big5')).* from mic_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case234" value="select description, inbytes, (test_conv(inbytes, 'mule_internal', 'iso8859-5')).* from mic_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case236" value="select description, inbytes, (test_conv(inbytes, 'mule_internal', 'mule_internal')).* from mic_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case238" value="select description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'euc_jis_2004')).* from shiftjis2004_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case240" value="select description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'utf8')).* from shiftjis2004_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case242" value="select description, inbytes, (test_conv(inbytes, 'utf8', 'gb18030')).* from utf8_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case244" value="select description, inbytes, (test_conv(inbytes, 'utf8', 'latin1')).* from utf8_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case246" value="select description, inbytes, (test_conv(inbytes, 'utf8', 'latin5')).* from utf8_inputs;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case247" value="select dfunc('a'::text, 'b', flag =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case248" value="select dfunc('a'::text, 'b', flag =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case250" value="select dfunc(a =&gt; 'a'::text, b =&gt; 'b', flag =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case251" value="select dfunc(a =&gt; 'a'::text, flag =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case252" value="select dfunc(a =&gt; 'a'::text, flag =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case254" value="select dfunc(a =&gt;+1);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case255" value="select dfunc(a =&gt;--comment to be removed by psql   1);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case257" value="select dfunc(a =&gt;/**/1);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case258" value="select dfunc(b =&gt; 'b'::text, a =&gt; 'a');" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case259" value="select dfunc(b =&gt; 'b'::text, a =&gt; 'a', flag =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case262" value="select f1(2, 4) as int, f1(2, 4.5) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case264" value="select f1(42) as int, f1(4.5) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case266" value="select f1(array[2,4]) as int, f1(array[4.5, 7.7]) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case268" value="select f1(int4range(42, 49), 11, 2::smallint) as int, f1(float8range(4.5, 7.8), 7.8, 11::real) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case269" value="select f1(int4range(42, 49), 11, 4.5) as fail;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case272" value="select f1, f1[1], (f1[1])[1] from dposintatable;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case279" value="select format('create index on gexec_test(%I)', attname) from pg_attribute where attrelid = 'gexec_test'::regclass and attnum &gt; 0 order by attnum \gexec select 'select 1 as ones', 'select x.y, x.y*2 as double from generate_series(1,4) as x(y)' union all select 'drop table gexec_test', NULL union all select 'drop table gexec_test', 'select ''2000-01-01''::date as party_over' \gexec \unset FETCH_COUNT prepare q as select array_to_string(array_agg(repeat('x',2*n)),E'\n') as &quot;ab c&quot;, array_to_string(array_agg(repeat('y',20-2*n)),E'\n') as &quot;a bc&quot; from generate_series(1,10) as n(n) group by n&gt;1 order by n&gt;1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case280" value="select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between              1.1 preceding and 'NaN' select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              1 preceding and 1 following);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case281" value="select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              1.1 preceding and 'NaN' select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              1 preceding and 1 following);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case282" value="select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              1 preceding and 1.1::float8 select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              'inf' preceding and 'inf' following);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case283" value="select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              1.1 preceding and 'NaN' create temp table datetimes(     id int,     f_time time,     f_timetz timetz,     f_interval interval,     f_timestamptz timestamptz,     f_timestamp timestamp );" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case285" value="select jsonb_path_exists('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, 3]', 'lax $[*].a', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case287" value="select jsonb_path_exists('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, 3]', 'strict $[*].a', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case289" value="select jsonb_path_match('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, 3]', 'lax exists($[*].a)', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case291" value="select jsonb_path_match('[{&quot;a&quot;: 1}, {&quot;a&quot;: 2}, 3]', 'strict exists($[*].a)', silent =&gt; false);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case293" value="select jsonb_path_query('&quot;-inf&quot;', '$.double()', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case295" value="select jsonb_path_query('&quot;a&quot;', '-$', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case297" value="select jsonb_path_query('1', '$ + &quot;2&quot;', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case299" value="select jsonb_path_query('1', 'strict $.a', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case301" value="select jsonb_path_query('1', 'strict $[1]', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case303" value="select jsonb_path_query('[1,&quot;2&quot;,3]', '+$', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case305" value="select jsonb_path_query('[1,2,3]', 'strict $[*].a', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case307" value="select jsonb_path_query('[1]', 'strict $[1]', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case309" value="select jsonb_path_query('[]', 'strict $.double()', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case311" value="select jsonb_path_query('[]', 'strict $[1]', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case313" value="select jsonb_path_query('[{},1]', '$[*].keyvalue()', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case315" value="select jsonb_path_query('true', '$.double()', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case317" value="select jsonb_path_query('{&quot;a&quot;: [1, 2]}', 'lax $.a * 3', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case319" value="select jsonb_path_query('{}', '$.double()', silent =&gt; true);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case321" value="select length(md5((f1[1]).c2)) from dest;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case323" value="select length(md5((f1[1]).c2)) from dest;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case326" value="select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'::bytea) = 'd174ab98d277d9f5a5611c2c9f419d9f' AS &quot;TRUE&quot;;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case328" value="select md5('abc'::bytea) = '900150983cd24fb0d6963f7d28e17f72' AS &quot;TRUE&quot;;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case331" value="select min_scale(numeric 'NaN') is NULL;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case332" value="select min_scale(numeric 'inf') is NULL;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case334" value="select multirangetypes_sql(int4multirange(int4range(1,10)), ARRAY[2,20]);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case335" value="select multirangetypes_sql(nummultirange(numrange(1,10)), ARRAY[2,20]);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case338" value="select nummultirange() &lt;&lt; nummultirange(numrange(1,2));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case340" value="select nummultirange() &gt;&gt; 'empty'::numrange;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case343" value="select nummultirange() &gt;&gt; numrange(1,2);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case345" value="select nummultirange(numrange(0,2)) &lt;&lt; numrange(3,6);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case347" value="select nummultirange(numrange(0,4)) &gt;&gt; numrange(1,2);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case349" value="select nummultirange(numrange(1,2)) &lt;&lt; nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case351" value="select nummultirange(numrange(1,2)) &lt;&lt; nummultirange(numrange(3,4));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case353" value="select nummultirange(numrange(1,2)) &gt;&gt; nummultirange();" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case355" value="select nummultirange(numrange(1,2), numrange(4,5)) &lt;&lt; nummultirange(numrange(3,4), numrange(7,8));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case357" value="select nummultirange(numrange(3,4)) &lt;&lt; numrange(3,6);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case359" value="select nummultirange(numrange(3,4)) &gt;&gt; numrange(1,2);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case361" value="select nummultirange(numrange(3,4), numrange(7,8)) &gt;&gt; nummultirange(numrange(1,2), numrange(4,5));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case372" value="select p from   (values (box(point(0,0), point(0.5,0.5))),           (box(point(0.5,0.5), point(0.75,0.75))),           (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb) cross join lateral   (select p from gist_tbl where p &lt;@ bb order by p &lt;-&gt; bb[0] limit 2) ss;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case374" value="select pg_typeof((f1[1])[1]) from dposintatable;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case376" value="select pg_typeof(f1[1][1]) from dposintatable;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case378" value="select polyf(42) as int, polyf(4.5) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case380" value="select polyf(array[2,4]) as int, polyf(array[4.5, 7.7]) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case382" value="select polyf(int4multirange(int4range(1,10), int4range(20,30)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case384" value="select polyf(int4multirange(int4range(1,10), int4range(20,30)));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case386" value="select polyf(int4range(1,10));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case388" value="select polyf(int4range(42, 49)) as int, polyf(float8range(4.5, 7.8)) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case390" value="select polyf(int4range(42, 49), 11, 4.5) as fail;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case392" value="select polyf(multirange(int4range(42, 49)), 11, 2::smallint) as int, polyf(multirange(float8range(4.5, 7.8)), 7.8, 11::real) as num;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case393" value="select polyf(multirange(int4range(42, 49)), 11, 4.5) as fail;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case396" value="select q1, float8(count(*)) / (select count(*) from int8_tbl) from int8_tbl group by q1 order by q1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case397" value="select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null),              (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case399" value="select range_add_bounds(int4range(1, 17));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case401" value="select range_add_bounds(numrange(1.0001, 123.123));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case403" value="select range_adjacent(numrange(2.0, 3.0), numrange(3.1, null));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case405" value="select range_merge(numrange(1.0, 2.0), numrange(1.5, 3.0));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case407" value="select range_merge(numrange(1.0, 2.0), numrange(2.5, 3.0));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case409" value="select range_minus(numrange(10.1,12.2,'[]'), numrange(110.0,120.2,'(]'));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case411" value="select rangetypes_sql(numrange(1,10), ARRAY[2,20]);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case412" value="select relname,   c.oid = oldoid as orig_oid,   case relfilenode     when 0 then 'none'     when c.oid then 'own'     when oldfilenode then 'orig'     else 'OTHER'     end as storage,   obj_description(c.oid, 'pg_class') as desc   from pg_class c left join old_oids using (relname)   where relname like 'at_partitioned%'   order by relname;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case413" value="select relname,   c.oid = oldoid as orig_oid,   case relfilenode     when 0 then 'none'     when c.oid then 'own'     when oldfilenode then 'orig'     else 'OTHER'     end as storage,   obj_description(c.oid, 'pg_class') as desc   from pg_class c left join old_oids using (relname)   where relname like 'at_partitioned%'   order by relname;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case415" value="select row(0, false)::testtype2 *&lt; row(0, true)::testtype2;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case417" value="select row(1, '(1,2)')::testtype4 *&lt; row(1, '(1,3)')::testtype4;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case419" value="select row(1, '(1,2)')::testtype6 *&lt; row(1, '(1,3)')::testtype6;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case421" value="select row(1, '(1,2)')::testtype6 *&gt;= row(1, '(1,3)')::testtype6;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case423" value="select row(1, 'abc')::testtype3 *&lt; row(1, 'abd')::testtype3;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case425" value="select row(1, 'abc')::testtype3 *&gt; row(1, 'abd')::testtype3;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case427" value="select row(1, -2)::testtype1 *&lt; row(1, 3)::testtype1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case429" value="select row(1, -2)::testtype1 *&lt;&gt; row(1, -2)::testtype1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case431" value="select row(1, -3)::testtype1 *&gt; row(1, -2)::testtype1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case433" value="select row(1, 2)::testtype1 *&lt; row(1)::testtype5;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case435" value="select row(1, 2)::testtype1 *&lt; row(1, 3)::testtype1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case437" value="select row(1, 2)::testtype1 *&lt;&gt; row(1)::testtype5;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case439" value="select row(1, 2)::testtype1 *&lt;&gt; row(1, 3)::testtype1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case441" value="select row(1, 3)::testtype1 *&gt; row(1, 2)::testtype1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case443" value="select row(1, true)::testtype2 *&lt; row(2, true)::testtype2;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case445" value="select row_to_json(s.*) from generate_series(11,14) with ordinality s;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case447" value="select scale(numeric 'inf');" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case448" value="select setting as segsize from pg_settings where name = 'wal_segment_size' \gset select count(*) &gt; 0 as ok from pg_ls_waldir();" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case449" value="select t1.q2, count(t2.*) from int8_tbl t1 left join   (select q1, case when q2=1 then 1 else q2 end as q2 from int8_tbl) t2   on (t1.q2 = t2.q1) group by t1.q2 order by 1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case450" value="select t1.q2, count(t2.*) from int8_tbl t1 left join (select * from int8_tbl offset 0) t2 on (t1.q2 = t2.q1) group by t1.q2 order by 1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case451" value="select t1.q2, count(t2.*) from int8_tbl t1 left join (select * from int8_tbl) t2 on (t1.q2 = t2.q1) group by t1.q2 order by 1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case452" value="select t1.q2, count(t2.*) from int8_tbl t1 left join int8_tbl t2 on (t1.q2 = t2.q1) group by t1.q2 order by 1;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case454" value="select trim_scale(numeric 'NaN');" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case456" value="select unnest(int4multirange(int4range('5', '6'), int4range('1', '2')));" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case458" value="select x from (values (row(100::money)), (row(200::money))) _(x) union select x from (values (row(100::money)), (row(300::money))) _(x);" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case463" value="select x, pg_typeof(x) from anyctest(11, int4range(4,7)) x;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case465" value="select x, pg_typeof(x) from anyctest(11, multirange(numrange(4,7))) x;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case468" value="select x, pg_typeof(x) from anyctest(11.2, int4range(4,7)) x;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case469" value="select x, pg_typeof(x) from anyctest(11.2, multirange(int4range(4,7))) x;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case471" value="select x, pg_typeof(x) from anyctest(int4range(11,12), numrange(4,7)) x;" db-types="PostgreSQL"/>
    <sql-case id="low_select_by_postgresql_source_test_case473" value="select x, pg_typeof(x) from anyctest(multirange(int4range(11,12)), multirange(numrange(4,7))) x;" db-types="PostgreSQL"/>
    <sql-case id="low_short_by_postgresql_source_test_case1" value="short select * from basictest;" db-types="PostgreSQL"/>
    <sql-case id="low_still_by_postgresql_source_test_case1" value="still not okay \g select     42     (bogus   forty_two;" db-types="PostgreSQL"/>
    <sql-case id="low_test1_by_postgresql_source_test_case1" value="test1 CREATE FUNCTION fun_instead_of_insert_tbl() RETURNS trigger AS $$ BEGIN   INSERT INTO instead_of_insert_tbl (name) VALUES (NEW.str);   RETURN NULL; END; $$ LANGUAGE plpgsql;" db-types="PostgreSQL"/>
    <sql-case id="low_test1_by_postgresql_source_test_case2" value="test1 SELECT * FROM instead_of_insert_tbl;" db-types="PostgreSQL"/>
    <sql-case id="low_test1_by_postgresql_source_test_case3" value="test1 SELECT * FROM instead_of_insert_tbl;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case2" value="update arrtest1 set i[-3] = -3, t[-3] = 'minus-three';" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case4" value="update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null];" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case6" value="update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5'];" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case8" value="update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22'];" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case10" value="update arrtest1 set i[2] = 22, t[2] = 'twenty-two';" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case12" value="update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20'];" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case14" value="update dcomptable set d1.r = (d1).r + 1 where (d1).i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case16" value="update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case18" value="update dcomptable set d1[1].r = d1[1].r + 1 where d1[1].i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case19" value="update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1   where d1[1].i &gt; 0;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case21" value="update dcomptable set f1[1].cf1 = -1;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case23" value="update dcomptable set f1[1].cf2 = 5;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case24" value="update domarrtest set   testint4arr[1] = testint4arr[1] + 1,   testint4arr[3] = testint4arr[3] - 1 where testchar4arr is null;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case26" value="update dposintatable set f1[2] = array[99];" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case28" value="update op set f1[2] = 0;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case30" value="update people set fn.suffix = 'Jr';" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case31" value="update pitable set f1[1] = 0;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case33" value="update quadtable set q.c1 = 12;" db-types="PostgreSQL"/>
    <sql-case id="low_update_by_postgresql_source_test_case35" value="update t1 set f1[5].q2 = 43;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case2" value="with r(a,b) as materialized   (values (1,row(1,2)), (1,row(null,null)), (1,null),           (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case3" value="with recursive a as (  select 1 as b  union all  select * from a ) cycle b set c using p select * from a;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case4" value="with recursive graph(f, t, label) as (   values (1, 2, 'arc 1 -&gt; 2'),          (1, 3, 'arc 1 -&gt; 3'),          (2, 3, 'arc 2 -&gt; 3'),          (1, 4, 'arc 1 -&gt; 4'),          (4, 5, 'arc 4 -&gt; 5'),          (5, 1, 'arc 5 -&gt; 1') ), search_graph(f, t, label) as (         select * from graph g         union all         select g.*         from graph g, search_graph sg         where g.f = sg.t ) cycle f, t set is_cycle to true default false using path select f, t, label from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case5" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set foo to true default false using foo select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case6" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle to point '(1,1)' default point '(0,0)' using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case7" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle to true default 55 using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case8" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle to true default false using label select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case9" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case10" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set label to true default false using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case11" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t, f set is_cycle to true default false using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case12" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle foo, tar set is_cycle using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case13" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) search breadth first by f, t set seq   cycle f, t set is_cycle using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case14" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) search depth first by f, t set foo   cycle f, t set foo to true default false using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case15" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) search depth first by f, t set foo   cycle f, t set is_cycle to true default false using foo select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case16" value="with recursive search_graph(f, t, label) as (  select * from graph g  union all  select g.*  from graph g, search_graph sg  where g.f = sg.t ) search depth first by f, t set seq   cycle f, t set is_cycle using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case17" value="with recursive search_graph(f, t, label) as (  select * from graph g  union distinct  select g.*  from graph g, search_graph sg  where g.f = sg.t ) cycle f, t set is_cycle to 'Y' default 'N' using path select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case18" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  (select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t) ) search depth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case19" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case20" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search breadth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case21" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t set label select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case22" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case23" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t, f set seq select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case24" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union all  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by foo, tar set seq select * from search_graph;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case25" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union distinct  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search breadth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case26" value="with recursive search_graph(f, t, label) as (  select * from graph0 g  union distinct  select g.*  from graph0 g, search_graph sg  where g.f = sg.t ) search depth first by f, t set seq select * from search_graph order by seq;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case32" value="with testdata(bits) as (values   (x'00000000'),   (x'00800000'), (x'00800001'), (x'00800004'), (x'00800005'),   (x'00800006'),   (x'008002f1'), (x'008002f2'), (x'008002f3'),   (x'00800e17'), (x'00800e18'), (x'00800e19'),   (x'01000001'), (x'01102843'), (x'01a52c98'),   (x'0219c229'), (x'02e4464d'), (x'037343c1'), (x'03a91b36'),   (x'047ada65'), (x'0496fe87'), (x'0550844f'), (x'05999da3'),   (x'060ea5e2'), (x'06e63c45'), (x'07f1e548'), (x'0fc5282b'),   (x'1f850283'), (x'2874a9d6'),   (x'3356bf94'), (x'3356bf95'), (x'3356bf96'),   (x'33d6bf94'), (x'33d6bf95'), (x'33d6bf96'),   (x'34a10faf'), (x'34a10fb0'), (x'34a10fb1'),   (x'350637bc'), (x'350637bd'), (x'350637be'),   (x'35719786'), (x'35719787'), (x'35719788'),   (x'358637bc'), (x'358637bd'), (x'358637be'),   (x'36a7c5ab'), (x'36a7c5ac'), (x'36a7c5ad'),   (x'3727c5ab'), (x'3727c5ac'), (x'3727c5ad'),   (x'38d1b714'), (x'38d1b715'), (x'38d1b716'),   (x'38d1b717'), (x'38d1b718'), (x'38d1b719'),   (x'38d1b71a'), (x'38d1b71b'), (x'38d1b71c'),   (x'38d1b71d'),   (x'38dffffe'), (x'38dfffff'), (x'38e00000'),   (x'38efffff'), (x'38f00000'), (x'38f00001'),   (x'3a83126e'), (x'3a83126f'), (x'3a831270'),   (x'3c23d709'), (x'3c23d70a'), (x'3c23d70b'),   (x'3dcccccc'), (x'3dcccccd'), (x'3dccccce'),   (x'3dcccd6f'), (x'3dcccd70'), (x'3dcccd71'),   (x'3effffff'), (x'3f000000'), (x'3f000001'),   (x'3f333332'), (x'3f333333'), (x'3f333334'),   (x'3f666665'), (x'3f666666'), (x'3f666667'),   (x'3f7d70a3'), (x'3f7d70a4'), (x'3f7d70a5'),   (x'3f7fbe76'), (x'3f7fbe77'), (x'3f7fbe78'),   (x'3f7ff971'), (x'3f7ff972'), (x'3f7ff973'),   (x'3f7fff57'), (x'3f7fff58'), (x'3f7fff59'),   (x'3f7fffee'), (x'3f7fffef'),   (x'3f7ffff0'), (x'3f7ffff1'), (x'3f7ffff2'),   (x'3f7ffff3'), (x'3f7ffff4'), (x'3f7ffff5'),   (x'3f7ffff6'), (x'3f7ffff7'), (x'3f7ffff8'),   (x'3f7ffff9'), (x'3f7ffffa'), (x'3f7ffffb'),   (x'3f7ffffc'), (x'3f7ffffd'), (x'3f7ffffe'),   (x'3f7fffff'),   (x'3f800000'),   (x'3f800001'), (x'3f800002'), (x'3f800003'),   (x'3f800004'), (x'3f800005'), (x'3f800006'),   (x'3f800007'), (x'3f800008'), (x'3f800009'),   (x'3f80000f'), (x'3f800010'), (x'3f800011'),   (x'3f800012'), (x'3f800013'), (x'3f800014'),   (x'3f800017'), (x'3f800018'), (x'3f800019'),   (x'3f80001a'), (x'3f80001b'), (x'3f80001c'),   (x'3f800029'), (x'3f80002a'), (x'3f80002b'),   (x'3f800053'), (x'3f800054'), (x'3f800055'),   (x'3f800346'), (x'3f800347'), (x'3f800348'),   (x'3f8020c4'), (x'3f8020c5'), (x'3f8020c6'),   (x'3f8147ad'), (x'3f8147ae'), (x'3f8147af'),   (x'3f8ccccc'), (x'3f8ccccd'), (x'3f8cccce'),   (x'3fc90fdb'   (x'402df854'   (x'40490fdb'   (x'409fffff'), (x'40a00000'), (x'40a00001'),   (x'40afffff'), (x'40b00000'), (x'40b00001'),   (x'411fffff'), (x'41200000'), (x'41200001'),   (x'42c7ffff'), (x'42c80000'), (x'42c80001'),   (x'4479ffff'), (x'447a0000'), (x'447a0001'),   (x'461c3fff'), (x'461c4000'), (x'461c4001'),   (x'47c34fff'), (x'47c35000'), (x'47c35001'),   (x'497423ff'), (x'49742400'), (x'49742401'),   (x'4b18967f'), (x'4b189680'), (x'4b189681'),   (x'4cbebc1f'), (x'4cbebc20'), (x'4cbebc21'),   (x'4e6e6b27'), (x'4e6e6b28'), (x'4e6e6b29'),   (x'501502f8'), (x'501502f9'), (x'501502fa'),   (x'51ba43b6'), (x'51ba43b7'), (x'51ba43b8'),   (x'1f6c1e4a')   (x'59be6cea')   (x'5d5ab6c4')   (x'2cc4a9bd')   (x'15ae43fd')   (x'2cf757ca')   (x'665ba998')   (x'743c3324')   (x'47f1205a'),   (x'4640e6ae'),   (x'449a5225'),   (x'42f6e9d5'),   (x'414587dd'),   (x'3f9e064b'),   (x'4c000004'),   (x'50061c46'),   (x'510006a8'),   (x'48951f84'),   (x'45fd1840'),   (x'39800000'),   (x'3b200000'),   (x'3b900000'),   (x'3bd00000'),   (x'63800000'),   (x'4b000000'),   (x'4b800000'),   (x'4c000001'),   (x'4c800b0d'),   (x'00d24584'),   (x'00d90b88'),   (x'45803f34'),   (x'4f9f24f7'),   (x'3a8722c3'),   (x'5c800041'),   (x'15ae43fd'),   (x'5d4cccfb'),   (x'4c800001'),   (x'57800ed8'),   (x'5f000000'),   (x'700000f0'),   (x'5f23e9ac'),   (x'5e9502f9'),   (x'5e8012b1'),   (x'3c000028'),   (x'60cde861'),   (x'03aa2a50'),   (x'43480000'),   (x'4c000000'),   (x'5D1502F9'),   (x'5D9502F9'),   (x'5E1502F9'),   (x'3f99999a'),   (x'3f9d70a4'),   (x'3f9df3b6'),   (x'3f9e0419'),   (x'3f9e0610'),   (x'3f9e064b'),   (x'3f9e0651'),   (x'03d20cfe') ) select float4send(flt) as ibits,        flt,        flt::text::float4 as r_flt,        float4send(flt::text::float4) as obits,        float4send(flt::text::float4) = float4send(flt) as correct   from (select bits::integer::xfloat4::float4 as flt           from testdata  offset 0) s;" db-types="PostgreSQL"/>
    <sql-case id="low_with_by_postgresql_source_test_case33" value="with testdata(bits) as (values   (x'00000001'),   (x'00000002'), (x'00000003'),   (x'00000010'), (x'00000011'), (x'00000100'), (x'00000101'),   (x'00004000'), (x'00004001'), (x'00080000'), (x'00080001'),   (x'0053c4f4')   (x'006c85c4')   (x'0041ca76')   (x'004b7678')   (x'00000007'),   (x'00424fe2'),   (x'007ffff0'), (x'007ffff1'), (x'007ffffe'), (x'007fffff')) select float4send(flt) as ibits,        flt   from (select bits::integer::xfloat4::float4 as flt           from testdata  offset 0) s;" db-types="PostgreSQL"/>
    <sql-case id="unsupported_select_case_for_opengauss_13" value="select count(*) from partition_list_tab01 partition for ('20');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_14" value="select count(*) from partition_list_tab partition for ('10');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_15" value="select count(*) from partition_list_tab partition for ('20');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_16" value="select count(*) from partition_list_tab partition for ('30');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_24" value="select case when date '2018-09-17' &gt; date '2018-09-16' then 'A' else 'B' end;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_25" value="select ''null''::jsonb;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_26" value="select ''null''::json;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_27" value="select &amp;quot;{&amp;quot;name&amp;quot;: [&amp;quot;john&amp;quot;, false],  &amp;quot;age&amp;quot;:    18,  &amp;quot;assress&amp;quot;:  {&amp;quot;country&amp;quot; :&amp;quot;china&amp;quot;, &amp;quot;zip-code&amp;quot;: &amp;quot;10000&amp;quot;},&amp;quot;true&amp;quot;:true}&amp;quot;::JSON;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_28" value="select {&amp;quot;name&amp;quot;: [&amp;quot;john&amp;quot;, false],  &amp;quot;age&amp;quot;:    18,  &amp;quot;assress&amp;quot;:  {&amp;quot;country&amp;quot; :&amp;quot;china&amp;quot;, &amp;quot;zip-code&amp;quot;: &amp;quot;10000&amp;quot;},true:true}::JSON;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_29" value="select &amp;quot;{&amp;quot;name&amp;quot;,&amp;quot;john&amp;quot;,  &amp;quot;age&amp;quot;}&amp;quot;::JSON;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_30" value="select '[null,true,false,&amp;quot;null&amp;quot;,&amp;quot;true&amp;quot;,&amp;quot;false&amp;quot;]'::json -&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_31" value="select '[138,0.58,-369,1.25e+6]'::json -&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_32" value="select '\&amp;quot;$$\&amp;quot;'::json -&gt;192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_33" value="select [&amp;quot;www@13^&amp;quot;, 1, {&amp;quot;name&amp;quot;: &amp;quot;john&amp;quot;}, &amp;quot;2&amp;quot;, &amp;quot; &amp;quot;,true,&amp;quot;null&amp;quot;]::JSON;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_34" value="select '[&amp;quot;www@13^&amp;quot;, 1, {&amp;quot;name&amp;quot;: &amp;quot;john&amp;quot;}, '2',,true,&amp;quot;null&amp;quot;]'::JSON;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_35" value="select jsonb_ge('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_36" value="select jsonb_ge('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_37" value="select jsonb_ge('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_38" value="select jsonb_ge('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_39" value="select jsonb_extract_path_op ('[{&amp;quot;a&amp;quot;:&amp;quot;foo&amp;quot;},{&amp;quot;b&amp;quot;:&amp;quot;bar&amp;quot;},{&amp;quot;c&amp;quot;:&amp;quot;baz&amp;quot;}]',{2});" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_40" value="select jsonb_extract_path_op('null',‘{1)’;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_41" value="select jsonb_extract_path_text('null',);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_42" value="select jsonb_gt('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_43" value="select jsonb_gt('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_44" value="select jsonb_gt('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_45" value="select jsonb_gt('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_46" value="select jsonb_lt('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_47" value="select jsonb_lt('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_48" value="select jsonb_lt('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_49" value="select jsonb_lt('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_50" value="select jsonb_extract_path_text_op ('[{&amp;quot;a&amp;quot;:&amp;quot;foo&amp;quot;},{&amp;quot;b&amp;quot;:&amp;quot;bar&amp;quot;},{&amp;quot;c&amp;quot;:&amp;quot;baz&amp;quot;}]',{2});" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_51" value="select jsonb_extract_path_text_op('null',‘{1)’;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_52" value="select jsonb_le('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_53" value="select jsonb_le('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_54" value="select jsonb_le('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_55" value="select jsonb_le('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_56" value="select jsonb_exists_any('{&amp;quot;a&amp;quot;:1, &amp;quot;b&amp;quot;: [1,2,3],&amp;quot;c&amp;quot;:{&amp;quot;b&amp;quot;:&amp;quot;d&amp;quot;}}', array[{'c':'b'}]);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_57" value="select jsonb_exists_any('[&amp;quot;abcdefg&amp;quot;,138,&amp;quot;{\&amp;quot;db\&amp;quot;:\&amp;quot;test\&amp;quot;}&amp;quot;,null,&amp;quot;true&amp;quot;,false]',array{&amp;quot;db&amp;quot;:&amp;quot;test&amp;quot;});" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_58" value="select jsonb_exists_any('[&amp;quot;abcdefg&amp;quot;,138,&amp;quot;{\&amp;quot;db\&amp;quot;:\&amp;quot;test\&amp;quot;}&amp;quot;,null,&amp;quot;true&amp;quot;,false]',array[{'db':'test'}]);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_59" value="select jsonb_exists_all('{&amp;quot;a&amp;quot;:1, &amp;quot;b&amp;quot;: [1,2,3],&amp;quot;c&amp;quot;:{&amp;quot;b&amp;quot;:&amp;quot;d&amp;quot;}}','{'b','d'}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_60" value="select jsonb_exists_all('[null, false, 123,{&amp;quot;a&amp;quot;:true},&amp;quot;test&amp;quot;]',array'[123,'{a}']');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_61" value="select sum(score)fromtab136whereclass=2andcourse='数学';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_62" value="select max(score)fromtab136whereclass=2andcourse='数学';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_63" value="select min(score)fromtab136whereclass=2andcourse='数学';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_64" value="select avg(score)fromtab136whereclass=1andcourse='数学';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_65" value="select jsonb_cmp('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_66" value="select jsonb_cmp('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_67" value="select jsonb_cmp('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_68" value="select jsonb_cmp('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_69" value="select json_extract_path_text('null',);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_70" value="select jsonb_eq('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_71" value="select jsonb_eq('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_72" value="select jsonb_eq('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_73" value="select jsonb_eq('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_74" value="select jsonb_ne('[{a:false},{a:true},123,'qwer','null']','{&amp;quot;a&amp;quot;:false}');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_75" value="select jsonb_ne('[{a:false},{a:true},123,'qwer','null']','123');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_76" value="select jsonb_ne('[{a:false},{a:true},123,'qwer','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_77" value="select jsonb_ne('[{a:false},{a:true},123,'&amp;quot;qwer&amp;quot;','null']','qwer');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_78" value="select '[null,true,false,&amp;quot;null&amp;quot;,&amp;quot;true&amp;quot;,&amp;quot;false&amp;quot;]'::jsonb -&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_79" value="select '[138,0.58,-369,1.25e+6]'::jsonb -&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_80" value="select '\&amp;quot;$$\&amp;quot;'::jsonb -&gt;192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_81" value="select '{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: {&amp;quot;a&amp;quot;: 2, &amp;quot;b&amp;quot;: null}}'::jsonb  -&gt;&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_82" value="select '{&amp;quot;foo&amp;quot;: [true, &amp;quot;bar&amp;quot;], &amp;quot;tags&amp;quot;: {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: null}}'::jsonb -&gt;&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_83" value="select '\&amp;quot;$$\&amp;quot;'::jsonb -&gt;&gt;192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_84" value="select '[{&amp;quot;a&amp;quot;:true}, null] '::  jsonb @&gt; [null];" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_85" value="select '{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: {&amp;quot;a&amp;quot;: 2, &amp;quot;b&amp;quot;: null}}'::json  -&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_86" value="select '{&amp;quot;foo&amp;quot;: [true, &amp;quot;bar&amp;quot;], &amp;quot;tags&amp;quot;: {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: null}}'::json -&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_87" value="select '{&amp;quot;a&amp;quot;:null, &amp;quot;bb&amp;quot;: 1, &amp;quot;bb&amp;quot;: &amp;quot;A&amp;quot;,   &amp;quot;cde&amp;quot;: [1,2,   &amp;quot;re&amp;quot;], &amp;quot;abc&amp;quot;: 1}':: -&gt; true;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_88" value="select '{&amp;quot;a&amp;quot;:null, &amp;quot;[1,2,\&amp;quot;re\&amp;quot;]&amp;quot;: 1, &amp;quot;bb&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;cde&amp;quot;: [1,2,   &amp;quot;re&amp;quot;], &amp;quot;abc&amp;quot;: 1}':: -&gt; null;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_89" value="select '[null,true,false,&amp;quot;null&amp;quot;,&amp;quot;true&amp;quot;,&amp;quot;false&amp;quot;]'::json -&gt;&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_90" value="select '[138,0.58,-369,1.25e+6]'::json -&gt;&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_91" value="select '\&amp;quot;$$\&amp;quot;'::json -&gt;&gt;192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_92" value="select '[{&amp;quot;a&amp;quot;:true}, null] '::  jsonb &lt;@ [null];" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_93" value="select '{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: {&amp;quot;a&amp;quot;: 2, &amp;quot;b&amp;quot;: null}}'::jsonb  -&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_94" value="select '{&amp;quot;foo&amp;quot;: [true, &amp;quot;bar&amp;quot;], &amp;quot;tags&amp;quot;: {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: null}}'::jsonb -&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_95" value="select '[null,true,false,&amp;quot;null&amp;quot;,&amp;quot;true&amp;quot;,&amp;quot;false&amp;quot;]'::jsonb -&gt;&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_96" value="select '[138,0.58,-369,1.25e+6]'::jsonb -&gt;&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_97" value="select '{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: {&amp;quot;a&amp;quot;: 2, &amp;quot;b&amp;quot;: null}}'::json  -&gt;&gt; 2021-05-31 12:59:08;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_98" value="select '{&amp;quot;foo&amp;quot;: [true, &amp;quot;bar&amp;quot;], &amp;quot;tags&amp;quot;: {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: null}}'::json -&gt;&gt; 192.168.100.128/25;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_99" value="select '52093.89'::money::numeric::float8;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_100" value="select 'fat:ab &amp; cat'::tsquery;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_101" value="select 'super:*'::tsquery;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_102" value="select 'fat &amp; rat'::tsquery;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_103" value="select 'fat &amp; (rat | cat)'::tsquery;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_104" value="select 'fat &amp; rat &amp; ! cat'::tsquery;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_105" value="select 'a fat cat sat on a mat and ate a fat rat'::tsvector;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_106" value="select $$the lexeme '    ' contains spaces$$::tsvector;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_107" value="select 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_108" value="select 'a:1A fat:2B,4C cat:5D'::tsvector;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_109" value="select ASCII(#);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_110" value="select ASCII(=);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_111" value="select char_length($$jjslf$$);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_112" value="select char_length($$jj' 'slf$$);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_113" value="select last(s_name) as name, last(s_id nulls last ) from last06;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_114" value="select NULLIF(,);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_115" value="select NULLIF();" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_116" value="select nullif(#,&amp;) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_117" value="select nullif(#,#) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_118" value="select nullif((,)) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_119" value="select nullif(@,@) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_120" value="select nullif(+,-) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_121" value="select nullif(!,~) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_127" value="select row_to_json(row(interval '3' day)) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_128" value="select row_to_json(row(inet('10.183.187.233'))) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_129" value="select row_to_json(row(B'101')) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_130" value="select row_to_json(row('The Fat Rats'::tsvector)) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_131" value="select row_to_json(row('52093.89'::money::numeric::float8)) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_132" value="select array_prepend(@,array[1,2]) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_133" value="select array_cat(array[[1,2,3],[2,5]], @) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_134" value="select array_append(array[1,2],@) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_135" value="select array_dims(array[[7,1,@], [1,3,6]]) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_136" value="select array_length(array[1,2,3], ) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_137" value="select array_upper(array[[1,8,3,7]], #) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_138" value="select array_upper(array[[1,8,3,7]], ) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_139" value="select array_lower([1,2,3], 1) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_140" value="select array_lower(array[1,2,3], @) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_141" value="select array_lower(array[1,2,3], ) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_142" value="select col1 / double precision '1.5' from test_date01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_143" value="select double precision '1.5' * col1  from test_date01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_144" value="select col1:: date + integer '7'  from test_date01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_145" value="select daterange('2000-05-06','2000-08-08','(]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_146" value="select daterange('2000-05-06 00:01:09','2000-08-08 19:59:00','(]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_147" value="select daterange('2000-05-06 12:01:09','2000-08-08 19:59:00','(]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_148" value="select daterange('2000-05-06 00:01:09','2000-08-08 09:59:00','(]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_149" value="select daterange('2000-05-06 17:01:09','2000-08-08 09:59:00','(]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_150" value="select daterange('2000-05-06','2000-08-08','()');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_151" value="select daterange('2000-05-06 00:01:09','2000-08-08 19:59:00','()');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_152" value="select daterange('2000-05-06 12:01:09','2000-08-08 19:59:00','()');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_153" value="select daterange('2000-05-06 00:01:09','2000-08-08 09:59:00','()');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_154" value="select daterange('2000-05-06 17:01:09','2000-08-08 09:59:00','()');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_155" value="select daterange('2000-05-06','2000-08-08','abc');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_156" value="select daterange('2001-05-06','2000-08-08');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_157" value="select daterange('2001-05-06','2001-05-06');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_158" value="select daterange('2000-05-06','2000-08-08','[)');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_159" value="select daterange('2000-05-06 00:01:09','2000-08-08 19:59:00','[)');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_160" value="select daterange('2000-05-06 12:01:09','2000-08-08 19:59:00','[)');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_161" value="select daterange('2000-05-06 00:01:09','2000-08-08 09:59:00','[)');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_162" value="select daterange('2000-05-06 17:01:09','2000-08-08 09:59:00','[)');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_163" value="select daterange('2000-05-06','2000-08-08','[]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_164" value="select daterange('2000-05-06 00:01:09','2000-08-08 19:59:00','[]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_165" value="select daterange('2000-05-06 12:01:09','2000-08-08 19:59:00','[]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_166" value="select daterange('2000-05-06 00:01:09','2000-08-08 09:59:00','[]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_167" value="select daterange('2000-05-06 17:01:09','2000-08-08 09:59:00','[]');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_168" value="select date '2019-1-6' -  col1  from test_date01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_169" value="select daterange('2001-02-16 20:38:40','2001-02-16 20:38:41');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_170" value="select daterange('2018-05-14 14:09:04.127444+08','2018-05-16 14:09:04.127444+08');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_171" value="select daterange('2000-05-06','2000-08-08');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_172" value="select col1:: date - integer '7'  from test_date01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_173" value="select ADD_MONTHS('2018-02-28',1) - date'2018-02-28'  from  sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_174" value="select bitand(6,) as result from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_175" value="select bitand(,6) as result from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_176" value="select first(s_name) as name, first(s_id nulls first ) from first06;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_177" value="select notlike(1, );" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_178" value="select sin(2  2) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_179" value="select sin(2)(2) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_180" value="select length(EXTRACT (MONTH FROM DATE '2018-10-04')) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_181" value="select acos(2  2) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_182" value="select acos(2)(2) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_183" value="select acos 1 as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_184" value="select count(none) from tbc;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_185" value="select reset_unique_sql('global','all',);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_186" value="select pg_stat_get_tuples_hot_updated(’87654345888765#￥%……&amp;*‘) from PG_CLASS a where a.relname = 'sales';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_187" value="select to_hex(@#￥);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_188" value="select array_replace(array[1.23,2.25,33,5.0],(select @ -5.0 as result),(select @ 8.0 as result));" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_189" value="select array_replace(array[1.23,2.25,33,5.0],(select substrb('string',2,3)),(select @ 8.0 as result));" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_190" value="select array_replace(array['string','str','st','ring'],(select @ -5.0 as result),(select repeat('ab', 3)));" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_191" value="select asin(2  2) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_192" value="select asin(2)(2) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_193" value="select asin 1 as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_194" value="select int4range(1,3) + int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_195" value="select tsrange('[2021-01-01,2021-03-01)') + '[3,4]'::int4range  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_196" value="select numrange(8.1,10.2,'[]') &gt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_197" value="select tsrange('[2013-12-11 pst,2025-03-01 pst)') &gt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_198" value="select tsrange('[2021-01-01,2028-03-01)') &gt; ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_199" value="select int4range(1,5) &gt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_200" value="select int4range(10,10) &gt; '(10,15)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_201" value="select int8range(15,25) &gt; int8range(15,26) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_202" value="select int4range(1,5) &lt;= '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_203" value="select int4range(10,18) &lt;= '(10,15)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_204" value="select int8range(15,26) &lt;= int8range(15,26) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_205" value="select numrange(8.1,10.2,'[]') &lt;= numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_206" value="select tsrange('[2013-12-11 pst,2025-03-01 pst)') &lt;= ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_207" value="select tsrange('[2021-01-01,2028-03-01)') &lt;= ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_208" value="select int4range(1,5) * '[3,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_209" value="select int8range(16,30) *int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_210" value="select tsrange('[2021-01-01,2021-03-01)') *('[2021-03-01,2021-10-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_211" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') *('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_212" value="select tsrange('[2021-01-01,2021-03-01)') * ('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_213" value="select numrange(1.1,9.9,'[]') * numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_214" value="select int4range(10,16) * '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_215" value="select int8range(16,25) *int8range(15,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_216" value="select numrange(1.1,2.2,'[]') &lt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_217" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') &lt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_218" value="select tsrange('[2021-01-01,2021-03-01)') &lt; ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_219" value="select int4range(1,5) &lt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_220" value="select int4range(10,10) &lt; '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_221" value="select int8range(15,25) &lt; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_222" value="select int4range(1,3) + '[3,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_223" value="select int8range(16,25) +int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_224" value="select tsrange('[2021-01-01,2021-03-01)') +('[2021-03-01,2021-10-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_225" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') +('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_226" value="select tsrange('[2021-01-01,2021-03-01)') + ('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_227" value="select numrange(1.1,9.9,'[]') + numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_228" value="select int4range(10,16) + '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_229" value="select int8range(16,25) +int8range(15,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_230" value="select lower_inc(int4range(10,10)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_231" value="select lower_inc(int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_232" value="select lower_inc(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_233" value="select lower_inc(tsrange('[2021-01-01,2021-03-01)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_234" value="select lower_inc(tsrange('[2013-12-11 pst,2021-03-01 pst)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_235" value="select isempty(macaddr('08:00:2b:01:02:03'::macaddr ,'08:00:2b:01:02:03'::macaddr)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_236" value="select isempty(bugstatus (create, closed)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_237" value="select int4range(1,3) -|- '[3,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_238" value="select int8range(16,25) -|-int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_239" value="select tsrange('[2021-01-01,2021-03-01)') -|-('[2021-03-01,2021-10-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_240" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') -|-('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_241" value="select numrange(1.1,9.9,'[]') -|- numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_242" value="select int4range(10,16) -|- '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_243" value="select int8range(16,25) -|-int8range(15,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_244" value="select numrange(1.1,2.2,'[]') &lt;&gt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_245" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') &lt;&gt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_246" value="select int4range(1,5) &lt;&gt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_247" value="select int4range(10,10) &lt;&gt; '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_248" value="select int8range(15,25) &lt;&gt; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_249" value="select tsrange('[2021-01-01,2021-03-01)') &lt;&gt; ('[2021-01-01,2021-03-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_250" value="select elem_contained_by_range('abc', int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_251" value="select elem_contained_by_range(2, numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_252" value="select int4range(1,5) &gt;= '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_253" value="select int8range(15,26) &gt;= int8range(15,26) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_254" value="select numrange(8.1,10.2,'[]') &gt;= numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_255" value="select tsrange('[2013-12-11 pst,2025-03-01 pst)') &gt;= ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_256" value="select tsrange('[2021-01-01,2028-03-01)') &gt;= ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_257" value="select int4range(10,18) &gt;= '(10,15)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_258" value="select numrange(1.1,2.2,'[]') &lt;&lt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_259" value="select tsrange('[2010-5-11 pst,2011-03-01 pst)') &lt;&lt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_260" value="select tsrange('[1999-01-01,2000-05-01)') &lt;&lt; ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_261" value="select int4range(1,5) &lt;&lt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_262" value="select int4range(10,10) &lt;&lt; '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_263" value="select int8range(15,25) &lt;&lt; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_264" value="select int4range(5,10) &gt;&gt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_265" value="select int4range(20,25) &gt;&gt; '(10,20)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_266" value="select int8range(25,50) &gt;&gt; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_267" value="select numrange(1.1,2.2,'[]') &gt;&gt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_268" value="select tsrange('[2010-5-11 pst,2011-03-01 pst)') &gt;&gt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_269" value="select tsrange('[1999-01-01,2000-05-01)') &gt;&gt; ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_270" value="select int4range(1,5) @&gt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_271" value="select int8range(15,26) @&gt; int8range(15,26) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_272" value="select tsrange('[2013-12-11 pst,2025-03-01 pst)') @&gt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_273" value="select tsrange('[2021-01-01,2028-03-01)') @&gt; ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_274" value="select int4range(10,12) @&gt; '(10,15)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_275" value="select numrange(8.1,10.2,'[]') @&gt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_276" value="select int4range(1,5) = '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_277" value="select int4range(10,10) = '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_278" value="select int8range(15,25) = int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_279" value="select tsrange('[2021-01-01,2021-03-01)') = ('[2021-01-01,2021-03-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_280" value="select numrange(1.1,2.2,'[]') = numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_281" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') = ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_282" value="select int4range(1,5) &amp;&gt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_283" value="select int8range(16,25) &amp;&gt; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_284" value="select tsrange('[2021-01-01,2021-03-01)') &amp;&gt; ('[2021-01-01,2021-03-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_285" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') &amp;&gt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_286" value="select numrange(1.1,9.9,'[]') &amp;&gt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_287" value="select int4range(10,16) &amp;&gt; '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_288" value="select int4range(1,5) &lt;@ '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_289" value="select int8range(15,26) &lt;@ int8range(15,26) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_290" value="select int4range(10,12) &lt;@ '(10,15)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_291" value="select numrange(8.1,10.2,'[]') &lt;@ numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_292" value="select tsrange('[2013-12-11 pst,2025-03-01 pst)') &lt;@ ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_293" value="select tsrange('[2021-01-01,2028-03-01)') &lt;@ ('[2021-01-01,2021-05-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_294" value="select int4range(1,5) @&gt; 4 as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_295" value="select tsrange('[2013-12-11 pst,2025-03-01 pst)') @&gt; '2014-12-11 pst'::timestamp  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_296" value="select tsrange('[2021-01-01,2028-03-01)') @&gt; '2026-09-09'::timestamp as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_297" value="select int4range(10,12) @&gt; 9 as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_298" value="select numrange(8.1,10.2,'[]') @&gt; 6.1::numeric as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_299" value="select int4range(1,5) &amp;&lt; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_300" value="select int8range(15,25) &amp;&lt; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_301" value="select tsrange('[2021-01-01,2021-03-01)') &amp;&lt; ('[2021-01-01,2021-03-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_302" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') &amp;&lt; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_303" value="select numrange(1.1,9.9,'[]') &amp;&lt; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_304" value="select int4range(10,16) &amp;&lt; '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_305" value="select int4range(1,3) - int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_306" value="select tsrange('[2021-01-01,2021-03-01)') - '[3,4]'::int4range  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_307" value="select elem_contained_by_range('2', numrange(1.1,2.2));" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_308" value="select elem_contained_by_range('10', int4range(10,80)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_309" value="select elem_contained_by_range('20', int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_310" value="select elem_contained_by_range('2021-02-05', tsrange('[2021-01-01,2021-03-01)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_311" value="select elem_contained_by_range('2025-12-11 pst', tsrange('[2013-12-11 pst,2021-03-01 pst)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_312" value="select lower(int4range(10,80)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_313" value="select lower(int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_314" value="select lower(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_315" value="select lower(tsrange('[2021-01-01,2021-03-01)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_316" value="select lower(tsrange('[2013-12-11 pst,2021-03-01 pst)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_317" value="select numrange(1.1,'a','[]') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_318" value="select numrange('abc','111','[]') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_319" value="select numrange(2.3,111.5,'1') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_320" value="select lower_inf(macaddr('08:00:2b:01:02:03'::macaddr ,'08:00:2b:01:02:03'::macaddr)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_321" value="select lower_inf(bugstatus (create, closed)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_322" value="select  4 &lt;@ int4range(1,5)  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_323" value="select 17::int8 &lt;@ int8range(15,26)  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_324" value="select '2014-12-11 pst'::timestamp &lt;@ tsrange('[2013-12-11 pst,2025-03-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_325" value="select '2026-09-09'::timestamp &lt;@ tsrange('[2021-01-01,2028-03-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_326" value="select 9 &lt;@ int4range(10,12)   as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_327" value="select 6.1::numeric &lt;@ numrange(8.1,10.2,'[]')  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_328" value="select int4range(1,5) &amp;&amp; '[1,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_329" value="select int8range(15,25) &amp;&amp; int8range(15,25) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_330" value="select tsrange('[2021-01-01,2021-03-01)') &amp;&amp; ('[2021-01-01,2021-03-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_331" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') &amp;&amp; ('[2013-12-11 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_332" value="select numrange(1.1,2.2,'[]') &amp;&amp; numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_333" value="select int4range(10,10) &amp;&amp; '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_334" value="select upper_inf('(,)'::daterange) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_335" value="select upper_inf(int4range'(,10)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_336" value="select upper_inf('(15,)'::int8range) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_337" value="select upper_inf(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_338" value="select upper_inf(tsrange('(2021-01-01,]')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_339" value="select upper_inf(tsrange('[,2021-03-01 pst]')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_340" value="select numrange(1.1,2.2,'[]') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_341" value="select numrange(5.1,6.7,'()') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_342" value="select numrange(5.1,6.7,'(]') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_343" value="select numrange(7.7,8.7,'[)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_344" value="select numrange(1.1,'123','[]') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_345" value="select int4range(1,5) - '[3,4]'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_346" value="select int8range(16,30) -int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_347" value="select tsrange('[2021-01-01,2021-03-01)') -('[2021-03-01,2021-10-01)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_348" value="select tsrange('[2013-12-11 pst,2021-03-01 pst)') -('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_349" value="select tsrange('[2021-01-01,2021-03-01)') - ('[2021-3-01 pst,2021-05-01 pst)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_350" value="select int4range(10,16) - '(10,11)'::int4range as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_351" value="select int8range(16,25) -int8range(15,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_352" value="select upper(int4range(10,80)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_353" value="select upper(int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_354" value="select upper(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_355" value="select upper(tsrange('[2021-01-01,2021-03-01)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_356" value="select upper(tsrange('[2013-12-11 pst,2021-03-01 pst)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_357" value="select upper_inc(int4range(10,10)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_358" value="select upper_inc(int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_359" value="select upper_inc(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_360" value="select upper_inc(tsrange('(2021-01-01,2021-03-01]')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_361" value="select upper_inc(tsrange('[2013-12-11 pst,2021-03-01 pst]')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_362" value="select lower_inc(macaddr('08:00:2b:01:02:03'::macaddr ,'08:00:2b:01:02:03'::macaddr)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_363" value="select lower_inc(bugstatus (create, closed)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_364" value="select lower(macaddr('08:00:2b:01:02:03'::macaddr ,'08:00:2b:01:02:03'::macaddr)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_365" value="select lower(bugstatus (create, closed)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_366" value="select int4range(1,3) * int8range(25,35) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_367" value="select tsrange('[2021-01-01,2021-03-01)') * '[3,4]'::int4range  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_368" value="select upper_inc(macaddr('08:00:2b:01:02:03'::macaddr ,'08:00:2b:01:02:03'::macaddr)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_369" value="select upper_inc(bugstatus (create, closed)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_370" value="select upper(macaddr('08:00:2b:01:02:03'::macaddr ,'08:00:2b:01:02:03'::macaddr)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_371" value="select upper(bugstatus (create, closed)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_372" value="select isempty(int4range(10,10)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_373" value="select isempty(int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_374" value="select isempty(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_375" value="select isempty(tsrange('[2021-01-01,2021-03-01)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_376" value="select isempty(tsrange('[2013-12-11 pst,2021-03-01 pst)')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_377" value="select lower_inf('(,)'::daterange) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_378" value="select lower_inf(int4range'(,10)') as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_379" value="select lower_inf(int8range(15,25)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_380" value="select lower_inf(numrange(1.1,2.2)) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_381" value="select lower_inf(tsrange('(2021-01-01,2021-03-01]')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_382" value="select lower_inf(tsrange('[,2021-03-01 pst]')) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_383" value="select hll_hash_boolean(@,10);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_384" value="select hll_hash_boolean(true, @#);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_385" value="select hll_hash_boolean(@);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_386" value="select hll_hash_bytea(@##$);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_387" value="select hll_hash_any('08:00:2b:01:02:03'::macaddr);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_388" value="select hll_hash_any ('[2010-01-01 14:30, 2010-01-01 15:30)'::tsrange);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_389" value="select hll_hash_any ('a fat cat sat on a mat and ate a fat rat'::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_390" value="select hll_hash_any('08:00:2b:01:02:03'::macaddr, 2147483647);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_391" value="select hll_hash_any ('[2010-01-01 14:30, 2010-01-01 15:30)'::tsrange, 10);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_392" value="select hll_hash_any ('a fat cat sat on a mat and ate a fat rat'::tsvector, 30);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_393" value="select hll_hash_text(`天天开心`);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_394" value="select trim('2' '298082');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_395" value="select trim(leading '1','2' from '1uoiusf8','2iouf899');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_396" value="select trim(both '1','2' from '1uoiusf8','2iouf899');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_397" value="select trim(trailing '1','2' from '1009-02-01');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_398" value="select trim(both '2' from );" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_399" value="select trim(leading'2' from );" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_400" value="select trim(trailing '2' from );" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_401" value="select substring(from 4 for 4) as text1;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_403" value="select ||/ clo1 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_404" value="select  clo1! from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_405" value="select  clo2! from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_406" value="select @clo1, @clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_407" value="select @ clo1, @clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_408" value="select ||/ clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_410" value="select @ clo1, @ clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_411" value="select  ||/clo1 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_412" value="select  ||/clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_415" value="select ||/clo1,||/clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_416" value="select @clo1 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_417" value="select cos(2*pi(),2*pi()));" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_418" value="select ||/ clo1,||/clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_420" value="select |/clo1 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_423" value="select |/clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_424" value="select |/clo1,|/clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_425" value="select  |/clo1 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_426" value="select  |/clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_427" value="select  !!clo1 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_428" value="select  !!clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_430" value="select ~ clo1 , ~ clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_431" value="select ~ (clo1+clo2) from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_432" value="select ~clo1, ~clo2 from data_01;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_433" value="select atan2(,) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_434" value="select atan2('11+11',) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_435" value="select atan2(11 11) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_436" value="select atan2(22,) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_437" value="select B'11110' | B'0000';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_438" value="select B'101' | as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_439" value="select B'101' # as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_440" value="select B'11110' # B'0000';" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_441" value="select extract(epoch from timestamp with time zone '2001-02-16 20:38:40.12-08') from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_442" value="select timestamp with time zone 'epoch' + 982384720.12 * interval '1 second' as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_443" value="select extract(quarter from timestamp '2001-02-16 20:38:40') from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_444" value="select extract(week from timestamp '2001-02-16 20:38:40') from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_445" value="select extract(isoyear from date '2006-01-01') from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_446" value="select extract(isoyear from date '2006-01-02') from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_447" value="select atan(11 11) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_448" value="select atan(,) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_449" value="select to_tsvector('fat cats ate fat rats') @@ 'fa:*'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_450" value="select to_tsvector('fat cats ate rats') @@(!!'rat'::tsquery) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_451" value="select $$the lexeme '    '  , contains spaces$$::tsvector@@ ','::tsquery  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_452" value="select setweight(body :: tsvector, 'a') from ts_zhparser;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_453" value="select to_tsvector('english', 'the fat rats')@@ 'the'::tsquery  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_454" value="select to_tsvector('fat cats ate rats') @@(!!'ratt'::tsquery) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_455" value="select 'fat cats ate'::tsvector || 'a b c'::tsvector;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_456" value="select 'fat | rat'::tsquery &amp;&amp; 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_457" value="select to_tsvector('fat cats ate rats') @@('rat'::tsquery &amp;&amp; 'cat'::tsquery) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_458" value="select 'a:1 b:2'::tsvector || 'c:1 d:2 b:3'::tsvector as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_459" value="select 'a b'::tsvector || 'c:1 d:2 b:3'::tsvector as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_460" value="select setweight('fat:2,4 cat:3 rat:5b'::tsvector, 1);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_461" value="select setweight('fat:2,4 cat:3 rat:5b'::tsvector, '');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_462" value="select $$the lexeme '    '  , contains spaces$$::tsvector || 'c:1 d:2 b:3'::tsvector as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_463" value="select numnode('(fat &amp; rat) | cat'::tsquery);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_464" value="select length(1::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_465" value="select strip(body :: tsvector) from ts_zhparser;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_466" value="select length('a b c'::tsvector  || 'd e f'::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_467" value="select length('fat:2,4 cat:3 rat:5a'::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_468" value="select length($$the lexeme '    ' contains spaces$$::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_469" value="select length('fat:2,4 cat:3'::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_470" value="select numnode(body :: tsquery) from ts_zhparser;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_471" value="select 'fat'::tsquery  = 'fat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_472" value="select length('fat rat'::tsvector);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_473" value="select numnode(bodyy :: tsquery) from ts_zhparser;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_474" value="select 'cat &amp; rat'::tsquery &lt;@ 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_475" value="select 'fat'::tsquery  = 'fatt'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_476" value="select 'cat'::tsquery &lt;@ 'cat &amp; rat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_477" value="select 'cat &amp; rat'::tsquery &lt;@ 'cat&amp; rat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_478" value="select 'cat'::tsquery @&gt; 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_479" value="select 'cat&amp;fat'::tsquery @&gt; 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_480" value="select 'fat'::tsquery  &gt; 'fat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_481" value="select 'fat'::tsquery  &gt; 'fat &amp; rat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_482" value="select 'fat &amp; rat'::tsquery  &gt; 'fat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_483" value="select 'cat'::tsquery @&gt; 'cat &amp; rat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_484" value="select 'fat cats ate fat rats'::tsvector @@ ('fat'::tsquery  &amp;&amp; 'ate'::tsquery)  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_485" value="select 'fat &amp; rat'::tsquery || 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_486" value="select to_tsvector('fat cats ate rats') @@('rat'::tsquery || 'cat'::tsquery) as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_487" value="select 'fat cats ate fat rats'::tsvector @@ ('fat'::tsquery  &amp;&amp; 'ateee'::tsquery)  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_488" value="select 'fat | rat'::tsquery || 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_489" value="select 'fat:ab'::tsquery  &amp;&amp; 'fa:ab'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_490" value="select 'fat &amp; rat'::tsquery &amp;&amp; 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_491" value="select  to_tsvector('fat cats ate ate' )|| 'a b c'::tsvector  || 'd e f'::tsvector as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_492" value="select 'fat cats ate fat rats'::tsvector @@ ('fat'::tsquery ||  'ateee'::tsquery)  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_493" value="select  'a:1a '::tsvector|| 'b:1a '::tsvector as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_494" value="select 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat &amp; rat')as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_495" value="select 'a:1 fat:2 cat:3 sat:4 on:5'::tsvector @@ 'fat'::tsquery  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_496" value="select 'rat'::tsquery &amp;&amp; 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_497" value="select 'fat cats ate fat rats'::tsvector @@ ('fat11'::tsquery ||  'ateee'::tsquery)  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_498" value="select 'rat'::tsquery &amp;&amp; 'cat'::tsquery &amp;&amp; '' ::tsquery  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_499" value="select !! 'cat'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_500" value="select 'fat:ab'::tsquery  || 'fa:ab'::tsquery as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_501" value="select 'rat'::tsquery &amp;&amp; 'cat'::tsquery &amp;&amp; ',' ::tsquery  as result;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_502" value="select cast(date 'epoch' as nchar(37));" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_503" value="select to_char(interval '2' year ,'yyyy','yyyy');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_504" value="select to_char(interval 2 year);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_505" value="select to_char(current_timestamp, 0x5d);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_506" value="select to_char(pg_systimestamp(), #%&amp;^);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_507" value="select to_char(-1239.456::numeric(7,3),''汉字'');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_508" value="select to_char(date 'epoch', 'hh12:mi:ss yyyy-month-dd');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_509" value="select to_char(timestamp with time zone '2010-09-13 12:32:03+08', 'hh12:mi:ss');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_510" value="select to_char(timestamp with time zone '2015-10-14 11:21:28.317367 pst', 'hh12:mi:ss');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_511" value="select to_char(timestamp with time zone '2015-10-14 11:21:28.317367 america/new_york', 'hh12:mi:ss');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_512" value="select to_char(timestamp with time zone '2015-10-14 11:21:28.317367+08', 'hh12:mi:ss');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_513" value="select to_char(timestamp without time zone '2010-09-13 12:32:03+08');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_514" value="select to_char(interval '2' year ,'yyyy');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_515" value="select to_char(interval '3' day ,'ddd');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_516" value="select to_char(interval '3' day ,'dd');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_517" value="select to_char(interval '3' day ,'天');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_518" value="select to_char(interval '2' year ,'dd');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_519" value="select numtoday(2f);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_520" value="select numtoday(@#$);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_521" value="select to_char(156*&amp;%$%^x);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_522" value="select to_number( , '99g999d9s');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_523" value="select to_number(&lt;1*8+9/3-9%3+9/2&gt;, '999999d99');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_524" value="select to_timestamp(-#&amp;%#^5);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_525" value="select to_char(date 'allballs', 'hh24:mi:ss ms');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_526" value="select to_char(timestamp with time zone '2015-10-14 11:21:28.317367 america/new_yorkkk', 'hh12:mi:ss');" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_527" value="select coalesce(,1,null,2);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_528" value="select coalesce();" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_529" value="select localtimestamp('skdfhhgh跳或者购买功能') from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_531" value="select '0.0999'::money &lt;= '0.1000'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_532" value="select '52093.89'::money &lt;= '52093.891'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_533" value="select '52093.891'::money &lt;= '52093.897'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_534" value="select '0.001'::money &lt;= '0.0'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_535" value="select '0.099'::money &lt;= '0.1'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_536" value="select '0.0999'::money != '0.1000'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_537" value="select '52093.89'::money != '52093.891'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_538" value="select '52093.891'::money != '52093.897'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_539" value="select '0.001'::money != '0.0'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_540" value="select '0.099'::money != '0.1'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_542" value="select '521'::money != '520'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_543" value="select '520'::money != '521'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_546" value="select '0.0999'::money = '0.1000'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_547" value="select '52093.89'::money = '52093.891'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_548" value="select '52093.891'::money = '52093.897'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_549" value="select '0.001'::money = '0.0'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_550" value="select '0.099'::money = '0.1'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_551" value="select '521'::money = '520'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_552" value="select '520'::money = '521'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_557" value="select '521'::money &gt;= '520'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_558" value="select '520'::money &gt;= '521'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_559" value="select '521'::money &lt;= '520'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_560" value="select '520'::money &lt;= '521'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_562" value="select '521'::money &lt;&gt; '520'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_563" value="select '520'::money &lt;&gt; '521'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_564" value="select '0.0999'::money &lt;&gt; '0.1000'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_565" value="select '52093.89'::money &lt;&gt; '52093.891'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_566" value="select '52093.891'::money &lt;&gt; '52093.897'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_567" value="select '0.001'::money &lt;&gt; '0.0'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_568" value="select '0.099'::money &lt;&gt; '0.1'::money;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_570" value="select sign(~);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_571" value="select tan(11 11) from tan_T1;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_572" value="select tan(,) from tan_T1;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_573" value="select mod(154414,,44) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_574" value="select mod(,) from sys_dummy;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_575" value="select median(days) from (values(interval '4' day), (interval '5' day), (interval '6' day), (interval '7' day)) as test(days);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_576" value="select every(array[1.1,2.1,3.1]::int[] =[1,2,3]);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_577" value="select bool_and(array[1.1,2.1,3.1]::int[] =[1,2,3]);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_578" value="select string_agg(name, #) from table_test;" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_579" value="select bool_or(array[1.1,2.1,3.1]::int[] =[1,2,3]);" db-types="openGauss"/>
    <sql-case id="unsupported_select_case_for_opengauss_580" value="select bool_or(@);" db-types="openGauss"/>
    <sql-case id="assertDistSQLShowRuleParseConflict" value="SHOW READWRITE_SPLITTING RULE FROM schema_name" db-types="PostgreSQL,openGauss"/>
</sql-cases>
