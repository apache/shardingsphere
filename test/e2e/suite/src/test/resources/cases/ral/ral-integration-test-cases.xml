<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<integration-test-cases>
    <test-case sql="SHOW READWRITE_SPLITTING HINT STATUS">
        <assertion expected-data-file="default_readwrite_splitting_hint.xml" />
        <assertion expected-data-file="set_readwrite_splitting_hint.xml">
            <initial-sql sql="SET READWRITE_SPLITTING HINT SOURCE = write" />
            <destroy-sql sql="CLEAR READWRITE_SPLITTING HINT" />
        </assertion>
        <assertion expected-data-file="default_readwrite_splitting_hint.xml">
            <initial-sql sql="SET READWRITE_SPLITTING HINT SOURCE = write;CLEAR READWRITE_SPLITTING HINT" />
        </assertion>
        <assertion expected-data-file="default_readwrite_splitting_hint.xml">
            <initial-sql sql="SET READWRITE_SPLITTING HINT SOURCE = write;CLEAR HINT" />
        </assertion>
    </test-case>

    <test-case sql="SHOW SHARDING HINT STATUS">
        <assertion expected-data-file="default_sharding_hint.xml" />
        <assertion expected-data-file="set_database_value_hint.xml">
            <initial-sql sql="SET SHARDING HINT DATABASE_VALUE = 100" />
            <destroy-sql sql="CLEAR SHARDING HINT" />
        </assertion>
        <assertion expected-data-file="add_database_value_hint.xml">
            <initial-sql sql="ADD SHARDING HINT DATABASE_VALUE t_user_item= 100" />
            <destroy-sql sql="CLEAR SHARDING HINT" />
        </assertion>
        <assertion expected-data-file="add_table_value_hint.xml">
            <initial-sql sql="ADD SHARDING HINT TABLE_VALUE t_user_item = 100" />
        </assertion>
        <assertion expected-data-file="default_sharding_hint.xml">
            <initial-sql sql="ADD SHARDING HINT TABLE_VALUE t_user_item= 100;CLEAR SHARDING HINT" />
        </assertion>
        <assertion expected-data-file="default_sharding_hint.xml">
            <initial-sql sql="ADD SHARDING HINT TABLE_VALUE t_user_item= 100;CLEAR HINT" />
        </assertion>
    </test-case>

    <test-case sql="show dist variable where name = transaction_type">
        <assertion expected-data-file="default_transaction_type.xml" />
    </test-case>

    <test-case sql="show dist variable where name = transaction_type">
        <assertion expected-data-file="transaction_type.xml">
            <initial-sql sql="set dist variable transaction_type = 'XA'" />
            <destroy-sql sql="set dist variable transaction_type = 'LOCAL'" />
        </assertion>
    </test-case>

    <test-case sql="show dist variable where name = cached_connections">
        <assertion expected-data-file="cached_connections.xml" />
    </test-case>

    <test-case sql="preview select * from t_user_item">
        <assertion expected-data-file="preview_sql.xml" />
    </test-case>

    <test-case
            sql="PREVIEW SELECT * FROM t_single_table s INNER JOIN t_user_item i ON s.single_id = i.item_id WHERE i.user_id = 1">
        <assertion expected-data-file="preview_federation_select.xml" />
    </test-case>

    <test-case sql="SHOW COMPUTE NODES">
        <assertion expected-data-file="show_compute_nodes.xml" />
    </test-case>

    <test-case sql="REFRESH DATABASE METADATA FROM GOVERNANCE CENTER" db-types="MySQL">
        <assertion expected-data-file="show_sharding_table_rule.xml">
            <assertion-sql sql="SHOW SHARDING TABLE RULES" />
        </assertion>
        <assertion expected-data-file="show_storage_units.xml">
            <assertion-sql sql="SHOW STORAGE UNITS" />
        </assertion>
        <assertion expected-data-file="show_tables.xml">
            <assertion-sql sql="SHOW TABLES" />
        </assertion>
    </test-case>
    
    <test-case sql="SELECT n.nspname as &quot;Schema&quot;, c.relname as &quot;Name&quot;, CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as &quot;Type&quot;, pg_catalog.pg_get_userbyid(c.relowner) as &quot;Owner&quot; FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('r','p','v','m','S','f','') AND n.nspname &lt;&gt; 'pg_catalog' AND n.nspname &lt;&gt; 'information_schema' AND n.nspname !~ '^pg_toast' AND pg_catalog.pg_table_is_visible(c.oid) ORDER BY 1,2;" db-types="PostgreSQL">
        <assertion expected-data-file="select_sys_data_for_pg.xml" />
    </test-case>

    <test-case sql="SELECT n.nspname as &quot;Schema&quot;, c.relname as &quot;Name&quot;, CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'I' THEN 'global partition index' WHEN 'S' THEN 'sequence' WHEN 'L' THEN 'large sequence' WHEN 'f' THEN 'foreign table' WHEN 'm' THEN 'materialized view'  WHEN 'e' THEN 'stream' WHEN 'o' THEN 'contview' END as &quot;Type&quot;, pg_catalog.pg_get_userbyid(c.relowner) as &quot;Owner&quot;, c.reloptions as &quot;Storage&quot; FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('r','v','m','S','L','f','e','o','') AND n.nspname &lt;&gt; 'pg_catalog' AND n.nspname &lt;&gt; 'db4ai' AND n.nspname &lt;&gt; 'information_schema' AND n.nspname !~ '^pg_toast' AND c.relname not like 'matviewmap\_%' AND c.relname not like 'mlog\_%' AND pg_catalog.pg_table_is_visible(c.oid) ORDER BY 1,2;" db-types="openGauss">
        <assertion expected-data-file="select_sys_data_for_og.xml" />
    </test-case>
    
    <test-case sql="select * from shardingsphere.sharding_table_statistics;" db-types="MySQL,PostgreSQL,openGauss">
        <assertion expected-data-file="select_sharding_table_statistics.xml" />
    </test-case>

    <test-case sql="SHOW AUTHORITY RULE;">
        <assertion expected-data-file="show_authority_rule.xml" />
    </test-case>

    <test-case sql="SHOW TRANSACTION RULE;">
        <assertion expected-data-file="show_transaction_rule.xml" />
    </test-case>

    <test-case sql="SHOW SQL_PARSER RULE;">
        <assertion expected-data-file="show_sql_parse_rule.xml" />
    </test-case>

    <test-case sql="SHOW STATUS FROM READWRITE_SPLITTING RULES;">
        <assertion expected-data-file="show_status_from_readwrite_splitting_rules.xml" />
    </test-case>

    <test-case sql="SHOW DIST VARIABLES;">
        <assertion expected-data-file="show_dist_variables.xml" />
    </test-case>

    <test-case sql="SHOW DIST VARIABLE WHERE name = sql_show;">
        <assertion expected-data-file="show_dist_variable_where_name_equal_sql_show.xml" />
    </test-case>
    
    <test-case sql="SET DIST VARIABLE sql_show = true;">
        <assertion expected-data-file="set_dist_variable_sql_show_equal_true.xml">
            <initial-sql sql="SET DIST VARIABLE sql_show = true;" />
            <assertion-sql sql="SHOW DIST VARIABLE WHERE name = sql_show;" />
            <destroy-sql sql="SET DIST VARIABLE sql_show = false;" />
        </assertion>
    </test-case>
    
    <test-case sql="SHOW COMPUTE NODE INFO">
        <assertion expected-data-file="show_compute_node_info.xml" />
    </test-case>
    
    <test-case sql="SHOW COMPUTE NODE MODE">
        <assertion expected-data-file="show_compute_node_mode.xml" />
    </test-case>
</integration-test-cases>

